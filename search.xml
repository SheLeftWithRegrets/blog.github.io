<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小白也能看懂的Hexo博客搭建完全教程</title>
    <url>/blog.github.io/2025/02/12/%E7%AC%AC%E4%BA%8C%E7%AF%87%EF%BC%9A%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>如果你是一个完全的小白，在开始之前，让我们先了解一些基础概念：</p>
<h3 id="我们需要用到什么？"><a href="#我们需要用到什么？" class="headerlink" title="我们需要用到什么？"></a>我们需要用到什么？</h3><ol>
<li><p><strong>命令行&#x2F;终端</strong>：</p>
<ul>
<li>这是一个输入命令的黑框框</li>
<li>Windows系统叫”命令提示符”或”PowerShell”</li>
<li>Mac系统叫”终端”(Terminal)</li>
<li>如何打开：<ul>
<li>Windows：按Win+R，输入cmd或powershell</li>
<li>Mac：按Command+空格，输入terminal</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Node.js</strong>：</p>
<ul>
<li>一个让JavaScript能在电脑上运行的工具</li>
<li>我们用它来运行Hexo博客系统</li>
<li>下载地址：<a href="https://nodejs.org/">https://nodejs.org/</a></li>
<li>推荐版本：v18.19.0 LTS</li>
<li>注意：不要使用最新的 v20.x 版本，可能会有兼容性问题</li>
</ul>
</li>
<li><p><strong>Git</strong>：</p>
<ul>
<li>用来上传和管理代码的工具</li>
<li>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
<li>Windows推荐版本：v2.43.0</li>
<li>Mac推荐版本：v2.43.0</li>
<li>安装时选择默认选项即可</li>
</ul>
</li>
<li><p><strong>GitHub</strong>：</p>
<ul>
<li>一个代码托管平台</li>
<li>我们用它来免费存放博客网站</li>
<li>需要注册一个账号：<a href="https://github.com/signup">https://github.com/signup</a></li>
</ul>
</li>
<li><p><strong>Markdown</strong>：</p>
<ul>
<li>一种简单的写作格式</li>
<li>用特殊符号来标记文字样式</li>
<li>例如：# 表示标题，** ** 表示加粗</li>
</ul>
</li>
</ol>
<h3 id="软件版本说明"><a href="#软件版本说明" class="headerlink" title="软件版本说明"></a>软件版本说明</h3><p>以下是经过测试的、完全兼容的软件版本组合：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Node.js: v18.19.0 LTS</span><br><span class="line">npm: v10.2.3 (随Node.js一起安装)</span><br><span class="line">Git: v2.43.0</span><br><span class="line">Hexo: v7.0.0</span><br><span class="line">hexo-cli: v4.3.1</span><br><span class="line">Next主题: v8.18.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重要提示：</p>
<ol>
<li>使用其他版本可能会遇到兼容性问题</li>
<li>如果已经安装了其他版本，建议先卸载后重新安装推荐版本</li>
<li>安装Node.js时会自动安装对应版本的npm</li>
</ol>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo是一个快速、简洁且高效的博客框架。它使用Markdown解析文章，可以在几秒内生成带有精美主题的静态网页。本文将详细介绍如何从零开始搭建一个Hexo博客。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-安装必要软件"><a href="#1-安装必要软件" class="headerlink" title="1. 安装必要软件"></a>1. 安装必要软件</h3><p>在开始之前，我们需要安装以下软件：</p>
<ul>
<li><strong>Node.js</strong>: 下载并安装 <a href="https://nodejs.org/">Node.js</a></li>
<li><strong>Git</strong>: 下载并安装 <a href="https://git-scm.com/">Git</a></li>
</ul>
<h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><p>打开命令行工具(Windows用户使用PowerShell或CMD)，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli@4.3.1</span><br><span class="line">hexo -v  <span class="comment"># 验证安装，应显示 hexo-cli: 4.3.1</span></span><br></pre></td></tr></table></figure>

<h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><h3 id="1-初始化博客"><a href="#1-初始化博客" class="headerlink" title="1. 初始化博客"></a>1. 初始化博客</h3><p>选择一个合适的位置，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="2-目录结构说明"><a href="#2-目录结构说明" class="headerlink" title="2. 目录结构说明"></a>2. 目录结构说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blog/</span><br><span class="line">├── _config.yml     # 网站配置文件</span><br><span class="line">├── package.json    # 应用程序信息</span><br><span class="line">├── scaffolds/     # 模版文件夹</span><br><span class="line">├── source/        # 存放用户资源的文件夹</span><br><span class="line">|   ├── _drafts/   # 草稿箱</span><br><span class="line">|   └── _posts/    # 文章文件夹</span><br><span class="line">└── themes/        # 主题文件夹</span><br></pre></td></tr></table></figure>

<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="1-修改网站信息"><a href="#1-修改网站信息" class="headerlink" title="1. 修改网站信息"></a>1. 修改网站信息</h3><p>编辑<code>_config.yml</code>文件，修改以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的博客</span>           <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;副标题&#x27;</span>        <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;网站描述&#x27;</span>   <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">博客,Hexo</span>      <span class="comment"># 网站关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者名</span>           <span class="comment"># 作者名称</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>         <span class="comment"># 网站语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment"># 时区设置</span></span><br></pre></td></tr></table></figure>

<h3 id="2-配置部署信息"><a href="#2-配置部署信息" class="headerlink" title="2. 配置部署信息"></a>2. 配置部署信息</h3><p>如果要部署到GitHub Pages，首先需要安装部署插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后在<code>_config.yml</code>中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用HTTPS方式</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># GitHub现在默认使用main分支</span></span><br></pre></td></tr></table></figure>

<p>或者使用SSH方式（推荐）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用SSH方式（需要先配置SSH密钥）</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># GitHub现在默认使用main分支</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果使用SSH方式，需要先在GitHub上添加你的SSH公钥。生成和添加SSH密钥的步骤如下：</p>
<ol>
<li>生成SSH密钥：<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></li>
<li>复制公钥内容：<code>cat ~/.ssh/id_rsa.pub</code></li>
<li>在GitHub设置中添加SSH密钥（Settings -&gt; SSH and GPG keys -&gt; New SSH key）</li>
</ol>
</blockquote>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1. 新建文章"></a>1. 新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure>

<p>这将在<code>source/_posts</code>目录下创建一个新的Markdown文件。</p>
<h3 id="2-文章格式"><a href="#2-文章格式" class="headerlink" title="2. 文章格式"></a>2. 文章格式</h3><p>每篇文章都以Front-matter开头：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-02-12 10:00:00</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">分类名</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">这里开始写正文...</span></span><br></pre></td></tr></table></figure>

<h2 id="主题安装与配置"><a href="#主题安装与配置" class="headerlink" title="主题安装与配置"></a>主题安装与配置</h2><h3 id="1-安装Next主题"><a href="#1-安装Next主题" class="headerlink" title="1. 安装Next主题"></a>1. 安装Next主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="2. 启用主题"></a>2. 启用主题</h3><p>修改博客根目录下的<code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h3 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h3><p>编辑<code>themes/next/_config.yml</code>文件，可以配置：</p>
<ul>
<li>主题风格</li>
<li>菜单项</li>
<li>侧边栏</li>
<li>头像</li>
<li>社交链接等</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean     <span class="comment"># 清除缓存文件和已生成的静态文件</span></span><br><span class="line">hexo generate  <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo server    <span class="comment"># 启动本地服务器</span></span><br><span class="line">hexo deploy    <span class="comment"># 部署网站</span></span><br></pre></td></tr></table></figure>

<h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><h3 id="1-创建GitHub仓库"><a href="#1-创建GitHub仓库" class="headerlink" title="1. 创建GitHub仓库"></a>1. 创建GitHub仓库</h3><p>创建一个名为<code>用户名.github.io</code>的仓库。</p>
<h3 id="2-部署步骤"><a href="#2-部署步骤" class="headerlink" title="2. 部署步骤"></a>2. 部署步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="进阶优化"><a href="#进阶优化" class="headerlink" title="进阶优化"></a>进阶优化</h2><h3 id="1-添加搜索功能"><a href="#1-添加搜索功能" class="headerlink" title="1. 添加搜索功能"></a>1. 添加搜索功能</h3><p>安装搜索插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>在<code>_config.yml</code>中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="2-添加评论系统"><a href="#2-添加评论系统" class="headerlink" title="2. 添加评论系统"></a>2. 添加评论系统</h3><p>Next主题支持多种评论系统，如Disqus、Gitalk等。以Gitalk为例，在主题配置文件中启用：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">GitHub用户名</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">存储评论的仓库名</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">你的client</span> <span class="string">id</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">你的client</span> <span class="string">secret</span></span><br></pre></td></tr></table></figure>

<h3 id="3-文章永久链接优化"><a href="#3-文章永久链接优化" class="headerlink" title="3. 文章永久链接优化"></a>3. 文章永久链接优化</h3><p>安装永久链接插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>在<code>_config.yml</code>中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span></span><br></pre></td></tr></table></figure>

<h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-部署失败"><a href="#1-部署失败" class="headerlink" title="1. 部署失败"></a>1. 部署失败</h3><ul>
<li>检查GitHub仓库名是否正确</li>
<li>确认是否正确配置了deploy信息</li>
<li>检查是否安装了hexo-deployer-git</li>
</ul>
<h3 id="2-主题无法显示"><a href="#2-主题无法显示" class="headerlink" title="2. 主题无法显示"></a>2. 主题无法显示</h3><ul>
<li>确认主题文件夹名称与配置文件中的theme值一致</li>
<li>检查主题文件是否完整下载</li>
</ul>
<h3 id="3-图片显示问题"><a href="#3-图片显示问题" class="headerlink" title="3. 图片显示问题"></a>3. 图片显示问题</h3><p>推荐使用以下方式引用图片：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">/images/图片名.jpg</span>)</span><br></pre></td></tr></table></figure>

<p>确保图片放在<code>source/images</code>目录下。</p>
<h2 id="维护与更新"><a href="#维护与更新" class="headerlink" title="维护与更新"></a>维护与更新</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h3><p>建议将整个博客目录托管到GitHub：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;backup&quot;</span></span><br><span class="line">git remote add origin 备份仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h3 id="2-更新Hexo"><a href="#2-更新Hexo" class="headerlink" title="2. 更新Hexo"></a>2. 更新Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过以上步骤，你已经可以搭建一个功能完善的个人博客了。建议在实践中多参考<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>，遇到问题可以查看官方文档或在GitHub Issues中寻找解决方案。</p>
<p>记住，博客的建设是一个渐进的过程，可以在基础搭建完成后，逐步添加新的功能和优化。最重要的是开始创作内容，让你的博客充满生机。</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
        <tag>零基础教程</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>简单音乐播放器的实现</title>
    <url>/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h2 id="HTML实现"><a href="#HTML实现" class="headerlink" title="HTML实现"></a>HTML实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;mp3路径&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用html中定义音频的标签audio，通过使用controls属性，来显示音频控制器来控制音频控制。通过使用ul来展示歌词部分。</p>
<h2 id="CSS实现"><a href="#CSS实现" class="headerlink" title="CSS实现"></a>CSS实现</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0</span>.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highLight</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过css来实现高亮，隐藏超出container块的内容。通过list-style来隐藏列表项。</p>
<h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置ul元素的偏移量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setOffset</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="title function_">findIndex</span>();</span><br><span class="line">    <span class="keyword">var</span> offSet =  liHeight*(index+<span class="number">1</span>) - containerHeight/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(offSet &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        offSet = <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(offSet &gt; maxOffset)&#123;</span><br><span class="line">        offSet = maxOffset</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除之前存在高亮的样式</span></span><br><span class="line">    <span class="keyword">var</span> li = doms.<span class="property">ul</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.highLight&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (li)&#123;</span><br><span class="line">        li.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;highLight&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加高亮的样式</span></span><br><span class="line">    <span class="keyword">var</span> li = doms.<span class="property">ul</span>.<span class="property">children</span>[index]</span><br><span class="line">    <span class="keyword">if</span> (li)&#123;</span><br><span class="line">        <span class="comment">// li.className = &quot;highLight&quot;</span></span><br><span class="line">        li.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;highLight&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    doms.<span class="property">ul</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(-<span class="subst">$&#123;offSet&#125;</span>px)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要展示如何实现ul元素的偏移.</p>
<h2 id="获取到的新JavaScript知识"><a href="#获取到的新JavaScript知识" class="headerlink" title="获取到的新JavaScript知识."></a>获取到的新JavaScript知识.</h2><ul>
<li>使用document.querySelector(“”)<br>文档对象模型Document引用的querySelector()方法返回文档中与指定选择器或选择器组匹配的第一个Element对象。如果找不到匹配项，则返回null。主要通过搜索DOM树上节点来获取到需要的对象</li>
<li>clientHeigh：元素的像素高度，包含元素的高度+内边距，不包含水平滚动条，边框和外边距。</li>
<li>offsetHeight：元素的像素高度，包含元素的高度，垂直内边距和边框，水平滚动条的高度，且是一个整数。</li>
<li>scrollHeight：元素内容的高度，包括溢出的不可见内容。</li>
<li>offsetLeft：返回元素左上角相对于offsetParent的左边界的偏移像素值。</li>
<li>audio标签存在自带的监听器，可以监听音频的播放、暂停、停止、音量调整等事件。也快有用于监听时间的改变，并可以根据监听，实现对应的函数方法。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听音频播放事件</span></span><br><span class="line">audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>,setOffset)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS包含块</title>
    <url>/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/</url>
    <content><![CDATA[<h1 id="你不知道的-CSS-之包含块"><a href="#你不知道的-CSS-之包含块" class="headerlink" title="你不知道的 CSS 之包含块"></a>你不知道的 CSS 之包含块</h1><p>包含块英语全称为<strong>containing block</strong>，实际上平时你在书写 CSS 时，大多数情况下你是感受不到它的存在，因此你不知道这个知识点也是一件很正常的事情。但是这玩意儿是确确实实存在的，在 CSS 规范中也是明确书写了的：</p>
<p><em><a href="https://drafts.csswg.org/css2/#containing-block-details">https://drafts.csswg.org/css2/#containing-block-details</a></em></p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-142459.png" alt="image-20220814222458695" style="zoom:50%;" />

<p>并且，如果你不了解它的运作机制，有时就会出现一些你认为的莫名其妙的现象。</p>
<p>那么，这个包含块究竟说了什么内容呢？</p>
<p>说起来也简单，<strong>就是元素的尺寸和位置，会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值（比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</strong></p>
<p>来吧，少年，让我们从最简单的 case 开始看。</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143153.png" alt="image-20220814223152726" style="zoom: 50%;" />

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请仔细阅读上面的代码，然后你认为 div.item 这个盒子的宽高是多少？</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143451.png" alt="image-20220814223451349" style="zoom: 33%;" />

<p>相信你能够很自信的回答这个简单的问题，div.item 盒子的 width 为 250px，height 为 150px。</p>
<p>这个答案确实是没有问题的，但是如果我追问你是怎么得到这个答案的，我猜不了解包含块的你大概率会说，因为它的父元素 div.container 的 width 为 500px，50% 就是 250px，height 为 300px，因此 50% 就是 150px。</p>
<p>这个答案实际上是不准确的。正确的答案应该是，<strong>div.item 的宽高是根据它的包含块来计算的</strong>，而这里包含块的大小，正是这个元素最近的祖先块元素的内容区。</p>
<p>因此正如我前面所说，<strong>很多时候你都感受不到包含块的存在。</strong></p>
<p>包含块分为两种，一种是根元素（HTML 元素）所在的包含块，被称之为初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</p>
<p>另外一种是对于非根元素，对于非根元素的包含块判定就有几种不同的情况了。大致可以分为如下几种：</p>
<ul>
<li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的块容器（block container）的内容区域（content area）的边缘建立。</li>
<li>如果 position 属性是 fixed，那么包含块由视口建立。</li>
<li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li>
</ul>
<p>前面两条实际上都还比较好理解，第三条往往是初学者容易比较忽视的，我们来看一个示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先阅读上面的代码，然后你能在脑海里面想出其大致的样子么？或者用笔和纸画一下也行。</p>
<p>公布正确答案：</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-153548.png" alt="image-20220814233548188" style="zoom: 33%;" />

<p>怎么样？有没有和你所想象的对上？</p>
<p>其实原因也非常简单，根据上面的第三条规则，对于 div.item2 来讲，它的包含块应该是 div.container，而非 div.item。</p>
<p>如果你能把上面非根元素的包含块判定规则掌握，那么关于包含块的知识你就已经掌握 80% 了。</p>
<p>实际上对于非根元素来讲，包含块还有一种可能，那就是如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：</p>
<ul>
<li>transform 或 perspective 的值不是 none</li>
<li>will-change 的值是 transform 或 perspective </li>
<li>filter 的值不是 none 或 will-change 的值是 filter(只在 Firefox 下生效). </li>
<li>contain 的值是 paint (例如: contain: paint;)</li>
</ul>
<p>我们还是来看一个示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="comment">/* 新增代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们对于上面的代码只新增了一条声明，那就是 transform: rotate(0deg)，此时的渲染效果却发生了改变，如下图所示：</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154347.png" alt="image-20220814234347149" style="zoom:33%;" />

<p>可以看到，此时对于 div.item2 来讲，包含块就变成了 div.item。</p>
<p>好了，到这里，关于包含块的知识就基本讲完了。</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" />

<p>我们再把 CSS 规范中所举的例子来看一下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Illustration of containing blocks<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>This is text in the first paragraph...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span></span><br><span class="line">        This is text</span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">id</span>=<span class="string">&quot;em1&quot;</span>&gt;</span></span><br><span class="line">          in the</span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;strong1&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          paragraph.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面是一段简单的 HTML 代码，在没有添加任何 CSS 代码的情况下，你能说出各自的包含块么？</p>
<p>对应的结果如下：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>包含块</th>
</tr>
</thead>
<tbody><tr>
<td>html</td>
<td>initial C.B. (UA-dependent)</td>
</tr>
<tr>
<td>body</td>
<td>html</td>
</tr>
<tr>
<td>div1</td>
<td>body</td>
</tr>
<tr>
<td>p1</td>
<td>div1</td>
</tr>
<tr>
<td>p2</td>
<td>div1</td>
</tr>
<tr>
<td>em1</td>
<td>p2</td>
</tr>
<tr>
<td>strong1</td>
<td>p2</td>
</tr>
</tbody></table>
<p>首先 HTML 作为根元素，对应的包含块就是前面我们所说的初始包含块，而对于 body 而言，这是一个 static 定位的元素，因此该元素的包含块参照第一条为 html，以此类推 div1、p1、p2 以及 em1 的包含块也都是它们的父元素。</p>
<p>不过 strong1 比较例外，它的包含块确实 p2，而非 em1。为什么会这样？建议你再把非根元素的第一条规则读一下：</p>
<ul>
<li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的<strong>块容器（block container）</strong>的内容区域（content area）的边缘建立。</li>
</ul>
<p>没错，因为 em1 不是块容器，而包含块是<strong>离它最近的块容器</strong>的内容区域，所以是 p2。</p>
<p>接下来添加如下的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码我们对 div1 进行了定位，那么此时的包含块会发生变化么？你可以先在自己思考一下。</p>
<p>答案如下：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>包含块</th>
</tr>
</thead>
<tbody><tr>
<td>html</td>
<td>initial C.B. (UA-dependent)</td>
</tr>
<tr>
<td>body</td>
<td>html</td>
</tr>
<tr>
<td>div1</td>
<td>initial C.B. (UA-dependent)</td>
</tr>
<tr>
<td>p1</td>
<td>div1</td>
</tr>
<tr>
<td>p2</td>
<td>div1</td>
</tr>
<tr>
<td>em1</td>
<td>p2</td>
</tr>
<tr>
<td>strong1</td>
<td>p2</td>
</tr>
</tbody></table>
<p>可以看到，这里 div1 的包含块就发生了变化，变为了初始包含块。这里你可以参考前文中的这两句话：</p>
<ul>
<li>初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</li>
<li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li>
</ul>
<p>是不是一下子就理解了。没错，因为我们对 div1 进行了定位，因此它会应用非根元素包含块计算规则的第三条规则，寻找离它最近的  position 的值不是 static 的祖先元素，不过显然 body 的定位方式为 static，因此 div1 的包含块最终就变成了初始包含块。</p>
<p>接下来我们继续修改我们的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#em1</span>  &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们对 em1 同样进行了 absolute 绝对定位，你想一想会有什么样的变化？</p>
<p>没错，聪明的你大概应该知道，em1 的包含块不再是 p2，而变成了 div1，而 strong1 的包含块也不再是 p2 了，而是变成了 em1。</p>
<p>如下表所示：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>包含块</th>
</tr>
</thead>
<tbody><tr>
<td>html</td>
<td>initial C.B. (UA-dependent)</td>
</tr>
<tr>
<td>body</td>
<td>html</td>
</tr>
<tr>
<td>div1</td>
<td>initial C.B. (UA-dependent)</td>
</tr>
<tr>
<td>p1</td>
<td>div1</td>
</tr>
<tr>
<td>p2</td>
<td>div1</td>
</tr>
<tr>
<td>em1</td>
<td>div1（因为定位了，参阅非根元素包含块确定规则的第三条）</td>
</tr>
<tr>
<td>strong1</td>
<td>em1（因为 em1 定位了，其包含块将成为最近定位的元素）</td>
</tr>
</tbody></table>
<p>好了，这就是 CSS 规范中所举的例子。如果你全都能看明白，以后你还能跟别人说你是看过这一块知识对应的 CSS 规范的人。</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-013519.png" alt="image-20220815093518833" style="zoom:33%;" />

<p>另外，关于包含块的知识，在 MDN 上除了解说了什么是包含块以外，也举出了很多简单易懂的示例。</p>
<p>具体你可以移步到：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block</a></em></p>
<p>好了，这就是有关包含块的所有内容了，你学会了么？-）</p>
<hr>
<p>-<em>上述文档来源渡一</em>-</p>
<h2 id="个人归纳总结"><a href="#个人归纳总结" class="headerlink" title="个人归纳总结"></a>个人归纳总结</h2><ul>
<li>一个元素的几何信息是由它的包含块决定的。在布局步骤时，根据元素的包含块来确认该元素的宽高，位置等几何信息。</li>
<li>对于标准文档流布局来说，一个元素的包含块就是他的父元素，即最近的祖先元素</li>
<li>对于绝对定位的元素来说，它的包含块是最近开启定位的祖先元素。而使用position：fixed的元素，它的包含块就是视口。</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性计算过程</title>
    <url>/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="CSS-属性计算过程"><a href="#CSS-属性计算过程" class="headerlink" title="CSS 属性计算过程"></a>CSS 属性计算过程</h1><p>你是否了解 CSS 的属性计算过程呢？</p>
<p>有的同学可能会讲，CSS属性我倒是知道，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的 CSS 代码中，p 是元素选择器，color 就是其中的一个 CSS 属性。</p>
<p>但是要说 CSS 属性的计算过程，还真的不是很清楚。</p>
<p>没关系，通过此篇文章，能够让你彻底明白什么是 CSS 属性的计算流程。</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060434.png" alt="image-20220813140434032" style="zoom:50%;" />

<p>首先，不知道你有没有考虑过这样的一个问题，假设在 HTML 中有这么一段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码也非常简单，就是在 body 中有一个 h1 标题而已，该 h1 标题呈现出来的外观是如下：</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060724.png" alt="image-20220813140724136" style="zoom:50%;" />

<p>目前我们没有设置该 h1 的任何样式，但是却能看到该 h1 有一定的默认样式，例如有默认的字体大小、默认的颜色。</p>
<p>那么问题来了，我们这个 h1 元素上面除了有默认字体大小、默认颜色等属性以外，究竟还有哪些属性呢？</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014216.png" alt="image-20220815094215982" style="zoom:30%;" />

<p>答案是<strong>该元素上面会有 CSS 所有的属性。</strong>你可以打开浏览器的开发者面板，选择【元素】，切换到【计算样式】，之后勾选【全部显示】，此时你就能看到在此 h1 上面所有 CSS 属性对应的值。</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-061516.png" alt="image-20220813141516153"></p>
<p>换句话说，<strong>我们所书写的任何一个 HTML 元素，实际上都有完整的一整套 CSS 样式</strong>。这一点往往是让初学者比较意外的，因为我们平时在书写 CSS 样式时，往往只会书写必要的部分，例如前面的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这往往会给我们造成一种错觉，认为该 p 元素上面就只有 color 属性。而真实的情况确是，任何一个 HTML 元素，都有一套完整的 CSS 样式，只不过你没有书写的样式，<strong>大概率可能</strong>会使用其默认值。例如上图中 h1 一个样式都没有设置，全部都用的默认值。</p>
<p>但是注意，我这里强调的是“大概率可能”，难道还有我们“没有设置值，但是不使用默认值”的情况么？</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014459.png" alt="image-20220815094458940" style="zoom:25%;" />

<p>嗯，确实有的，所以我才强调你要了解“CSS 属性的计算过程”。</p>
<p>总的来讲，属性值的计算过程，分为如下这么 <em>4</em> 个步骤：</p>
<ul>
<li>确定声明值</li>
<li>层叠冲突</li>
<li>使用继承</li>
<li>使用默认值</li>
</ul>
<h2 id="确定声明值"><a href="#确定声明值" class="headerlink" title="确定声明值"></a>确定声明值</h2><p>首先第一步，是确定声明值。所谓声明值就是作者自己所书写的 CSS 样式，例如前面的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们声明了 p 元素为红色，那么就会应用此属性设置。</p>
<p>当然，除了作者样式表，一般浏览器还会存在“用户代理样式表”，简单来讲就是浏览器内置了一套样式表。</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-063500.png" alt="image-20220813143500066"></p>
<p>在上面的示例中，作者样式表中设置了 color 属性，而用户代理样式表（浏览器提供的样式表）中设置了诸如 display、margin-block-start、margin-block-end、margin-inline-start、margin-inline-end 等属性对应的值。</p>
<p>这些值目前来讲也没有什么冲突，因此最终就会应用这些属性值。</p>
<h2 id="层叠冲突"><a href="#层叠冲突" class="headerlink" title="层叠冲突"></a>层叠冲突</h2><p>在确定声明值时，可能出现一种情况，那就是声明的样式规则发生了冲突。</p>
<p>此时会进入解决层叠冲突的流程。而这一步又可以细分为下面这三个步骤：</p>
<ul>
<li>比较源的重要性</li>
<li>比较优先级</li>
<li>比较次序</li>
</ul>
<p>来来来，我们一步一步来看。</p>
<h3 id="比较源的重要性"><a href="#比较源的重要性" class="headerlink" title="比较源的重要性"></a>比较源的重要性</h3><p>当不同的 CSS 样式来源拥有相同的声明时，此时就会根据样式表来源的重要性来确定应用哪一条样式规则。</p>
<p>那么问题来了，咱们的样式表的源究竟有几种呢？</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-100047.png" alt="image-20220823180047075" style="zoom:40%;" />

<p>整体来讲有三种来源：</p>
<ul>
<li>浏览器会有一个基本的样式表来给任何网页设置默认样式。这些样式统称<strong>用户代理样式</strong>。</li>
<li>网页的作者可以定义文档的样式，这是最常见的样式表，称之为<strong>页面作者样式</strong>。</li>
<li>浏览器的用户，可以使用自定义样式表定制使用体验，称之为<strong>用户样式</strong>。</li>
</ul>
<p>对应的重要性顺序依次为：页面作者样式 &gt; 用户样式 &gt; 用户代理样式</p>
<p>更详细的来源重要性比较，可以参阅 <em>MDN</em>：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade</a></em></p>
<p>我们来看一个示例。</p>
<p>例如现在有<strong>页面作者样式表</strong>和<strong>用户代理样式表</strong>中存在属性的冲突，那么会以作者样式表优先。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-064222.png" alt="image-20220813144222152"></p>
<p>可以明显的看到，作者样式表和用户代理样式表中同时存在的 display 属性的设置，最终作者样式表干掉了用户代理样式表中冲突的属性。这就是第一步，根据不同源的重要性来决定应用哪一个源的样式。</p>
<h3 id="比较优先级"><a href="#比较优先级" class="headerlink" title="比较优先级"></a>比较优先级</h3><p>那么接下来，如果是在在同一个源中有样式声明冲突怎么办呢？此时就会进行样式声明的优先级比较。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span> <span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，同属于<strong>页面作者样式</strong>，源的重要性是相同的，此时会以选择器的权重来比较重要性。</p>
<p>很明显，上面的选择器的权重要大于下面的选择器，因此最终标题呈现为 <em>50px</em>。</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-09-16-071546.png" alt="image-20210916151546500" style="zoom: 40%;" />

<p>可以看到，落败的作者样式在 <em>Elements&gt;Styles</em> 中会被划掉。</p>
<p>有关选择器权重的计算方式，不清楚的同学，可以进入此传送门：<em><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity</a></em></p>
<h3 id="比较次序"><a href="#比较次序" class="headerlink" title="比较次序"></a>比较次序</h3><p>经历了上面两个步骤，大多数的样式声明能够被确定下来。但是还剩下最后一种情况，那就是样式声明既是同源，权重也相同。</p>
<p>此时就会进入第三个步骤，比较样式声明的次序。</p>
<p>举个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，同样都是<strong>页面作者样式</strong>，<strong>选择器的权重也相同</strong>，此时位于下面的样式声明会层叠掉上面的那一条样式声明，最终会应用 <em>20px</em> 这一条属性值。</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-103928.png" alt="image-20220823183928330"></p>
<p>至此，样式声明中存在冲突的所有情况，就全部被解决了。</p>
<h2 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h2><p>层叠冲突这一步完成后，解决了相同元素被声明了多条样式规则究竟应用哪一条样式规则的问题。</p>
<p>那么如果没有声明的属性呢？此时就使用默认值么？</p>
<p><em>No、No、No</em>，别急，此时还有第三个步骤，那就是使用继承而来的值。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们针对 div 设置了 color 属性值为红色，而针对 p 元素我们没有声明任何的属性，但是由于 color 是可以继承的，因此 p 元素从最近的 div 身上继承到了 color 属性的值。</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065102.png" alt="image-20220813145102293"></p>
<p>这里有两个点需要同学们注意一下。</p>
<p>首先第一个是我强调了是<strong>最近的</strong> div 元素，看下面的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065653.png" alt="image-20220813145652726"></p>
<p>因为这里并不涉及到选中 p 元素声明 color 值，而是从父元素上面继承到 color 对应的值，因此这里是<strong>谁近就听谁</strong>的，初学者往往会产生混淆，又去比较权重，但是这里根本不会涉及到权重比较，因为压根儿就没有选中到 p 元素。</p>
<p>第二个就是哪些属性能够继承？</p>
<p>关于这一点的话，大家可以在 MDN 上面很轻松的查阅到。例如我们以 text-align 为例，如下图所示：</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070148.png" alt="image-20220813150147885"></p>
<h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><p>好了，目前走到这一步，如果属性值都还不能确定下来，那么就只能是使用默认值了。</p>
<p>如下图所示：</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070825.png" alt="image-20220813150824752"></p>
<p>前面我们也说过，一个 HTML 元素要在浏览器中渲染出来，必须具备所有的 CSS 属性值，但是绝大部分我们是不会去设置的，用户代理样式表里面也不会去设置，也无法从继承拿到，因此最终都是用默认值。</p>
<p>好了，这就是关于 CSS 属性计算过程的所有知识了。</p>
<img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" />



<h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><p>好了，学习了今天的内容，让我来用一道面试题测试测试大家的理解程度。</p>
<p>下面的代码，最终渲染出来的效果，a 元素是什么颜色？p 元素又是什么颜色？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大家能说出为什么会呈现这样的结果么？</p>
<p>解答如下：</p>
<p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-071941.png" alt="image-20220813151941113"></p>
<p>实际上原因很简单，因为 a 元素在用户代理样式表中已经设置了 color 属性对应的值，因此会应用此声明值。而在 p 元素中无论是作者样式表还是用户代理样式表，都没有对此属性进行声明，然而由于 color 属性是可以继承的，因此最终 p 元素的 color 属性值通过继承来自于父元素。</p>
<p>你答对了么？-）</p>
<hr>
<p>-<em>EOF</em>-</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染原理</title>
    <url>/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>###面试题：浏览器是如何渲染页面的？<br>当浏览器的网络线程获取到html文档后，会产生一个渲染任务，并将其加入在渲染主线程的消息队列。<br>在事件循环机制下，渲染主线程取出消息队列中的渲染任务，开始渲染流程。<br><img data-src="/blog.github.io/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.JPG" alt="浏览器渲染流程"></p>
<p>在解析过程中，遇到CSS解析CSS，遇到JS解析JS，为了提高解析效率，浏览器在开始解析前，会创建一个预解析的线程，率先下载HTML中外部CSS文件和外部的JS文件。<br>如果主线程解析到link位置，此时外部的CSS文件还没有下载好，主线程不会等待，而是继续解析HTML，外部的预解析线程会去下载外部的CSS文件并解析成CSSOM树返回给主线程，主线程合并目前生成好的DOM和CSSOM。这就是CSS不会阻塞HTML解析的原因。<br><img data-src="/blog.github.io/images/CSS%E9%A2%84%E8%A7%A3%E6%9E%90.JPG" alt="CSS预解析"><br>如果主线程解析到script位置，会停止解析HTML，转而等待JS文件下载好，并将全局代码解析执行完成后，才继续解析HTML，这是因为JS代码的执行过程中可能会修改当前的DOM树，所以DOM树的生成必须暂停。这就是JS会阻塞HTML解析的原因。<br><img data-src="/blog.github.io/images/JS%E9%A2%84%E8%A7%A3%E6%9E%90.JPG" alt="JS预解析"><br>第一步完成后，会得到DOM树和CSSOM树，浏览器的默认样式，内联样式，外部样式，行内样式均会包含在CSSOM树中。</p>
<p>渲染的下一步是样式计算：<br>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它最终的样式，称之为Computed Style。<br>在这一过程中，很多预设值会变成绝对值，比如red会变成rgb（255，0，0）;相对单位会变成绝对单位，比如em会变成px。<br>这一步完成后，会得到一颗带有样式的DOM树。</p>
<p>接下来是布局，布局完成后会得到布局树。<br>布局阶段会依次遍历DOM树的每一个节点，计算每个节点的几何信息。例如节点的宽高，相对包含块的位置。<br>大部分时候，DOM树和布局树并非一一对应。<br>比如display:none的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然DOM树中不存在这些伪元素节点，但它们拥有几何信息，使用会生成到布局树匿名行盒，匿名块盒等等都会导致DOM树和布局树无法一一对应。</p>
<p>下一步是分层<br>主线程会使用一套复杂的策略对整个布局树中进行分层。<br>分层的好处在于，将来其某一个层改变后，仅会对该层进行后续处理，从而提升效率。<br>滚动条，堆叠上下文，transform，opacity等样式都会或多或少的影响分层结果，也可以通过will-change属性更大程度的影响分层结果。</p>
<p>再下一步，绘制 paint<br>canvas的绘制是由浏览器开放出来的绘制功能。<br>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p>
<p>分块：Tiles<br>完成绘制之后，主线程会将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。合成线程首先对每个图层进行分块，将其划分为更多的小区域。<br>它会从线程池中拿取多个线程来完成分块工作。</p>
<p>光栅化Raster :将每个块变成位图，优先处理靠近视图的块。<br>分块完成后，进入光栅化阶段<br>合成线程会将块信息交给GPU进程，以极高的速度完成光栅化。<br>GPU进程会开启多个线程来完成光栅化，并优先处理靠近视口区域的块。<br>光栅化的结果就是一块一块的位图。</p>
<p>画 draw<br>合成线程拿到每个层，每个块的位图后，生成一个个指引【quad】信息。<br>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转，缩放等变形。变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因。<br>合成线程会把quad提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。</p>
<p>整个渲染流程分为多个阶段，包括：HTML解析，样式计算，布局，分层，绘制，分块，光栅化，画。每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。<br>这样，整个渲染流程就形成了一套组织严密的生产流水线。<br>渲染主线程的主要工作内容为：parse HTML，computed style，生成layout布局树，对dom树进行分层，绘制dom树。后续步骤由其他线程完成。<br>完整流程：<br><img data-src="/blog.github.io/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.JPG" alt="浏览器渲染的完整流程"></p>
<h3 id="面试题：什么是reflow？"><a href="#面试题：什么是reflow？" class="headerlink" title="面试题：什么是reflow？"></a>面试题：什么是reflow？</h3><p>reflow的本质是重新计算layout树。<br>当进行了会影响布局树的操作后，需要重新计算布局树，会引发layout。<br>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后再进行计算。所以，改动属性造成的reflow是异步完成的。<br>也同样因为如此，当JS获取布局属性时，就可能造成无法获取到最新的布局信息。<br>浏览器在反复权衡下，最终决定获取属性立即reflow。</p>
<h3 id="面试题：什么是repaint？"><a href="#面试题：什么是repaint？" class="headerlink" title="面试题：什么是repaint？"></a>面试题：什么是repaint？</h3><p>repaint的本质就是重新根据分层信息计算了绘制指令，<br>当改动了可见样式后，就需要重新计算，会引发repaint。<br>由于元素的布局信息也属于可见样式，所以reflow一定会引发repaint。</p>
<h3 id="面试题：为什么transform的效率高？"><a href="#面试题：为什么transform的效率高？" class="headerlink" title="面试题：为什么transform的效率高？"></a>面试题：为什么transform的效率高？</h3><p>因为transform既不会影响布局也不会影响绘制指令，影响的只是渲染流程的最后一个【draw】阶段。由于draw阶段在合成线程中，所以transform的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响transform的变化。</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环</title>
    <url>/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h3><p>什么是进程？<br>程序运行时需要有自己专属的内存空间，可以把这块内存空间简单的理解为进程。<br>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p>
<p>什么是线程？<br>一个进程至少有一个线程，所以在进程开启后，会自动创建一个线程来运行代码，该线程称之为主线程。tips：主线程是唯一的，其他线程都是由主线程创建的。当主线程关闭后进程也就关闭了</p>
<p>如果程序需要同时执行多个代码块，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</p>
<h3 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h3><p>浏览器是一个多进程多线程的应用程序。内部工作极其复杂。<br>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。<br>最主要的进程有：<br>浏览器进程：主要负责界面显示，用户交互，子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。<br>网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。<br>渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行HTML,CSS,JS代码，解析渲染页面。<br>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</p>
<h3 id="渲染主线程时如何工作的？"><a href="#渲染主线程时如何工作的？" class="headerlink" title="渲染主线程时如何工作的？"></a>渲染主线程时如何工作的？</h3><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：<br>解析HTML、CSS、计算样式，布局，处理图层，每秒把页面画60次即60HZ（主要是为了用户的浏览感知效果），执行全局JS代码，执行事件处理函数，执行计时器的回调函数。</p>
<p>思考题：为什么渲染进程不适用多个线程来处理这些事情？</p>
<p>渲染主线程想出了一个办法来处理同一时间来自多个线程的任务。即开启消息队列。<br>1.在最开始的时候，渲染主线程会进入一个无限循环<br>2.每一次循环会检查消息队列中是否有任务存在。如果有，则会取出第一个任务并执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。<br>3.其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务使，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务。<br>整个过程被称之为事件循环。<br><img data-src="/blog.github.io/images/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA.JPG" alt="事件循环"></p>
<p>##何为异步<br>代码在执行过程中，会遇到一些无法立即处理的任务，比如：<br>计时完成后需要执行的任务–setTimeout()，setInterval()<br>网络通信完成后需要执行的任务–XHR，Fetch<br>用户操作后需要执行的任务–addEventListener()<br>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于【阻塞】的状态，从而导致浏览器【卡死】。例如计时器计时五秒钟，则不会等待五秒钟后才开始处理。</p>
<p>所以计时器的原理：<br>1.渲染主线程会创建一个计时器对象，并将其添加到消息队列中。<br>2.当渲染主线程执行到计时器对象时，会通知计时器线程开始计时，并将计时器对象对应的任务结束。<br>3.渲染主线程继续执行消息队列中待处理的任务。计时线程开始计时<br>4.计时结束后，计时线程会将计时器对象对应的任务添加到消息队列中。<br>这就是异步的处理方式，渲染主线程永远不会阻塞。<br><img data-src="/blog.github.io/images/%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B.JPG" alt="异步操作"></p>
<p>###面试题：如何解释js中的异步？<br>js是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个，而渲染主线程承担着很多的工作，渲染页面，执行JS都在其中运行。<br>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中很多其他任务无法得到执行。<br>这样一来，一方面会导致繁忙的主线程白白的浪费时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br>所以，浏览器采用异步的方式避免，具体做法是当某些任务发生时，比如计时器，网络，事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码，当其他线程完成时，将事先传递的回调函数包装成任务（任务是一个对象！！），加入到消息队列的末尾排队，等待主线程调度执行。<br>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>
<p>###js是怎么阻碍渲染的？<br>因为js的渲染任务和一些计时器的任务都在渲染主线程上运行。当一个定义的计时器的函数被调用后，计时器之前的修改内容不会立即在主线程上渲染，而是会加载在消息队列中，等待主线程结束计时器的任务后，才会渲染。<br>因此会导致即使值发生了修改，但是不会立即渲染在页面。同理如果存在这种情况点击其他事件也不会立即响应，因为事件也在消息队列中，等待主线程执行。<br><img data-src="/blog.github.io/images/%E8%AE%A1%E6%97%B6%E5%99%A8%E5%AF%BC%E8%87%B4%E9%98%BB%E5%A1%9E.JPG" alt="计时器导致阻塞"></p>
<p>###任务有优先级吗？<br>任务没有优先级，在消息队列中先进先出。但是消息队列存在优先级。</p>
<p>W3C的最新解释：<br>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。<br>浏览器必须准备好一个微队列，微队列的任务优先所有其他任务执行。</p>
<p>chrome浏览器的实现，至少包含了下面的队列：<br>延时队列：用于存放计时器到达后的回调任务，优先级【中】<br>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】<br>微队列：用户存放需要最快执行的任务，优先级【最高】</p>
<p>添加任务到微队列的主要方式主要是使用promise，MutationObserver，requestAnimationFrame等。<br>promise：使用promise.resolve().then()方法可以将任务添加到微队列。</p>
<p>！！！渲染主队列会将代码中所有需要执行的任务添加在消息队列中，按照消息队列的顺序执行，根据消息队列中不同类型的任务放置在不同的队列上，但是微队列优先级最高，所以微队列中的任务会优先执行。等待微队列中的任务执行完毕后，在看交互队列。其中使用promise会将任务直接防止在微队列中。</p>
<p>面试题：阐述一下JS的事件循环机制：<br>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。<br>在chrome的源码中，它开启一个不会结束的for循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。<br>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。<br>根据W3C的最新解释，每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。但是浏览器必须准备好一个微队列，微队列的任务优先所有其他任务执行。</p>
<p>面试题：JS中的计时器能做到精确计时吗？为什么？<br>不行，<br>1.计算机硬件没有原子钟，无法做到精确计时。<br>2.操作系统的计时函数本身就有少量偏差，因为js的计时器最终调用的是操作系统的函数，也就是有些偏差。<br>3.按照W3C的标准，浏览器实现计时器时，如果嵌套层数超过五层，则会带有4ms的等待时间。<br>4.受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此带来了偏差。</p>
<p>原子钟（英文：atomic clock），是一种利用原子量子特性产生高度稳定且准确频率信号的仪器，是目前测量时间最精确的工具。原子钟的运作核心是利用原子作为基准物质，构建一个类似电子振荡器的装置，当振荡器产生的电磁波频率与原子固有的振动频率相匹配时，原子将经历“能级跃迁”，表明振荡器发射的频率与原子的共振频率相一致，构成了原子钟运作的基本原理</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>浏览器</tag>
        <tag>事件循环</tag>
      </tags>
  </entry>
  <entry>
    <title>周记</title>
    <url>/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="周记"><a href="#周记" class="headerlink" title="周记"></a>周记</h1><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><h3 id="3-3-3-4"><a href="#3-3-3-4" class="headerlink" title="3.3-3.4"></a>3.3-3.4</h3><p>编写了自己的毕业设计。实现了数据分析，数据可视化等功能。并使用nginx对项目进行反向代理。<br>主要技术栈为vue3+iview+echarts+python+flask+mysql。<br>线下面试了一家公司，面试岗位为前端开发（实习生）。<br>面试流程：一套笔试题，主要问到原型链，this指向，call，apply，bind。vue23的区别等技术栈。<br>但面试结束后告知我面试的岗位不招人了。。。。。。</p>
<h3 id="3-5-3-6"><a href="#3-5-3-6" class="headerlink" title="3.5-3.6"></a>3.5-3.6</h3><p>接了一单毕业设计，实现多种功能，按照甲方的需求实现代码。主要针对于python爬虫，数据分析，数据可视化，Hadoop集群和hive。</p>
<h3 id="3-7-3-8"><a href="#3-7-3-8" class="headerlink" title="3.7-3.8"></a>3.7-3.8</h3><p>1.面试了一家深圳的公司，面试岗位为前端开发（实习生）。主要面试了promise，echarts和个人项目的痛点。<br>2.修改了个人博客，增加了一些next主题的各种配置，添加了评论功能，修改了主题样式，没之前那么华丽了。</p>
<h2 id="主要收获"><a href="#主要收获" class="headerlink" title="主要收获"></a>主要收获</h2><p>1.学会了使用DrissionPage对淘宝的母婴商品进行数据爬取，并进行数据分析和数据可视化。<br>2.对于简单系统的搭建有一定的了解。稍微熟悉了使用nginx反向代理。</p>
<h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><p>能约到面试，但是自身的基础还是不太牢固。还是需要对于js，vue，css，html等基础知识进行巩固。</p>
<h2 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h2><p>1.做一个简单的小程序项目，熟悉一下小程序开发。<br>2.争取开发一个网站，实现web前端知识的模拟练题。而不是只靠背，最好配合代码块。</p>
<p>##3.10<br>场景：用户对于分页板块，进行多次点击页面按钮，发送了多次请求，需要正确的响应到最后一次的点击页面。<br>昨天复习到了一个知识点。关于xhr.abort()方法，可以取消xhr请求。可以用于用户多次点击按钮，重复多次请求时，确认正确的点击页面，取消上一次的请求。<br>涉及后端的话，可以给每次请求添加一个reqest_id，在响应中返回该id，前端根据id判断是否是最后一次的请求。<br>添加londing状态，从根源上解决问题。（降低用户体验）</p>
<p>##3.10 -3.14<br>完整整个毕业论文整体流程和内容，是否完整需要指导老师的查看后再次修改。</p>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
      <tags>
        <tag>周记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用DrissionPage进行高效的数据爬虫</title>
    <url>/blog.github.io/2025/03/07/%E7%AC%AC%E4%B9%9D%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8DrissionPage%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="使用DrissionPage进行高效的数据爬虫"><a href="#使用DrissionPage进行高效的数据爬虫" class="headerlink" title="使用DrissionPage进行高效的数据爬虫"></a>使用DrissionPage进行高效的数据爬虫</h1><h2 id="1-DrissionPage简介"><a href="#1-DrissionPage简介" class="headerlink" title="1. DrissionPage简介"></a>1. DrissionPage简介</h2><p>DrissionPage是一个功能强大的Python爬虫库，它结合了Selenium和Requests的优点，提供了更简单的API和更高效的性能。</p>
<h3 id="1-1-安装必要的库"><a href="#1-1-安装必要的库" class="headerlink" title="1.1 安装必要的库"></a>1.1 安装必要的库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install DrissionPage</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>

<h3 id="1-2-DrissionPage的优势"><a href="#1-2-DrissionPage的优势" class="headerlink" title="1.2 DrissionPage的优势"></a>1.2 DrissionPage的优势</h3><ul>
<li>无需配置webdriver</li>
<li>支持多种页面操作方式</li>
<li>内置反检测功能</li>
<li>性能优于Selenium</li>
<li>使用简单直观</li>
</ul>
<h2 id="2-爬取淘宝母婴商品实战"><a href="#2-爬取淘宝母婴商品实战" class="headerlink" title="2. 爬取淘宝母婴商品实战"></a>2. 爬取淘宝母婴商品实战</h2><h3 id="2-1-登录淘宝"><a href="#2-1-登录淘宝" class="headerlink" title="2.1 登录淘宝"></a>2.1 登录淘宝</h3><h4 id="2-1-1-扫码登录（推荐）"><a href="#2-1-1-扫码登录（推荐）" class="headerlink" title="2.1.1 扫码登录（推荐）"></a>2.1.1 扫码登录（推荐）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_by_qrcode</span>():</span><br><span class="line">    <span class="comment"># 创建浏览器对象</span></span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 访问淘宝登录页</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://login.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待扫码登录</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请在30秒内完成扫码登录...&#x27;</span>)</span><br><span class="line">    page.wait.ele_displayed(<span class="string">&#x27;#login-form&#x27;</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> page</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-账号密码登录"><a href="#2-1-2-账号密码登录" class="headerlink" title="2.1.2 账号密码登录"></a>2.1.2 账号密码登录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_by_password</span>(<span class="params">username, password</span>):</span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    page.get(<span class="string">&#x27;https://login.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 切换到密码登录</span></span><br><span class="line">        switch_btn = page.ele(<span class="string">&#x27;.password-login-tab&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> switch_btn:</span><br><span class="line">            switch_btn.click()</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 输入账号密码</span></span><br><span class="line">        page.ele(<span class="string">&#x27;#username&#x27;</span>).<span class="built_in">input</span>(username)</span><br><span class="line">        page.ele(<span class="string">&#x27;#password&#x27;</span>).<span class="built_in">input</span>(password)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 点击登录按钮</span></span><br><span class="line">        page.ele(<span class="string">&#x27;#btn-submit&#x27;</span>).click()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理可能的滑块验证</span></span><br><span class="line">        handle_slider(page)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 等待登录成功</span></span><br><span class="line">        page.wait.load_complete()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> page</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;密码登录失败：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_slider</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理滑块验证&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 等待滑块出现</span></span><br><span class="line">        slider = page.wait.ele_displayed(<span class="string">&#x27;#nc_1_n1z&#x27;</span>, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> slider:</span><br><span class="line">            <span class="comment"># 获取滑块和轨道信息</span></span><br><span class="line">            track = page.ele(<span class="string">&#x27;#nc_1_n1t&#x27;</span>)</span><br><span class="line">            slider_width = track.size[<span class="string">&#x27;width&#x27;</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 模拟人工滑动</span></span><br><span class="line">            page.actions.drag.move_to(slider)\</span><br><span class="line">                           .hold()\</span><br><span class="line">                           .move_by_offset(slider_width, <span class="number">0</span>, duration=<span class="number">0.5</span>)\</span><br><span class="line">                           .release()\</span><br><span class="line">                           .perform()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 等待验证结果</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-Cookie登录"><a href="#2-1-3-Cookie登录" class="headerlink" title="2.1.3 Cookie登录"></a>2.1.3 Cookie登录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_by_cookies</span>(<span class="params">cookies_str</span>):</span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 访问淘宝首页</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置cookies</span></span><br><span class="line">    cookies = parse_cookies(cookies_str)</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">        page.<span class="built_in">set</span>.cookie(cookie)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 刷新页面</span></span><br><span class="line">    page.refresh()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证登录状态</span></span><br><span class="line">    <span class="keyword">if</span> check_login_status(page):</span><br><span class="line">        <span class="keyword">return</span> page</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookies</span>(<span class="params">cookies_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析cookies字符串&quot;&quot;&quot;</span></span><br><span class="line">    cookies = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> cookies_str.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">            name, value = item.strip().split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            cookies.append(&#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;value&#x27;</span>: value&#125;)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_login_status</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查登录状态&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 检查是否存在登录标识</span></span><br><span class="line">        nickname = page.ele(<span class="string">&#x27;.site-nav-login-info-nick&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> nickname <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-4-登录状态保存与恢复"><a href="#2-1-4-登录状态保存与恢复" class="headerlink" title="2.1.4 登录状态保存与恢复"></a>2.1.4 登录状态保存与恢复</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_cookies</span>(<span class="params">page, file_path=<span class="string">&#x27;taobao_cookies.json&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存登录cookies&quot;&quot;&quot;</span></span><br><span class="line">    cookies = page.get.cookies()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(cookies, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_cookies</span>(<span class="params">file_path=<span class="string">&#x27;taobao_cookies.json&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载已保存的cookies&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> json.load(f)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_with_saved_cookies</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用保存的cookies登录&quot;&quot;&quot;</span></span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    cookies = load_cookies()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> cookies:</span><br><span class="line">        page.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">            page.<span class="built_in">set</span>.cookie(cookie)</span><br><span class="line">        page.refresh()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> check_login_status(page):</span><br><span class="line">            <span class="keyword">return</span> page</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果cookie无效，使用扫码登录</span></span><br><span class="line">    page = login_by_qrcode()</span><br><span class="line">    <span class="keyword">if</span> page:</span><br><span class="line">        save_cookies(page)</span><br><span class="line">    <span class="keyword">return</span> page</span><br></pre></td></tr></table></figure>

<h4 id="2-1-5-登录异常处理"><a href="#2-1-5-登录异常处理" class="headerlink" title="2.1.5 登录异常处理"></a>2.1.5 登录异常处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">safe_login</span>(<span class="params">retry_times=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;安全登录处理&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(retry_times):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 优先使用保存的cookies</span></span><br><span class="line">            page = login_with_saved_cookies()</span><br><span class="line">            <span class="keyword">if</span> page:</span><br><span class="line">                <span class="keyword">return</span> page</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># cookies失效，使用扫码登录</span></span><br><span class="line">            page = login_by_qrcode()</span><br><span class="line">            <span class="keyword">if</span> page:</span><br><span class="line">                save_cookies(page)</span><br><span class="line">                <span class="keyword">return</span> page</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次登录失败：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;登录失败，请稍后重试&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 方式1：扫码登录</span></span><br><span class="line">        page = login_by_qrcode()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 方式2：账号密码登录</span></span><br><span class="line">        <span class="comment"># page = login_by_password(&#x27;your_username&#x27;, &#x27;your_password&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 方式3：Cookie登录</span></span><br><span class="line">        <span class="comment"># page = login_by_cookies(&#x27;cookie字符串&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 方式4：使用保存的登录状态</span></span><br><span class="line">        <span class="comment"># page = login_with_saved_cookies()</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> page:</span><br><span class="line">            <span class="comment"># 开始爬取数据</span></span><br><span class="line">            taobao_crawler(page, <span class="string">&#x27;婴儿奶粉&#x27;</span>, max_pages=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;程序出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> page:</span><br><span class="line">            page.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li>账号密码登录容易触发验证码</li>
<li>Cookie登录需要定期更新Cookie</li>
<li>建议优先使用扫码登录</li>
<li>保存登录状态可以避免频繁登录</li>
<li>注意处理各种异常情况</li>
</ol>
<h3 id="2-2-搜索母婴商品"><a href="#2-2-搜索母婴商品" class="headerlink" title="2.2 搜索母婴商品"></a>2.2 搜索母婴商品</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_products</span>(<span class="params">keyword</span>):</span><br><span class="line">    <span class="comment"># 访问淘宝首页</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定位搜索框并输入关键词</span></span><br><span class="line">    search_input = page.ele(<span class="string">&#x27;#q&#x27;</span>)</span><br><span class="line">    search_input.<span class="built_in">input</span>(keyword)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 点击搜索按钮</span></span><br><span class="line">    search_button = page.ele(<span class="string">&#x27;.btn-search&#x27;</span>)</span><br><span class="line">    search_button.click()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待搜索结果加载</span></span><br><span class="line">    page.wait.load_complete()</span><br></pre></td></tr></table></figure>

<h3 id="2-3-获取商品信息"><a href="#2-3-获取商品信息" class="headerlink" title="2.3 获取商品信息"></a>2.3 获取商品信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_product_info</span>():</span><br><span class="line">    products = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取商品列表</span></span><br><span class="line">    items = page.eles(<span class="string">&#x27;.item&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 提取商品信息</span></span><br><span class="line">            product = &#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: item.ele(<span class="string">&#x27;.title&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;price&#x27;</span>: item.ele(<span class="string">&#x27;.price&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;sales&#x27;</span>: item.ele(<span class="string">&#x27;.deal-cnt&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;shop&#x27;</span>: item.ele(<span class="string">&#x27;.shop&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;location&#x27;</span>: item.ele(<span class="string">&#x27;.location&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span>: item.ele(<span class="string">&#x27;.title a&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            products.append(product)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> products</span><br></pre></td></tr></table></figure>

<h3 id="2-4-翻页操作"><a href="#2-4-翻页操作" class="headerlink" title="2.4 翻页操作"></a>2.4 翻页操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">next_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 点击下一页</span></span><br><span class="line">        next_btn = page.ele(<span class="string">&#x27;.next&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> next_btn <span class="keyword">and</span> <span class="keyword">not</span> next_btn.attr(<span class="string">&#x27;disabled&#x27;</span>):</span><br><span class="line">            next_btn.click()</span><br><span class="line">            page.wait.load_complete()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-完整爬虫代码"><a href="#2-5-完整爬虫代码" class="headerlink" title="2.5 完整爬虫代码"></a>2.5 完整爬虫代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">taobao_crawler</span>(<span class="params">keyword, max_pages=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># 初始化浏览器</span></span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 登录淘宝</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://login.taobao.com&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请在30秒内完成扫码登录...&#x27;</span>)</span><br><span class="line">    page.wait.ele_displayed(<span class="string">&#x27;#login-form&#x27;</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 搜索商品</span></span><br><span class="line">    search_products(keyword)</span><br><span class="line">    </span><br><span class="line">    all_products = []</span><br><span class="line">    current_page = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开始爬取数据</span></span><br><span class="line">    <span class="keyword">while</span> current_page &lt;= max_pages:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;正在爬取第<span class="subst">&#123;current_page&#125;</span>页...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取当前页商品信息</span></span><br><span class="line">        products = get_product_info()</span><br><span class="line">        all_products.extend(products)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 翻页</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_page():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        current_page += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)  <span class="comment"># 防止请求过快</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 保存数据</span></span><br><span class="line">    df = pd.DataFrame(all_products)</span><br><span class="line">    df.to_csv(<span class="string">f&#x27;taobao_<span class="subst">&#123;keyword&#125;</span>_<span class="subst">&#123;time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)&#125;</span>.csv&#x27;</span>, </span><br><span class="line">              index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;爬取完成，共获取<span class="subst">&#123;<span class="built_in">len</span>(all_products)&#125;</span>条商品信息&#x27;</span>)</span><br><span class="line">    page.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    taobao_crawler(<span class="string">&#x27;婴儿奶粉&#x27;</span>, max_pages=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-数据处理与分析"><a href="#3-数据处理与分析" class="headerlink" title="3. 数据处理与分析"></a>3. 数据处理与分析</h2><h3 id="3-1-数据清洗"><a href="#3-1-数据清洗" class="headerlink" title="3.1 数据清洗"></a>3.1 数据清洗</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clean_data</span>(<span class="params">df</span>):</span><br><span class="line">    <span class="comment"># 处理价格数据</span></span><br><span class="line">    df[<span class="string">&#x27;price&#x27;</span>] = df[<span class="string">&#x27;price&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;¥&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理销量数据</span></span><br><span class="line">    df[<span class="string">&#x27;sales&#x27;</span>] = df[<span class="string">&#x27;sales&#x27;</span>].<span class="built_in">str</span>.extract(<span class="string">&#x27;(\d+)&#x27;</span>).astype(<span class="built_in">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除重复数据</span></span><br><span class="line">    df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>

<h3 id="3-2-数据分析"><a href="#3-2-数据分析" class="headerlink" title="3.2 数据分析"></a>3.2 数据分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_data</span>(<span class="params">df</span>):</span><br><span class="line">    <span class="comment"># 基本统计</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;价格统计：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(df[<span class="string">&#x27;price&#x27;</span>].describe())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 销量排名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n销量TOP10：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(df.nlargest(<span class="number">10</span>, <span class="string">&#x27;sales&#x27;</span>)[[<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>]])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 地区分布</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n地区分布：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(df[<span class="string">&#x27;location&#x27;</span>].value_counts().head())</span><br></pre></td></tr></table></figure>

<h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><h3 id="4-1-反爬虫处理"><a href="#4-1-反爬虫处理" class="headerlink" title="4.1 反爬虫处理"></a>4.1 反爬虫处理</h3><ul>
<li>添加随机延时</li>
<li>使用代理IP</li>
<li>模拟真实用户行为</li>
<li>处理验证码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_sleep</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机延时&quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_verification</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理验证码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 根据实际情况实现</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-异常处理"><a href="#4-2-异常处理" class="headerlink" title="4.2 异常处理"></a>4.2 异常处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">safe_crawler</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;装饰器：处理爬虫异常&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;爬取出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<h2 id="5-进阶优化"><a href="#5-进阶优化" class="headerlink" title="5. 进阶优化"></a>5. 进阶优化</h2><h3 id="5-1-多线程爬取"><a href="#5-1-多线程爬取" class="headerlink" title="5.1 多线程爬取"></a>5.1 多线程爬取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread_crawler</span>(<span class="params">keywords, max_pages=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(<span class="keyword">lambda</span> kw: taobao_crawler(kw, max_pages), keywords)</span><br></pre></td></tr></table></figure>

<h3 id="5-2-自动化部署"><a href="#5-2-自动化部署" class="headerlink" title="5.2 自动化部署"></a>5.2 自动化部署</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">schedule_crawler</span>():</span><br><span class="line">    scheduler = BlockingScheduler()</span><br><span class="line">    scheduler.add_job(</span><br><span class="line">        taobao_crawler, </span><br><span class="line">        <span class="string">&#x27;cron&#x27;</span>, </span><br><span class="line">        args=[<span class="string">&#x27;婴儿奶粉&#x27;</span>], </span><br><span class="line">        hour=<span class="number">2</span>,  <span class="comment"># 每天凌晨2点执行</span></span><br><span class="line">        max_instances=<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    scheduler.start()</span><br></pre></td></tr></table></figure>

<p>本教程详细介绍了如何使用DrissionPage爬取淘宝母婴商品数据，包括登录、搜索、数据提取、翻页等核心功能，以及数据处理、异常处理、反爬虫等进阶内容。通过这个实例，读者可以掌握DrissionPage的基本使用方法，并能够应用到其他网站的爬虫开发中。</p>
]]></content>
      <categories>
        <category>数据爬虫</category>
      </categories>
      <tags>
        <tag>数据爬虫</tag>
        <tag>python</tag>
        <tag>DrissionPage</tag>
        <tag>淘宝</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下MySQL8.0安装指南与常见问题解决</title>
    <url>/blog.github.io/2025/03/05/%E7%AC%AC%E5%85%AB%E7%AF%87%EF%BC%9Acentos7%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<h1 id="CentOS7下MySQL8-0安装指南与常见问题解决"><a href="#CentOS7下MySQL8-0安装指南与常见问题解决" class="headerlink" title="CentOS7下MySQL8.0安装指南与常见问题解决"></a>CentOS7下MySQL8.0安装指南与常见问题解决</h1><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="检查系统环境"><a href="#检查系统环境" class="headerlink" title="检查系统环境"></a>检查系统环境</h3><ol>
<li><p><strong>检查是否已安装MySQL</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br><span class="line"><span class="comment"># 如果有安装，需要卸载</span></span><br><span class="line">rpm -e --nodeps mysql-xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查&#x2F;tmp目录权限</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /| grep tmp</span><br><span class="line"><span class="comment"># 确保权限为 drwxrwxrwt</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /tmp</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>下载MySQL安装包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装MySQL仓库"><a href="#安装MySQL仓库" class="headerlink" title="安装MySQL仓库"></a>安装MySQL仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure>

<h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>

<h2 id="常见错误与解决方案"><a href="#常见错误与解决方案" class="headerlink" title="常见错误与解决方案"></a>常见错误与解决方案</h2><h3 id="1-初始密码相关问题"><a href="#1-初始密码相关问题" class="headerlink" title="1. 初始密码相关问题"></a>1. 初始密码相关问题</h3><p><strong>错误现象：</strong></p>
<ul>
<li>无法找到初始密码</li>
<li>密码修改失败</li>
<li>忘记原密码</li>
</ul>
<p><strong>解决方案：</strong></p>
<ol>
<li><p>首次安装后查看临时密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看初始密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用临时密码登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 输入临时密码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果忘记密码，按以下步骤重置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 停止MySQL服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 以跳过密码验证方式启动</span></span><br><span class="line"><span class="comment"># 编辑/etc/my.cnf，在[mysqld]下添加</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重启MySQL服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 无密码登录MySQL</span></span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 重置root密码</span></span><br><span class="line"><span class="comment"># MySQL 8.0的密码重置命令</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NewPassword123!&#x27;</span>;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">UPDATE mysql.user SET authentication_string=<span class="string">&#x27;&#x27;</span> WHERE user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NewPassword123!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 删除skip-grant-tables配置</span></span><br><span class="line"><span class="comment"># 编辑/etc/my.cnf，删除skip-grant-tables行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 重启MySQL服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 使用新密码登录</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意：</p>
<ul>
<li>新密码必须符合MySQL 8.0的密码策略要求</li>
<li>建议包含大小写字母、数字和特殊字符</li>
<li>密码长度至少8位</li>
</ul>
<h3 id="2-远程连接失败"><a href="#2-远程连接失败" class="headerlink" title="2. 远程连接失败"></a>2. 远程连接失败</h3><p><strong>错误现象：</strong></p>
<ul>
<li>ERROR 1130 (HY000): Host xxx is not allowed to connect</li>
</ul>
<p><strong>解决方案：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 登录MySQL后执行</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h3 id="3-密码策略问题"><a href="#3-密码策略问题" class="headerlink" title="3. 密码策略问题"></a>3. 密码策略问题</h3><p><strong>错误现象：</strong></p>
<ul>
<li>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</li>
</ul>
<p><strong>解决方案：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看密码策略</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 修改密码策略</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password.policy<span class="operator">=</span>LOW;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password.length<span class="operator">=</span><span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-内存不足问题"><a href="#4-内存不足问题" class="headerlink" title="4. 内存不足问题"></a>4. 内存不足问题</h3><p><strong>错误现象：</strong></p>
<ul>
<li>MySQL服务无法启动</li>
<li>日志显示内存不足</li>
</ul>
<p><strong>解决方案：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑/etc/my.cnf，添加或修改以下参数</span></span><br><span class="line">[mysqld]</span><br><span class="line">performance_schema_max_table_instances=400</span><br><span class="line">table_definition_cache=400</span><br><span class="line">table_open_cache=256</span><br></pre></td></tr></table></figure>

<h3 id="5-端口占用问题"><a href="#5-端口占用问题" class="headerlink" title="5. 端口占用问题"></a>5. 端口占用问题</h3><p><strong>错误现象：</strong></p>
<ul>
<li>Can’t start server: Bind on TCP&#x2F;IP port</li>
</ul>
<p><strong>解决方案：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看端口占用</span></span><br><span class="line">netstat -tulpn | grep 3306</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改端口号，编辑/etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">port=3307</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查防火墙</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><h3 id="基础配置优化"><a href="#基础配置优化" class="headerlink" title="基础配置优化"></a>基础配置优化</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_general_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓冲池大小</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span>=<span class="number">1</span>G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=/var/log/mysql/slow.log</span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="安装后检查"><a href="#安装后检查" class="headerlink" title="安装后检查"></a>安装后检查</h2><h3 id="安全性检查"><a href="#安全性检查" class="headerlink" title="安全性检查"></a>安全性检查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行安全性检查脚本</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查项包括：</span></span><br><span class="line"><span class="comment"># 1. 设置root密码</span></span><br><span class="line"><span class="comment"># 2. 删除匿名用户</span></span><br><span class="line"><span class="comment"># 3. 禁止root远程登录</span></span><br><span class="line"><span class="comment"># 4. 删除test数据库</span></span><br><span class="line"><span class="comment"># 5. 重新加载权限表</span></span><br></pre></td></tr></table></figure>

<h3 id="性能检查"><a href="#性能检查" class="headerlink" title="性能检查"></a>性能检查</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 检查系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%max_connections%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%buffer_pool%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%timeout%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检查状态变量</span></span><br><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Threads_%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Questions&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="常用运维命令"><a href="#常用运维命令" class="headerlink" title="常用运维命令"></a>常用运维命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">systemctl start mysqld    <span class="comment"># 启动</span></span><br><span class="line">systemctl stop mysqld     <span class="comment"># 停止</span></span><br><span class="line">systemctl restart mysqld  <span class="comment"># 重启</span></span><br><span class="line">systemctl status mysqld   <span class="comment"># 状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志查看</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件位置</span></span><br><span class="line">/etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">/var/lib/mysql</span><br></pre></td></tr></table></figure>

<p>这篇文档涵盖了MySQL8.0在CentOS7上安装过程中的常见问题和解决方案，以及基本的优化配置和运维命令。建议在实际操作时，根据服务器配置和业务需求适当调整参数。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL8.0</tag>
        <tag>centos7</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/blog.github.io/2025/02/24/%E7%AC%AC%E4%B8%83%E7%AF%87%EF%BC%9AVue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="Vue组件之间有哪些通信方式？"><a href="#Vue组件之间有哪些通信方式？" class="headerlink" title="Vue组件之间有哪些通信方式？"></a>Vue组件之间有哪些通信方式？</h3><p>组件通信的基本原则：谁向谁传，数据写在发送方。主要通信方式包括：</p>
<ol>
<li><strong>父传子</strong>：props</li>
<li><strong>子传父</strong>：$emit</li>
<li><strong>兄弟组件</strong>：<ul>
<li>$attrs&#x2F;$emit</li>
<li>$parent&#x2F;$root</li>
<li>Vuex</li>
<li>Event Bus($emit&#x2F;$on)</li>
</ul>
</li>
</ol>
<p>注：$attrs 是一个包含父组件传递给子组件但未在子组件的 props 中定义的属性的对象。</p>
<h2 id="指令优先级"><a href="#指令优先级" class="headerlink" title="指令优先级"></a>指令优先级</h2><h3 id="v-if和v-for的优先级是怎样的？"><a href="#v-if和v-for的优先级是怎样的？" class="headerlink" title="v-if和v-for的优先级是怎样的？"></a>v-if和v-for的优先级是怎样的？</h3><ul>
<li>Vue2中v-for优先级更高</li>
<li>Vue3中v-if优先级更高</li>
<li>官方文档明确表明不要在同一个标签中同时使用这两个指令</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="Vue的生命周期有哪些？各自的作用是什么？"><a href="#Vue的生命周期有哪些？各自的作用是什么？" class="headerlink" title="Vue的生命周期有哪些？各自的作用是什么？"></a>Vue的生命周期有哪些？各自的作用是什么？</h3><p><strong>Vue2生命周期：</strong></p>
<ol>
<li><p><strong>beforeCreate</strong></p>
<ul>
<li>在实例初始化之后，数据观测和事件配置之前调用</li>
<li>用途：初始化操作，但不能访问响应式数据</li>
</ul>
</li>
<li><p><strong>created</strong></p>
<ul>
<li>实例创建完成后调用</li>
<li>已完成数据观测、属性和方法的运算，watch&#x2F;event事件回调</li>
<li>用途：数据获取、事件监听等初始化操作</li>
</ul>
</li>
<li><p><strong>beforeMount</strong></p>
<ul>
<li>挂载开始前调用</li>
<li>用途：渲染前的准备工作，如数据格式化</li>
</ul>
</li>
<li><p><strong>mounted</strong></p>
<ul>
<li>DOM挂载完成后调用</li>
<li>用途：DOM操作、第三方库初始化</li>
</ul>
</li>
<li><p><strong>beforeUpdate</strong></p>
<ul>
<li>数据更新时调用，发生在虚拟DOM打补丁之前</li>
<li>用途：更新前访问现有DOM，如移除事件监听器</li>
</ul>
</li>
<li><p><strong>updated</strong></p>
<ul>
<li>虚拟DOM重新渲染和打补丁之后调用</li>
<li>用途：更新后的DOM操作，但应避免在此阶段更改状态</li>
</ul>
</li>
<li><p><strong>beforeDestroy</strong></p>
<ul>
<li>实例销毁前调用</li>
<li>用途：清理操作，如移除事件监听器、定时器</li>
</ul>
</li>
<li><p><strong>destroyed</strong></p>
<ul>
<li>实例销毁后调用</li>
<li>用途：最终的清理工作</li>
</ul>
</li>
</ol>
<p><strong>Vue3新增：</strong></p>
<ul>
<li><strong>setup</strong><ul>
<li>在组件实例创建之前执行</li>
<li>组合式API的入口</li>
<li>可访问props和context，但不能访问this</li>
</ul>
</li>
</ul>
<h2 id="组件扩展"><a href="#组件扩展" class="headerlink" title="组件扩展"></a>组件扩展</h2><h3 id="如何扩展一个组件？"><a href="#如何扩展一个组件？" class="headerlink" title="如何扩展一个组件？"></a>如何扩展一个组件？</h3><ol>
<li><strong>使用Composition API进行逻辑扩展</strong></li>
<li><strong>使用slots进行内容扩展</strong><ul>
<li>默认插槽</li>
<li>具名插槽</li>
<li>作用域插槽</li>
</ul>
</li>
</ol>
<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="什么是虚拟DOM？有什么优点？"><a href="#什么是虚拟DOM？有什么优点？" class="headerlink" title="什么是虚拟DOM？有什么优点？"></a>什么是虚拟DOM？有什么优点？</h3><p>虚拟DOM是一个虚拟的DOM对象，本质是一个JS对象。</p>
<p><strong>优点：</strong></p>
<ol>
<li>减少操作真实DOM的次数，提高程序性能</li>
<li>方便实现跨平台</li>
</ol>
<h2 id="Vue3新特性"><a href="#Vue3新特性" class="headerlink" title="Vue3新特性"></a>Vue3新特性</h2><h3 id="Vue3相比Vue2有哪些重要的新特性？"><a href="#Vue3相比Vue2有哪些重要的新特性？" class="headerlink" title="Vue3相比Vue2有哪些重要的新特性？"></a>Vue3相比Vue2有哪些重要的新特性？</h3><ol>
<li><p><strong>Composition API</strong></p>
<ul>
<li>用于组织和复用组件逻辑</li>
<li>将相同功能的代码放在一起，便于管理</li>
</ul>
</li>
<li><p><strong>响应式系统升级</strong></p>
<ul>
<li>使用Proxy替代Object.defineProperty</li>
<li>更好的性能和更完整的响应式支持</li>
</ul>
</li>
<li><p><strong>动态路由</strong></p>
<ul>
<li>更灵活的路由配置</li>
<li>在params后添加反斜杠和冒号实现动态路由</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础</title>
    <url>/blog.github.io/2025/02/24/%E7%AC%AC%E5%85%AD%E7%AF%87%EF%BC%9ANginx%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Nginx基础"><a href="#Nginx基础" class="headerlink" title="Nginx基础"></a>Nginx基础</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="什么是Nginx？为什么要使用它？"><a href="#什么是Nginx？为什么要使用它？" class="headerlink" title="什么是Nginx？为什么要使用它？"></a>什么是Nginx？为什么要使用它？</h3><p>Nginx是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP&#x2F;POP3&#x2F;SMTP代理服务器。</p>
<p><strong>使用背景：</strong></p>
<ul>
<li>解决服务器的负载均衡问题</li>
<li>提高并发能力</li>
<li>提高访问速度</li>
</ul>
<p><strong>特点：</strong></p>
<ul>
<li>占用内存少</li>
<li>并发能力强</li>
<li>稳定性高</li>
<li>扩展性好</li>
</ul>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="正向代理和反向代理有什么区别？"><a href="#正向代理和反向代理有什么区别？" class="headerlink" title="正向代理和反向代理有什么区别？"></a>正向代理和反向代理有什么区别？</h3><p><strong>正向代理：</strong></p>
<ul>
<li>代理服务器接收客户端的请求，并转发给目标服务器</li>
<li>代理服务器在客户端和服务器之间起到中介作用</li>
<li>示例：个人电脑使用VPN即为正向代理</li>
</ul>
<p><strong>反向代理：</strong></p>
<ul>
<li>服务器使用反向代理服务器，使客户端连接统一的URL</li>
<li>客户端无感知地连接到不同的服务器</li>
<li>示例：百度使用反向代理，访问同一域名实际连接到不同服务器</li>
</ul>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="Nginx的负载均衡策略有哪些？"><a href="#Nginx的负载均衡策略有哪些？" class="headerlink" title="Nginx的负载均衡策略有哪些？"></a>Nginx的负载均衡策略有哪些？</h3><ol>
<li><p><strong>轮询</strong></p>
<ul>
<li>按时间顺序逐一分配到不同后端服务器</li>
<li>自动剔除宕机的服务器</li>
</ul>
</li>
<li><p><strong>加权轮询</strong></p>
<ul>
<li>根据服务器性能差异分配不同权重</li>
<li>性能高的服务器分配更高的权重</li>
</ul>
</li>
<li><p><strong>ip_hash</strong></p>
<ul>
<li>根据客户端IP地址分配请求</li>
<li>保持用户请求固定分配到同一台服务器</li>
</ul>
</li>
</ol>
<h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><h3 id="Nginx的常用命令有哪些？"><a href="#Nginx的常用命令有哪些？" class="headerlink" title="Nginx的常用命令有哪些？"></a>Nginx的常用命令有哪些？</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx         <span class="comment"># 启动</span></span><br><span class="line">./nginx -s stop <span class="comment"># 停止</span></span><br><span class="line">./nginx -s quit <span class="comment"># 退出</span></span><br><span class="line">./nginx -s reload <span class="comment"># 重新加载</span></span><br><span class="line">./nginx -t     <span class="comment"># 检查配置文件</span></span><br><span class="line">ps -ef | grep nginx <span class="comment"># 查看nginx进程</span></span><br></pre></td></tr></table></figure>

<h3 id="Nginx的配置文件结构是怎样的？"><a href="#Nginx的配置文件结构是怎样的？" class="headerlink" title="Nginx的配置文件结构是怎样的？"></a>Nginx的配置文件结构是怎样的？</h3><ol>
<li><p><strong>全局配置</strong></p>
<ul>
<li>影响nginx全局的指令</li>
<li>包含用户组、进程数、日志路径等</li>
</ul>
</li>
<li><p><strong>events配置</strong></p>
<ul>
<li>影响nginx服务器与用户的网络连接</li>
<li>包含连接数、事件驱动模型等</li>
</ul>
</li>
<li><p><strong>http配置</strong></p>
<ul>
<li>代理、缓存、日志定义等配置</li>
<li>第三方模块的配置</li>
</ul>
</li>
</ol>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="如何配置反向代理和负载均衡？"><a href="#如何配置反向代理和负载均衡？" class="headerlink" title="如何配置反向代理和负载均衡？"></a>如何配置反向代理和负载均衡？</h3><p><strong>反向代理配置：</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://backend_server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡配置："><a href="#负载均衡配置：" class="headerlink" title="负载均衡配置："></a><strong>负载均衡配置：</strong><br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend_servers &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.1:80</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.2:80</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend_servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h2 id="新添加知识-–2025-03-02"><a href="#新添加知识-–2025-03-02" class="headerlink" title="新添加知识  –2025-03-02"></a>新添加知识  –2025-03-02</h2><h3 id="如何使用nginx部署前后端分离项目的生产环境？"><a href="#如何使用nginx部署前后端分离项目的生产环境？" class="headerlink" title="如何使用nginx部署前后端分离项目的生产环境？"></a>如何使用nginx部署前后端分离项目的生产环境？</h3><p><strong>前提条件：</strong></p>
<ul>
<li>前端项目已经部署完成，静态资源已经生成。</li>
<li>后端项目已经编译打包完成，生成可执行文件<br><strong>步骤：</strong></li>
</ul>
<ol>
<li>安装nginx<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install nginx</span><br></pre></td></tr></table></figure></li>
<li>配置nginx<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com; <span class="comment">#如果使用的是前端部署打包好的静态资源，则root指向静态资源的目录，否则指向后端项目的可执行文件目录。好处：和前端部署工具的开发环境隔离开，形成两个不同的环境。有利于开发</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html; <span class="comment">#指向前端项目的静态资源目录</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>启动nginx<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -s reload</span><br></pre></td></tr></table></figure></li>
<li>启动后端项目<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./backend</span><br></pre></td></tr></table></figure></li>
<li>浏览器访问<a href="http://www.example.com/">http://www.example.com</a></li>
</ol>
<h2 id="vite和Nginx的结合"><a href="#vite和Nginx的结合" class="headerlink" title="vite和Nginx的结合"></a>vite和Nginx的结合</h2><p>vite特点：实现开发环境的热更新，和快速的开发服务器。利用的时ES模块的特性。利于开发环境。代理配置只适用于开发环境。<br>开发环境配置：.env,<br>nginx特点：高性能的反向代理服务器，同时用于生产环境中提供静态内容服务。同时还具备负载均衡的功能。<br>在前后端分离项目时候，vite用于构建前端应用，生成静态文件，构建完成后，静态文件可以部署到Nginx服务器上，</p>
]]></content>
      <categories>
        <category>反向代理</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/blog.github.io/2025/02/24/%E7%AC%AC%E4%BA%94%E7%AF%87%EF%BC%9AJavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="防抖和节流的区别及应用场景？"><a href="#防抖和节流的区别及应用场景？" class="headerlink" title="防抖和节流的区别及应用场景？"></a>防抖和节流的区别及应用场景？</h3><p><strong>防抖(Debounce)：</strong></p>
<ul>
<li>定义：多次点击同一个按钮，只响应最后一次</li>
<li>应用：search搜索时，用户不断输入值，用防抖来节约请求资源</li>
</ul>
<p><strong>节流(Throttle)：</strong></p>
<ul>
<li>定义：高频率触发的事件，指定单位时间内只响应第一次</li>
<li>应用：<ul>
<li>鼠标不断点击触发mousedown(单位时间内只触发一次)</li>
<li>监听滚动事件</li>
</ul>
</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="什么是闭包？它的作用和问题是什么？"><a href="#什么是闭包？它的作用和问题是什么？" class="headerlink" title="什么是闭包？它的作用和问题是什么？"></a>什么是闭包？它的作用和问题是什么？</h3><p><strong>定义：</strong><br>一个函数内部定义的函数可以访问其外部函数的变量，即使外部函数已执行完毕。</p>
<p><strong>作用：</strong></p>
<ul>
<li>创建私有变量</li>
<li>延长变量的生命周期</li>
<li>减少全局变量的定义</li>
<li>避免全局变量的污染</li>
</ul>
<p><strong>内存泄漏问题：</strong></p>
<ul>
<li>原因：不再使用的内存没有及时释放</li>
<li>解决方法：<ul>
<li>及时清理不再需要的引用</li>
<li>避免不必要的全局变量</li>
<li>减少DOM引用</li>
<li>使用弱引用</li>
</ul>
</li>
</ul>
<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><h3 id="请详细说明原型和原型链的概念及关系"><a href="#请详细说明原型和原型链的概念及关系" class="headerlink" title="请详细说明原型和原型链的概念及关系"></a>请详细说明原型和原型链的概念及关系</h3><p><strong>构造函数与实例：</strong></p>
<ul>
<li>new一个构造函数会形成它的实例对象</li>
<li>每个构造函数都有prototype原型对象</li>
<li>prototype原型对象里的constructor指向构造函数</li>
<li>每个实例对象都有__proto__对象指向原型对象</li>
</ul>
<p><strong>原型对象：</strong></p>
<ul>
<li>是一个公共容器</li>
<li>特定类型所有实例对象都可以访问</li>
</ul>
<p><strong>原型链：</strong></p>
<ul>
<li>每个对象都可以有一个原型</li>
<li>原型还可以有它自己的原型</li>
<li>属性查找机制：当需要查找一个对象的属性时，如果对象本身没有这个属性，则会沿着原型链向上查找</li>
</ul>
<h2 id="作用域与变量提升"><a href="#作用域与变量提升" class="headerlink" title="作用域与变量提升"></a>作用域与变量提升</h2><h3 id="var、let、const的区别是什么？"><a href="#var、let、const的区别是什么？" class="headerlink" title="var、let、const的区别是什么？"></a>var、let、const的区别是什么？</h3><p><strong>声明方式：</strong></p>
<ol>
<li><p><strong>var</strong></p>
<ul>
<li>存在变量提升</li>
<li>可以重复声明</li>
<li>函数作用域</li>
</ul>
</li>
<li><p><strong>let</strong></p>
<ul>
<li>不存在变量提升</li>
<li>不可重复声明</li>
<li>块级作用域</li>
<li>暂时性死区</li>
</ul>
</li>
<li><p><strong>const</strong></p>
<ul>
<li>声明时必须赋值</li>
<li>不可重复声明</li>
<li>块级作用域</li>
<li>不可修改（对象属性可修改）</li>
</ul>
</li>
</ol>
<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><h3 id="Promise、async-await、Generator的区别和使用场景？"><a href="#Promise、async-await、Generator的区别和使用场景？" class="headerlink" title="Promise、async&#x2F;await、Generator的区别和使用场景？"></a>Promise、async&#x2F;await、Generator的区别和使用场景？</h3><ol>
<li><p><strong>Promise</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 成功 */</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>async&#x2F;await</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchData</span>()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Generator</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Event-Loop（事件循环）机制是什么？"><a href="#Event-Loop（事件循环）机制是什么？" class="headerlink" title="Event Loop（事件循环）机制是什么？"></a>Event Loop（事件循环）机制是什么？</h3><p><strong>执行顺序：</strong></p>
<ol>
<li>同步代码</li>
<li>微任务队列<ul>
<li>Promise.then</li>
<li>MutationObserver</li>
<li>process.nextTick(Node.js)</li>
</ul>
</li>
<li>宏任务队列<ul>
<li>setTimeout&#x2F;setInterval</li>
<li>setImmediate(Node.js)</li>
<li>requestAnimationFrame(浏览器)</li>
</ul>
</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="JavaScript有哪些数据类型？如何判断？"><a href="#JavaScript有哪些数据类型？如何判断？" class="headerlink" title="JavaScript有哪些数据类型？如何判断？"></a>JavaScript有哪些数据类型？如何判断？</h3><p><strong>基本数据类型：</strong></p>
<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Undefined</li>
<li>Null</li>
<li>Symbol(ES6)</li>
<li>BigInt(ES2020)</li>
</ul>
<p><strong>引用数据类型：</strong></p>
<ul>
<li>Object</li>
<li>Array</li>
<li>Function</li>
<li>Date</li>
<li>RegExp</li>
</ul>
<p><strong>类型判断方法：</strong></p>
<ol>
<li>typeof</li>
<li>instanceof</li>
<li>Object.prototype.toString.call()</li>
<li>Array.isArray()</li>
</ol>
<h2 id="ES6-新特性"><a href="#ES6-新特性" class="headerlink" title="ES6+新特性"></a>ES6+新特性</h2><h3 id="ES6及以后版本有哪些重要特性？"><a href="#ES6及以后版本有哪些重要特性？" class="headerlink" title="ES6及以后版本有哪些重要特性？"></a>ES6及以后版本有哪些重要特性？</h3><ol>
<li><p><strong>ES6(ES2015)</strong></p>
<ul>
<li>let&#x2F;const</li>
<li>箭头函数</li>
<li>解构赋值</li>
<li>Promise</li>
<li>Class</li>
<li>Module</li>
<li>Symbol</li>
<li>Set&#x2F;Map</li>
</ul>
</li>
<li><p><strong>ES7(ES2016)</strong></p>
<ul>
<li>Array.prototype.includes()</li>
<li>指数运算符(**)</li>
</ul>
</li>
<li><p><strong>ES8(ES2017)</strong></p>
<ul>
<li>async&#x2F;await</li>
<li>Object.values&#x2F;entries</li>
<li>String padding</li>
</ul>
</li>
<li><p><strong>ES9(ES2018)</strong></p>
<ul>
<li>异步迭代</li>
<li>Rest&#x2F;Spread 属性</li>
<li>Promise.finally()</li>
</ul>
</li>
<li><p><strong>ES10(ES2019)</strong></p>
<ul>
<li>Array.prototype.flat()</li>
<li>Object.fromEntries()</li>
</ul>
</li>
</ol>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h3 id="DOM操作的常用方法有哪些？"><a href="#DOM操作的常用方法有哪些？" class="headerlink" title="DOM操作的常用方法有哪些？"></a>DOM操作的常用方法有哪些？</h3><p><strong>节点查找：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>()</span><br></pre></td></tr></table></figure>

<p><strong>节点操作：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createElement</span>()</span><br><span class="line"><span class="title function_">appendChild</span>()</span><br><span class="line"><span class="title function_">removeChild</span>()</span><br><span class="line"><span class="title function_">replaceChild</span>()</span><br><span class="line"><span class="title function_">insertBefore</span>()</span><br></pre></td></tr></table></figure>

<p><strong>属性操作：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAttribute</span>()</span><br><span class="line"><span class="title function_">setAttribute</span>()</span><br><span class="line"><span class="title function_">hasAttribute</span>()</span><br><span class="line"><span class="title function_">removeAttribute</span>()</span><br></pre></td></tr></table></figure>

<h2 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="JavaScript性能优化的方法有哪些？"><a href="#JavaScript性能优化的方法有哪些？" class="headerlink" title="JavaScript性能优化的方法有哪些？"></a>JavaScript性能优化的方法有哪些？</h3><ol>
<li><p><strong>代码层面</strong></p>
<ul>
<li>减少DOM操作</li>
<li>使用事件委托</li>
<li>防抖节流</li>
<li>避免全局变量</li>
<li>使用Web Workers处理大量计算</li>
</ul>
</li>
<li><p><strong>加载优化</strong></p>
<ul>
<li>代码分割</li>
<li>懒加载</li>
<li>预加载</li>
<li>缓存机制</li>
<li>CDN加速</li>
</ul>
</li>
<li><p><strong>执行优化</strong></p>
<ul>
<li>避免内存泄漏</li>
<li>减少回流重绘</li>
<li>使用requestAnimationFrame</li>
<li>优化循环</li>
</ul>
</li>
</ol>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="JavaScript常用的设计模式有哪些？"><a href="#JavaScript常用的设计模式有哪些？" class="headerlink" title="JavaScript常用的设计模式有哪些？"></a>JavaScript常用的设计模式有哪些？</h3><ol>
<li><p><strong>单例模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>观察者模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">addObserver</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>工厂模式</strong></p>
</li>
<li><p><strong>代理模式</strong></p>
</li>
<li><p><strong>策略模式</strong></p>
</li>
<li><p><strong>发布订阅模式</strong></p>
</li>
</ol>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块化的规范有哪些？"><a href="#模块化的规范有哪些？" class="headerlink" title="模块化的规范有哪些？"></a>模块化的规范有哪些？</h3><ol>
<li><p><strong>CommonJS</strong></p>
<ul>
<li>Node.js采用</li>
<li>require&#x2F;module.exports</li>
<li>同步加载</li>
</ul>
</li>
<li><p><strong>AMD</strong></p>
<ul>
<li>RequireJS实现</li>
<li>define&#x2F;require</li>
<li>异步加载</li>
</ul>
</li>
<li><p><strong>ES6 Module</strong></p>
<ul>
<li>import&#x2F;export</li>
<li>静态分析</li>
<li>树摇优化</li>
</ul>
</li>
</ol>
<h2 id="浏览器存储"><a href="#浏览器存储" class="headerlink" title="浏览器存储"></a>浏览器存储</h2><h3 id="浏览器存储方式有哪些？"><a href="#浏览器存储方式有哪些？" class="headerlink" title="浏览器存储方式有哪些？"></a>浏览器存储方式有哪些？</h3><ol>
<li><p><strong>Cookie</strong></p>
<ul>
<li>大小限制4KB</li>
<li>随HTTP请求发送</li>
<li>可设置过期时间</li>
</ul>
</li>
<li><p><strong>localStorage</strong></p>
<ul>
<li>永久存储</li>
<li>大小一般为5MB</li>
<li>不随请求发送</li>
</ul>
</li>
<li><p><strong>sessionStorage</strong></p>
<ul>
<li>会话期间存储</li>
<li>标签页隔离</li>
<li>大小一般为5MB</li>
</ul>
</li>
<li><p><strong>IndexedDB</strong></p>
<ul>
<li>键值对存储</li>
<li>支持索引</li>
<li>异步操作</li>
<li>支持事务</li>
</ul>
</li>
</ol>
<p>原文链接：<a href="https://blog.csdn.net/weixin_43106777/article/details/96842011">https://blog.csdn.net/weixin_43106777&#x2F;article&#x2F;details&#x2F;96842011</a> </p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5 基础</title>
    <url>/blog.github.io/2025/02/24/%E7%AC%AC%E4%B8%89%E7%AF%87%EF%BC%9AHTML5%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="HTML5-基础"><a href="#HTML5-基础" class="headerlink" title="HTML5 基础"></a>HTML5 基础</h1><h2 id="网页请求过程"><a href="#网页请求过程" class="headerlink" title="网页请求过程"></a>网页请求过程</h2><h3 id="请描述一个网页从开始请求到最终显示的完整过程？"><a href="#请描述一个网页从开始请求到最终显示的完整过程？" class="headerlink" title="请描述一个网页从开始请求到最终显示的完整过程？"></a>请描述一个网页从开始请求到最终显示的完整过程？</h3><p>一个网页从请求到最终显示的完整过程一般可分为如下7个步骤：</p>
<ol>
<li>在浏览器中输入网址</li>
<li>发送至DNS服务器并获得域名对应的web服务器的IP地址</li>
<li>与web服务器建立TCP连接</li>
<li>浏览器向web服务器的IP地址发送相应的HTTP请求</li>
<li>web服务器响应请求并返回指定URL的数据，或错误信息，如果设定重定向，则重定向到新的URL地址</li>
<li>浏览器下载数据后解析HTML源文件，解析过程中实现对页面的排版，解析完成后再浏览器中显示基础页面</li>
<li>分析页面中的超链接并显示在当前页面，重复以上过程直至无超链接需要发送，完成全部显示</li>
</ol>
<h2 id="HTML5-基础-1"><a href="#HTML5-基础-1" class="headerlink" title="HTML5 基础"></a>HTML5 基础</h2><h3 id="什么是-HTML5"><a href="#什么是-HTML5" class="headerlink" title="什么是 HTML5?"></a>什么是 HTML5?</h3><p>HTML5是HTML（超文本标记语言）的最新版本。它是一种为万维网构建和显示内容的语言，万维网是互联网的核心技术。</p>
<p>WHATWG（Web超文本应用技术工作组）另一次W3C个人聚会认为，W3C没有认真考虑当前方言的现实改进需求，它已经开始处理HTML-HTML5的新确定。因此，HTML5是HTML 4.01和XHTML 1.0的另一种改编，它集中于Web应用程序设计者的必要性上，并且还倾向于在当前细节中发现的问题。</p>
<p>具体而言，HTML5包含许多新的句法特征。</p>
<h3 id="什么是-？是否需要在HTML5中使用？"><a href="#什么是-？是否需要在HTML5中使用？" class="headerlink" title="什么是 &lt;!DOCTYPE&gt;？是否需要在HTML5中使用？"></a>什么是 <code>&lt;!DOCTYPE&gt;</code>？是否需要在HTML5中使用？</h3><p><code>&lt;!DOCTYPE&gt;</code>声明该文档类型是由什么版本的html编写的。例如<code>&lt;!DOCTYPE html&gt;</code>是html5独特的文件开头，<code>&lt;!DOCTYPE&gt;</code>标记没有结束标记，它不区分大小写。</p>
<p><code>&lt;!DOCTYPE&gt;</code>声明必须是HTML5文档中的第一行，在标记之前。如HTML 4.01，<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code>，全部<code>&lt;!DOCTYPE&gt;</code>声明需要引用文档类型定义（DTD），因为HTML 4.01是基于标准通用标记语言（SGML）的。而HTML5并不基于SGML，因此不需要对文档类型定义（DTD）的引用。</p>
<h3 id="DOCTYPE作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#DOCTYPE作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="DOCTYPE作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>DOCTYPE作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><p>DOCTYPE作用?：</p>
<ul>
<li><p><code>&lt;!DOCTYPE&gt;</code>声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。</p>
</li>
<li><p><code>&lt;!DOCTYPE&gt;</code>声明必须在 HTML 文档的第一行，这并不是一个 HTML 标签。<br>严格模式与混杂模式如何区分？</p>
</li>
<li><p>严格模式：标准模式，浏览器按照W3C标准解析代码</p>
</li>
<li><p>混杂模式：怪异模式&#x2F;兼容模式，浏览器按照自己的方式解析代码</p>
</li>
<li><p>如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式）</p>
</li>
<li><p>包含过渡 DTD 和 URI 的 DOCTYPE ，以严格模式呈现；但有过渡 DTD 而没有 URI （统一资源标识符）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式）</p>
</li>
<li><p>DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）</p>
</li>
<li><p>HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）</p>
</li>
</ul>
<p>严格模式和混杂模式的区别示例：</p>
<ul>
<li>在严格模式下，盒模型为W3C标准盒模型，盒的大小为内容的宽度+内边距+边框+外边距。在混杂模式下，盒模型为IE盒模型，盒的大小为内容的宽度+内边距+边框+外边距。</li>
<li>在严格模式下，给span等行内元素设置width和height都不会生效，而在混杂模式下，则会生效。</li>
<li>在严格模式下，一个元素的高度是由包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。</li>
</ul>
<h3 id="HTML5有哪些的新特性？"><a href="#HTML5有哪些的新特性？" class="headerlink" title="HTML5有哪些的新特性？"></a>HTML5有哪些的新特性？</h3><ul>
<li>绘图canvas</li>
<li>拖放（Drag和drop）</li>
<li>用于媒介回放的video和audio</li>
<li>本地存储localStorage和sessionStorage</li>
<li>语义化元素（header、footer、nav、section、article）</li>
<li>表单控件（date、time、url、search、email、calendar）</li>
<li>控件元素（webworker、websockt、Geolocation）</li>
</ul>
<h3 id="HTML5兼容IE低版本"><a href="#HTML5兼容IE低版本" class="headerlink" title="HTML5兼容IE低版本"></a>HTML5兼容IE低版本</h3><p>HTML5提出的新的元素不被IE6-8识别，这些新元素不能作为父节点包裹子元素，并且不能应用CSS样式。针对IE浏览器html5shiv 是比较好的解决方案。</p>
<p>注：html5shiv.js 引用代码必须放在 <head> 元素中，因为 IE 浏览器在解析 HTML5 新元素时需要先加载该文件。</p>
<h2 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h2><h3 id="简述一下你对HTML语义化的理解？"><a href="#简述一下你对HTML语义化的理解？" class="headerlink" title="简述一下你对HTML语义化的理解？"></a>简述一下你对HTML语义化的理解？</h3><ul>
<li>用正确的标签做正确的事情</li>
<li>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析</li>
<li>即使在没有样式css情况下也以一种文档格式显示，并且是容易阅读的</li>
<li>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO</li>
<li>使于都源代码的人对网站更容易将网站分块，便于阅读维护理解。</li>
</ul>
<h2 id="HTML-和-XHTML-的区别"><a href="#HTML-和-XHTML-的区别" class="headerlink" title="HTML 和 XHTML 的区别"></a>HTML 和 XHTML 的区别</h2><ul>
<li>XHTML中的标签都必须被正确地嵌套,HTML中的某些标签可以彼此不正确的嵌套。</li>
<li>XHTML中的所有标签必须要关闭。</li>
<li>XHTML中规范定义：标签名和属性对大小写敏感,所有XHTML标签名必须用小写字母。</li>
<li>XHTML文档必须拥有根元素。</li>
<li>XHTML中标签的属性值要使用双引号”。</li>
</ul>
<h2 id="页面导入样式"><a href="#页面导入样式" class="headerlink" title="页面导入样式"></a>页面导入样式</h2><h3 id="使用link和-import有什么区别？"><a href="#使用link和-import有什么区别？" class="headerlink" title="使用link和@import有什么区别？"></a>使用link和@import有什么区别？</h3><ul>
<li>link属于XHTML标签，而@import是css提供的</li>
<li>页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载</li>
<li>@import只在IE5以上才能识别，而link是XHTML标签，无兼容问题</li>
<li>link方式的样式的权重高于@import的权重。</li>
</ul>
<h2 id="HTML5地理定位"><a href="#HTML5地理定位" class="headerlink" title="HTML5地理定位"></a>HTML5地理定位</h2><h3 id="HTML5地理定位是什么？如何使用？"><a href="#HTML5地理定位是什么？如何使用？" class="headerlink" title="HTML5地理定位是什么？如何使用？"></a>HTML5地理定位是什么？如何使用？</h3><p>HTML5 地理定位用于定位用户的位置<br>HTML5 地理定位API用于获取用户的地理位置。<br>由于这会侵犯用户隐私，除非用户批准，否则该位置不可用。<br>使用 getCurrentPosition() 方法获取用户的位置。</p>
<h2 id="HTML全局属性"><a href="#HTML全局属性" class="headerlink" title="HTML全局属性"></a>HTML全局属性</h2><h3 id="HTML全局属性-global-attribute-有哪些（包含H5）？"><a href="#HTML全局属性-global-attribute-有哪些（包含H5）？" class="headerlink" title="HTML全局属性(global attribute)有哪些（包含H5）？"></a>HTML全局属性(global attribute)有哪些（包含H5）？</h3><ul>
<li><code>accesskey</code>: 设置快捷键</li>
<li><code>class</code>: 为元素设置类标识</li>
<li><code>contenteditable</code>: 指定元素内容是否可编辑</li>
<li><code>contextmenu</code>: 自定义鼠标右键弹出上下文菜单内容（仅firefox支持）</li>
<li><code>data-*</code>: 为元素增加自定义属性</li>
<li><code>dir</code>: 设置元素文本方向（默认ltr；rtl）</li>
<li><code>draggable</code>: 设置元素是否可拖拽</li>
<li><code>dropzone</code>: 设置元素拖放类型（copy|move|link,H5新属性，主流均不支持）</li>
<li><code>hidden</code>: 规定元素仍未或不在相关</li>
<li><code>id</code>: 元素id，文档内唯一</li>
<li><code>lang</code>: 元素内容的语言</li>
<li><code>spellcheck</code>: 是否启动拼写和语法检查</li>
<li><code>style</code>: 行内css样式</li>
<li><code>tabindex</code>: 设置元素可以获得焦点，通过tab导航</li>
<li><code>title</code>: 规定元素有关的额外信息</li>
<li><code>translate</code>: 元素和子孙节点内容是否需要本地化（均不支持）</li>
</ul>
<h2 id="a标签超链接target属性"><a href="#a标签超链接target属性" class="headerlink" title="a标签超链接target属性"></a>a标签超链接target属性</h2><h3 id="简述a标签超链接target属性的取值和作用？"><a href="#简述a标签超链接target属性的取值和作用？" class="headerlink" title="简述a标签超链接target属性的取值和作用？"></a>简述a标签超链接target属性的取值和作用？</h3><p>a 标签的 target 属性一共有四个值：</p>
<ul>
<li><code>_self</code> ：默认属性。在当前窗口或者框架中加载目标文档。</li>
<li><code>_blank</code> ：打开新的窗口或者新的标签页。在使用这个属性时，最好添加 <code>rel=&quot;noopener norefferrer&quot;</code> 属性，防止打开的新窗口对原窗口进行篡改。防止 <code>window.opener</code> API 的恶意行为。</li>
<li><code>_parent</code> ：在 frame 或者 iframe 中使用较多。在父级框架中载入目标文档，当 a 标签本身在顶层时，与 <code>_self</code> 相同。</li>
<li><code>_top</code> ：在 frame 或者 iframe 中使用较多。直接在顶层的框架中载入目标文档，加载整个窗口</li>
</ul>
<h2 id="浏览器内多个标签页之间的通信方式"><a href="#浏览器内多个标签页之间的通信方式" class="headerlink" title="浏览器内多个标签页之间的通信方式"></a>浏览器内多个标签页之间的通信方式</h2><h3 id="浏览器内多个标签页之间的通信方式有哪些？"><a href="#浏览器内多个标签页之间的通信方式有哪些？" class="headerlink" title="浏览器内多个标签页之间的通信方式有哪些？"></a>浏览器内多个标签页之间的通信方式有哪些？</h3><p>即在浏览器中，两个不同页面（A页面的window ！&#x3D; B页面的window）网页之间的消息传递。</p>
<ul>
<li>WebSocket （可跨域）</li>
<li>postMessage（可跨域）</li>
<li>Worker之SharedWorker</li>
<li>Server-Sent Events</li>
<li>localStorage</li>
<li>BroadcastChannel</li>
<li>Cookies</li>
</ul>
<h2 id="viewport常见设置"><a href="#viewport常见设置" class="headerlink" title="viewport常见设置"></a>viewport常见设置</h2><h3 id="viewport常见设置都有哪些？"><a href="#viewport常见设置都有哪些？" class="headerlink" title="viewport常见设置都有哪些？"></a>viewport常见设置都有哪些？</h3><p>在移动端做开发时，必须要搞清楚 viewport 这一设置。</p>
<ul>
<li><code>width</code> ：设置 layout viewport 的宽度，为一个正整数，或字符串”width-device”</li>
<li><code>initial-scale</code> ：设置页面的初始缩放值，为一个数字，可以带小数</li>
<li><code>minimum-scale</code> ：允许用户的最小缩放值，为一个数字，可以带小数</li>
<li><code>maximum-scale</code> ：允许用户的最大缩放值，为一个数字，可以带小数</li>
<li><code>height</code> ：设置 layout viewport 的高度，这个属性对我们并不重要，很少使用</li>
<li><code>user-scalable</code> ：是否允许用户进行缩放，值为”no”或”yes”， no 代表不允许，yes 代表允许</li>
</ul>
<h2 id="常见的浏览器内核"><a href="#常见的浏览器内核" class="headerlink" title="常见的浏览器内核"></a>常见的浏览器内核</h2><h3 id="常见的浏览器内核都有哪些？并介绍下你对内核的理解"><a href="#常见的浏览器内核都有哪些？并介绍下你对内核的理解" class="headerlink" title="常见的浏览器内核都有哪些？并介绍下你对内核的理解"></a>常见的浏览器内核都有哪些？并介绍下你对内核的理解</h3><p>常见浏览器所用内核：</p>
<ul>
<li>IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</li>
<li>Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</li>
<li>Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</li>
<li>Safari 浏览器内核：Webkit 内核；</li>
<li>Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</li>
<li>360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</li>
<li>搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</li>
<li>百度浏览器、世界之窗内核：IE 内核；</li>
<li>2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</li>
<li>UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说是基于火狐内核。</li>
</ul>
<h3 id="内核理解"><a href="#内核理解" class="headerlink" title="内核理解"></a>内核理解</h3><p>主要分成两部分：渲染引擎和 JS 引擎。</p>
<ul>
<li>渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。</li>
<li>JS 引擎：解析和执行 javascript 来实现网页的动态效果。</li>
</ul>
<h2 id="置换元素和非置换元素"><a href="#置换元素和非置换元素" class="headerlink" title="置换元素和非置换元素"></a>置换元素和非置换元素</h2><h3 id="说说你对html中的置换元素和非置换元素的理解？"><a href="#说说你对html中的置换元素和非置换元素的理解？" class="headerlink" title="说说你对html中的置换元素和非置换元素的理解？"></a>说说你对html中的置换元素和非置换元素的理解？</h3><p><strong>置换元素（Replaced Element）</strong></p>
<p>一个内容不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。<br>例如：img会在没有css属性前，会根据图片的实际宽高来显示。</p>
<p><strong>非置换元素（non-Replaced Element）</strong></p>
<p>就是除了 img、input、textarea、select、object 等置换元素以外的元素。内容直接展示给浏览器。例如标签，标签里的内容会被浏览器直接显示给用户。</p>
<h2 id="js放在html的-body-和-head-有什么区别？"><a href="#js放在html的-body-和-head-有什么区别？" class="headerlink" title="js放在html的&lt; body &gt;和&lt; head &gt;有什么区别？"></a>js放在html的&lt; body &gt;和&lt; head &gt;有什么区别？</h2><p>将 JavaScript 代码放在 HTML 文档的 head 和 body 部分的主要区别在于页面加载和渲染的行为。</p>
<p>放在 head&gt;中<br>当 JavaScript 文件放在 head 部分时，浏览器在解析 HTML 文档之前会先加载和执行这些 JavaScript 文件。如果不使用 async 或 defer 属性，浏览器会阻塞 DOM 树的构建，直到脚本加载和执行完毕。这意味着，如果 head 中包含多个 JavaScript 文件或者这些文件较大，页面的首次渲染和用户看到内容的时间会显著延迟，可能导致长时间的白屏现象。</p>
<p>放在 body 中<br>将 JavaScript 文件放在文档的 body部分，通常是在 &#x2F;body 标签之前，可以避免阻塞 DOM 的解析。浏览器会先解析整个 HTML 文档，然后再加载和执行 JavaScript 文件。这种做法可以加快页面的渲染速度，使用户更快看到页面内容。对于那些需要在 DOM 加载之后执行的功能，放在 body 中更为合适。</p>
<p>使用 async 或 defer<br>async: JavaScript 文件会异步加载，一旦加载完成，就会立即执行，这可能会影响 DOM 的解析顺序。<br>defer: JavaScript 文件会异步加载，但会在 DOM 解析完成后按照它们在文档中出现的顺序执行，这样可以避免阻塞 DOM 的解析过程。<br>因此，根据需要执行的 JavaScript 功能，可以选择将脚本放在不同的位置或使用相应的属性来优化页面加载性能。</p>
<h2 id="img-的-title-和-alt-有什么区别"><a href="#img-的-title-和-alt-有什么区别" class="headerlink" title="&lt; img &gt;的 title 和 alt 有什么区别?"></a>&lt; img &gt;的 title 和 alt 有什么区别?</h2><ul>
<li><code>alt</code> ： 图片加载失败时，显示在网页上的替代文字</li>
<li><code>title</code> ：鼠标悬浮在图片上显示的文字</li>
</ul>
<p>注 : alt是必要属性，title非必要</p>
<h2 id="SVG-与-Canvas的区别"><a href="#SVG-与-Canvas的区别" class="headerlink" title="SVG 与 Canvas的区别"></a>SVG 与 Canvas的区别</h2><p>SVG 可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言（XML）， 用于描述二维矢量图形的一种图形格式。</p>
<table>
<thead>
<tr>
<th>Canvas</th>
<th>SVG</th>
</tr>
</thead>
<tbody><tr>
<td>依赖分辨率</td>
<td>不依赖分辨率</td>
</tr>
<tr>
<td>不支持事件处理器</td>
<td>支持事件处理器</td>
</tr>
<tr>
<td>弱的文本渲染能力</td>
<td>最适合带有大型渲染区域的应用程序（比如谷歌地图）</td>
</tr>
<tr>
<td>能够以 .png 或 .jpg 格式保存结果图像</td>
<td>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</td>
</tr>
<tr>
<td>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</td>
<td>不适合游戏应用</td>
</tr>
</tbody></table>
<h2 id="行内元素与块级元素"><a href="#行内元素与块级元素" class="headerlink" title="行内元素与块级元素"></a>行内元素与块级元素</h2><h3 id="行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？"><a href="#行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？" class="headerlink" title="行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？"></a>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</h3><p><strong>行内元素</strong>有：a b span img input select strong</p>
<p><strong>块级元素</strong>有：div ul ol li dl dt dd h1~h6 p</p>
<p><strong>空元素</strong>：br hr img input link meta</p>
<ul>
<li>行内元素不可以设置宽高,margin仅设置左右方向有效，不独占一行</li>
<li>块级元素可以设置宽高，独占一行</li>
</ul>
<h2 id="async-和-defer-的作用是什么？有什么区别？"><a href="#async-和-defer-的作用是什么？有什么区别？" class="headerlink" title="async 和 defer 的作用是什么？有什么区别？"></a>async 和 defer 的作用是什么？有什么区别？</h2><ul>
<li>脚本没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</li>
<li><code>defer</code> 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时， HTML 并未停止解析，这两个过程是并行的。当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。</li>
<li><code>async</code> 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，也就是说它的执行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。</li>
</ul>
<h2 id="常⽤的meta标签"><a href="#常⽤的meta标签" class="headerlink" title="常⽤的meta标签"></a>常⽤的meta标签</h2><p>meta标签由name和content属性定义，用来描述一个网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。</p>
<ul>
<li><p><code>charset</code>: 文档的编码类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>keywords</code>: 页面关键词</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>description</code>: 页面描述</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;描述内容&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>refresh</code>: 页面重定向和刷新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;url=&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>viewport</code>: 适配移动端，视口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width-device-width, initial-scale=1, maximum-scale=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>content 参数有以下几种：</p>
<ul>
<li>width viewport ：宽度(数值&#x2F;device-width)</li>
<li>height viewport ：高度(数值&#x2F;device-height)</li>
<li>initial-scale ：初始缩放比例</li>
<li>maximum-scale ：最大缩放比例</li>
<li>minimum-scale ：最小缩放比例</li>
<li>user-scalable ：是否允许用户缩放(yes&#x2F;no）</li>
</ul>
</li>
<li><p>搜索引擎索引方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>content 参数有以下几种：</p>
<ul>
<li>all：文件将被检索，且页面上的链接可以被查询</li>
<li>none：文件将不被检索，且页面上的链接不可以被查询</li>
<li>index：文件将被检索</li>
<li>follow：页面上的链接可以被查询</li>
<li>noindex：文件将不被检索</li>
<li>nofollow：页面上的链接不可以被查询</li>
</ul>
</li>
</ul>
<h2 id="浏览器页面的三层构成"><a href="#浏览器页面的三层构成" class="headerlink" title="浏览器页面的三层构成"></a>浏览器页面的三层构成</h2><h3 id="浏览器页面有哪三层构成，分别是什么，作用是什么"><a href="#浏览器页面有哪三层构成，分别是什么，作用是什么" class="headerlink" title="浏览器页面有哪三层构成，分别是什么，作用是什么?"></a>浏览器页面有哪三层构成，分别是什么，作用是什么?</h3><p>构成： 结构层（HTML）、表示层（CSS）、行为层（JavaScript）</p>
<p>作用：HTML实现页面结构、CSS实现页面样式、JS实现业务逻辑功能</p>
<h2 id="HTML5的优缺点"><a href="#HTML5的优缺点" class="headerlink" title="HTML5的优缺点"></a>HTML5的优缺点</h2><h3 id="HTML5的优缺点？"><a href="#HTML5的优缺点？" class="headerlink" title="HTML5的优缺点？"></a>HTML5的优缺点？</h3><p><strong>优点：</strong></p>
<ul>
<li>网络标准统一</li>
<li>多设备、跨平台</li>
<li>即时更新</li>
<li>提高可用性和改进用户体验</li>
<li>被大量应用于移动应用程序和游戏</li>
<li>还有html5的一些新特性等等</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>安全性： 像之前 Firefox4 的 web socket 和透明代理的实现存在严重的安全问题，同时 web storage、web socket 这样的功能很容易被黑客利用，来盗取用户的信息和资料</li>
<li>完善性： 许多特性各浏览器的支持程度也不一样</li>
<li>技术门槛： HTML5 简化开发者工作的同时代表了有许多新的属性和 API 需要开发者学习，像 web worker、web socket、web storage 等新特性，后台甚至浏览器原理的知识</li>
<li>性能： 某些平台上的引擎问题导致HTML5性能低下</li>
<li>浏览器兼容性： IE9一下浏览器几乎全军覆没</li>
</ul>
<h2 id="对-WEB-标准以及-W3C-的理解与认识"><a href="#对-WEB-标准以及-W3C-的理解与认识" class="headerlink" title="对 WEB 标准以及 W3C 的理解与认识"></a>对 WEB 标准以及 W3C 的理解与认识</h2><ul>
<li>标签闭合、标签小写、不乱嵌套、提高搜索几率利于SEO、使用外链CSS和JS脚本、结构行为表现得分离、文件下载与页面速度更快、内容能被更多的用户访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维护、版本迭代方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。</li>
</ul>
<h2 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h2><h3 id="什么是-WebGL-它有什么优点"><a href="#什么是-WebGL-它有什么优点" class="headerlink" title="什么是 WebGL,它有什么优点?"></a>什么是 WebGL,它有什么优点?</h3><p>WebGL（全写 Web Graphics Library ）是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加 OpenGL ES 2.0 的一个 JavaScript 绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示 3D 场景和模型了，还能创建复杂的导航和数据视觉化。显然，WebGL 技术标准免去了开发网页专用渲染插件的麻烦，可被用于创建具有复杂 3D 结构的网站页面，甚至可以用来设计 3D 网页游戏等等。</p>
<p>WebGL 完美地解决了现有的 Web 交互式三维动画的两个问题：</p>
<ul>
<li>第一，它通过 HTML 脚本本身实现 Web 交互式三维动画的制作，无需任何浏览器插件支持 ;</li>
<li>第二，它利用底层的图形硬件加速功能进行的图形渲染，是通过统一的、标准的、跨平台的 OpenGL 接口实现的。 通俗说 WebGL 中 canvas 绘图中的 3D 版本。因为原生的 WebGL 很复杂，我们经常会使用一些三方的库，如 three.js 等，这些库多数用于 HTML5 游戏开发。</li>
</ul>
<h2 id="cookies，sessionStorage-和-localStorage-的区别"><a href="#cookies，sessionStorage-和-localStorage-的区别" class="headerlink" title="cookies，sessionStorage 和 localStorage 的区别"></a>cookies，sessionStorage 和 localStorage 的区别</h2><h3 id="简述-cookies，sessionStorage-和-localStorage-的区别"><a href="#简述-cookies，sessionStorage-和-localStorage-的区别" class="headerlink" title="简述 cookies，sessionStorage 和 localStorage 的区别?"></a>简述 cookies，sessionStorage 和 localStorage 的区别?</h3><p>sessionStorage 和 localStorage 是 HTML5 Web Storage API 提供的，可以方便的在 web 请求之间保存数据。有了本地数据，就可以避免数据在浏览器和服务器间不必要地来回传递。sessionStorage、 localStorage 、 cookie 都是在浏览器端存储的数据，其中 sessionStorage 的概念很特别，引入了一个”浏览器窗口”的概念。sessionStorage 是在同源的同窗口（或 tab ）中，始终存在的数据。也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。关闭窗口后， sessionStorage 即被销毁。同时”独立”打开的不同窗口，即使是同一页面， sessionStorage 对象也是不同的 cookies 会发送到服务器端。其余两个不会。</p>
<ul>
<li>Cookie 每个域名存储量比较小（各浏览器不同，大致 4K ） 所有域名的存储量有限制（各浏览器不同，大致 4K ） 有个数限制（各浏览器不同） 会随请求发送到服务器 (浪费带宽)</li>
<li>Cookie只在设置了有限时间内有效</li>
<li>LocalStorage 永久存储 单个域名存储量比较大（推荐 5MB ，各浏览器不同） 总体数量无限制</li>
<li>LocalStorage 用于持久化的本地存储，数据永远不会过期，关闭浏览器也不会丢失。</li>
<li>SessionStorage 只在 Session 内有效 存储量更大（推荐没有限制，但是实际上各浏览器也不同）</li>
<li>SessionStorage 同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此 sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储</li>
</ul>
<h2 id="data-属性"><a href="#data-属性" class="headerlink" title="data- 属性"></a>data- 属性</h2><h3 id="data-属性的作用是什么？"><a href="#data-属性的作用是什么？" class="headerlink" title="data- 属性的作用是什么？"></a>data- 属性的作用是什么？</h3><p>data-为 H5 新增的为前端开发者提供自定义的属性，这些属性集可以通过对象的dataset属性获取，不支持该属性的浏览器可以通过getAttribute方法获取，需要注意的是：data-之后的以连字符分割的多个单词组成的属性，获取的时候使用驼峰风格。所有主流浏览器都支持 data-* 属性。 即：当没有合适的属性和元素时，自定义的 data 属性是能够存储页面或 App 的私有的自定义数据。</p>
<h2 id="iframe-的缺点"><a href="#iframe-的缺点" class="headerlink" title="iframe 的缺点"></a>iframe 的缺点</h2><h3 id="iframe-有那些缺点？"><a href="#iframe-有那些缺点？" class="headerlink" title="iframe 有那些缺点？"></a>iframe 有那些缺点？</h3><ul>
<li>iframe会阻塞主页面的onload事件</li>
<li>搜索引擎的检索程序无法解读这种页面，不易于SEO</li>
<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li>
</ul>
<p>注：若使用iframe，最好通过JS动态给iframe添加src属性值</p>
<h2 id="src-与-href-的区别"><a href="#src-与-href-的区别" class="headerlink" title="src 与 href 的区别"></a>src 与 href 的区别</h2><h3 id="简述一下-src-与-href-的区别？"><a href="#简述一下-src-与-href-的区别？" class="headerlink" title="简述一下 src 与 href 的区别？"></a>简述一下 src 与 href 的区别？</h3><p>src:当浏览器遇到 src 属性时，会暂停解析 HTML 并开始下载资源。资源下载完成后，浏览器会立即执行或显示该资源。<br>href：用于指定链接的目标位置，通常用于引用外部资源，但不会替换当前元素的内容。浏览器会异步解析 href 属性，即在解析 HTML 的同时下载资源，不会阻塞 HTML 的解析过程。</p>
<h2 id="WebSocket-与消息推送"><a href="#WebSocket-与消息推送" class="headerlink" title="WebSocket 与消息推送"></a>WebSocket 与消息推送</h2><h3 id="WebSocket-与消息推送？"><a href="#WebSocket-与消息推送？" class="headerlink" title="WebSocket 与消息推送？"></a>WebSocket 与消息推送？</h3><p>B&#x2F;S 架构的系统多使用 HTTP 协议</p>
<p><strong>HTTP协议：</strong></p>
<ul>
<li>连接无状态</li>
<li>数据明文传输</li>
<li>端口默认为80,底层通信还是使用 Socket 完成</li>
</ul>
<p>HTTP 协议决定了服务器与客户端之间的连接方式，无法直接实现消息推送,一些变相的解决办法：</p>
<p><strong>双向通信与消息推送</strong></p>
<ul>
<li><p>轮询： 客户端定时向服务器发送 Ajax 请求，服务器接到请求后马上返回响应信息并关闭连接。</p>
<p>优点：后端程序编写比较容易<br>缺点：请求中有大半无用，浪费带宽和服务器资源<br>实例：适用于小型应用</p>
</li>
<li><p>长轮询： 客户端向服务器发送 Ajax 请求，服务器接到请求后 hold 住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。</p>
<p>优点：在无消息的情况下不会频繁的请求，耗费资源小<br>缺点：服务器 hold 连接会消耗资源，返回数据顺序无保证，难于管理维护。Comet 异步的 ashx<br>实例：WebQQ、Hi 网页版、Facebook IM。</p>
</li>
<li><p>长连接： 在页面里嵌入一个隐蔵 iframe，将这个隐蔵 iframe 的 src 属性设为对一个长连接的请求或是采用 xhr 请求，服务器端就能源源不断地往客户端输入数据。</p>
<p>优点：消息即时到达，不发无用请求；管理起来也相对便。<br>缺点：服务器维护一个长连接会增加开销。<br>实例：Gmail 聊天</p>
</li>
<li><p>Flash Socket： 在页面中内嵌入一个使用了 Socket 类的 Flash 程序 JavaScript 通过调用此 Flash 程序提供的 Socket 接口与服务器端的 Socket 接口进行通信， JavaScript 在收到服务器端传送的信息后控制页面的显示。</p>
<p>优点：实现真正的即时通信，而不是伪即时<br>缺点：客户端必须安装 Flash 插件；非 HTTP 协议，无法自动穿越防火墙<br>实例：网络互动游戏</p>
</li>
<li><p>Websocket： WebSocket 是 HTML5 开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。</p>
<p>优点：事件驱动、异步、使用ws或者wss协议的客户端socket、能实现真正意义上的推送功能<br>缺点：少部分浏览器不支持，浏览器支持的程度与方式有区别。</p>
</li>
</ul>
<p>原文链接：<a href="https://blog.csdn.net/weixin_43106777/article/details/96842011">https://blog.csdn.net/weixin_43106777&#x2F;article&#x2F;details&#x2F;96842011</a></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/blog.github.io/2025/02/24/%E7%AC%AC%E5%9B%9B%E7%AF%87%EF%BC%9ACSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="CSS大全"><a href="#CSS大全" class="headerlink" title="CSS大全"></a>CSS大全</h1><h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="选择器的优先级是什么？"><a href="#选择器的优先级是什么？" class="headerlink" title="选择器的优先级是什么？"></a>选择器的优先级是什么？</h3><p>选择器优先级从高到低排序:</p>
<ol>
<li>!important</li>
<li>内联样式(style)</li>
<li>ID选择器(#id)</li>
<li>类选择器(.class)</li>
<li>通配符(*)</li>
<li>修饰符</li>
</ol>
<h3 id="CSS3有哪些新特性？"><a href="#CSS3有哪些新特性？" class="headerlink" title="CSS3有哪些新特性？"></a>CSS3有哪些新特性？</h3><p>CSS3引入了许多新特性:</p>
<ol>
<li>新的选择器</li>
<li>盒模型的改进</li>
<li>动画和过渡效果</li>
<li>渐变效果</li>
<li>阴影效果</li>
</ol>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><h3 id="Padding和Margin有什么区别？"><a href="#Padding和Margin有什么区别？" class="headerlink" title="Padding和Margin有什么区别？"></a>Padding和Margin有什么区别？</h3><ul>
<li><strong>Padding(内边距)</strong>: 是盒子模型中元素与盒子之间的边距</li>
<li><strong>Margin(外边距)</strong>: 是元素和元素之间的边距，也叫外边距</li>
</ul>
<h3 id="解释CSS的盒子模型"><a href="#解释CSS的盒子模型" class="headerlink" title="解释CSS的盒子模型"></a>解释CSS的盒子模型</h3><p>盒模型包含以下部分:</p>
<ol>
<li><p><strong>内容(content)</strong></p>
<ul>
<li>由width和height属性定义</li>
<li>由width和height属性定义</li>
</ul>
</li>
<li><p><strong>内边距(padding)</strong></p>
<ul>
<li>由padding属性定义</li>
<li>影响元素尺寸但可选</li>
</ul>
</li>
<li><p><strong>边框(border)</strong></p>
<ul>
<li>由border属性定义</li>
<li>围绕元素的线</li>
<li>border宽度影响元素尺寸</li>
</ul>
</li>
<li><p><strong>外边距(margin)</strong></p>
<ul>
<li>由margin属性定义</li>
<li>外边距可选不影响元素本身尺寸</li>
<li>但影响与其他元素的距离</li>
</ul>
</li>
</ol>
<h2 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h2><h3 id="CSS有哪些引入方式？各有什么特点？"><a href="#CSS有哪些引入方式？各有什么特点？" class="headerlink" title="CSS有哪些引入方式？各有什么特点？"></a>CSS有哪些引入方式？各有什么特点？</h3><p>CSS有三种主要的引入方式:</p>
<ol>
<li><p><strong>内联样式</strong></p>
<ul>
<li>在元素标签体中使用style属性添加样式</li>
</ul>
</li>
<li><p><strong>内部样式</strong></p>
<ul>
<li>在html文件中使用style标签编写样式</li>
</ul>
</li>
<li><p><strong>外部样式</strong></p>
<ul>
<li>在css文件中编写样式</li>
<li>使用link或@import导入</li>
</ul>
</li>
</ol>
<h3 id="link和-import的区别"><a href="#link和-import的区别" class="headerlink" title="link和@import的区别"></a>link和@import的区别</h3><table>
<thead>
<tr>
<th>特性</th>
<th>link</th>
<th>@import</th>
</tr>
</thead>
<tbody><tr>
<td>加载顺序</td>
<td>与页面同时加载</td>
<td>页面加载完才加载</td>
</tr>
<tr>
<td>兼容性</td>
<td>所有浏览器支持</td>
<td>CSS2.1提出,低版本可能不支持</td>
</tr>
<tr>
<td>功能范围</td>
<td>可定义RSS等其他事务</td>
<td>只能加载CSS</td>
</tr>
<tr>
<td>DOM操作</td>
<td>可通过JS操作DOM</td>
<td>不能通过JS操作</td>
</tr>
</tbody></table>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="CSS有哪些选择器？"><a href="#CSS有哪些选择器？" class="headerlink" title="CSS有哪些选择器？"></a>CSS有哪些选择器？</h3><ol>
<li><p><strong>基础选择器</strong></p>
<ul>
<li>id选择器(#)</li>
<li>class选择器(.)</li>
<li>元素选择器(标签名)</li>
<li>后代选择器(空格)</li>
<li>属性选择器([属性名])</li>
<li>子元素选择器(&gt;)</li>
<li>通配符选择器(*)</li>
</ul>
</li>
<li><p><strong>CSS3新增选择器</strong></p>
<ul>
<li>结构伪类选择器(:first-child)</li>
<li>否定伪类选择器(:not())</li>
<li>伪元素选择器(::before)</li>
</ul>
</li>
</ol>
<h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><h3 id="CSS如何实现居中？"><a href="#CSS如何实现居中？" class="headerlink" title="CSS如何实现居中？"></a>CSS如何实现居中？</h3><ol>
<li><p><strong>行内元素居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>块级元素居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>绝对定位元素居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="comment">/* 将元素的左上角移动至中心点,再根据块元素宽高来移动至中心点居中 */</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h2><h3 id="使用CSS预处理器有什么优缺点？"><a href="#使用CSS预处理器有什么优缺点？" class="headerlink" title="使用CSS预处理器有什么优缺点？"></a>使用CSS预处理器有什么优缺点？</h3><p><strong>优点:</strong></p>
<ol>
<li>支持选择器的嵌套</li>
<li>可定义变量和混合</li>
<li>支持函数和运算</li>
<li>支持导入和模块化</li>
<li>自动处理厂商前缀</li>
</ol>
<p><strong>缺点:</strong></p>
<ol>
<li>需要编译,增加开发复杂性</li>
<li>调试困难</li>
<li>可能产生过度设计</li>
<li>可能产生冗余CSS代码</li>
</ol>
<h2 id="CSS性能优化"><a href="#CSS性能优化" class="headerlink" title="CSS性能优化"></a>CSS性能优化</h2><h3 id="如何写出高效的CSS？"><a href="#如何写出高效的CSS？" class="headerlink" title="如何写出高效的CSS？"></a>如何写出高效的CSS？</h3><p>需要注意以下几点:</p>
<ol>
<li>选择器性能优化</li>
<li>避免冗余代码</li>
<li>合理组织代码结构</li>
<li>使用CSS预处理器</li>
<li>减少HTTP请求</li>
</ol>
<p>原文链接：<a href="https://blog.csdn.net/weixin_43106777/article/details/96842011">https://blog.csdn.net/weixin_43106777&#x2F;article&#x2F;details&#x2F;96842011</a> </p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cursor编辑器的安装与使用</title>
    <url>/blog.github.io/2025/02/11/%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9ACursor%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Cursor是一款革命性的代码编辑器，它基于VSCode构建，并集成了强大的AI辅助功能。通过内置的AI模型，它能够理解开发者的意图，提供智能代码补全、实时代码分析和自动化重构等功能。本文将详细介绍Cursor的安装配置和使用技巧，帮助你提升开发效率。</p>
<h2 id="为什么选择Cursor"><a href="#为什么选择Cursor" class="headerlink" title="为什么选择Cursor"></a>为什么选择Cursor</h2><h3 id="相比传统编辑器的优势"><a href="#相比传统编辑器的优势" class="headerlink" title="相比传统编辑器的优势"></a>相比传统编辑器的优势</h3><ol>
<li>智能理解代码上下文</li>
<li>实时AI代码建议</li>
<li>自然语言交互</li>
<li>强大的代码重构能力</li>
<li>与VSCode完全兼容</li>
</ol>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>个人开发项目</li>
<li>团队协作开发</li>
<li>代码学习和教学</li>
<li>快速原型开发</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul>
<li>Windows 10&#x2F;11 64位</li>
<li>macOS 10.15+</li>
<li>8GB及以上内存</li>
<li>2GB可用存储空间</li>
</ul>
<h3 id="Windows系统安装"><a href="#Windows系统安装" class="headerlink" title="Windows系统安装"></a>Windows系统安装</h3><ol>
<li>访问Cursor官网 <a href="https://cursor.sh/">https://cursor.sh</a></li>
<li>点击”Download for Windows”下载安装包</li>
<li>运行下载的exe文件</li>
<li>按照安装向导完成安装</li>
<li>首次启动时登录或创建账号</li>
</ol>
<h3 id="Mac系统安装"><a href="#Mac系统安装" class="headerlink" title="Mac系统安装"></a>Mac系统安装</h3><ol>
<li>访问Cursor官网</li>
<li>下载Mac版本的dmg文件</li>
<li>打开dmg文件，将Cursor拖入Applications文件夹</li>
<li>从启动台或Applications文件夹启动Cursor</li>
<li>完成初始化设置</li>
</ol>
<h3 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h3><ol>
<li>选择主题和配色方案</li>
<li>配置编辑器字体和大小</li>
<li>设置AI功能偏好</li>
<li>导入已有的VSCode配置（可选）</li>
</ol>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="AI代码补全"><a href="#AI代码补全" class="headerlink" title="AI代码补全"></a>AI代码补全</h3><p>Cursor最强大的功能之一是智能代码补全：</p>
<ul>
<li><p><strong>实时补全</strong>：</p>
<ul>
<li>输入时自动显示建议</li>
<li>支持多行代码块补全</li>
<li>基于项目上下文的智能建议</li>
</ul>
</li>
<li><p><strong>快捷键操作</strong>：</p>
<ul>
<li>Tab：接受建议</li>
<li>Ctrl+Space：手动触发补全</li>
<li>Esc：关闭建议窗口</li>
</ul>
</li>
<li><p><strong>补全范围</strong>：</p>
<ul>
<li>变量和函数名</li>
<li>代码片段</li>
<li>完整的函数实现</li>
<li>注释生成</li>
</ul>
</li>
</ul>
<h3 id="AI聊天"><a href="#AI聊天" class="headerlink" title="AI聊天"></a>AI聊天</h3><p>Cursor提供了强大的AI助手功能：</p>
<ul>
<li><p><strong>打开方式</strong>：</p>
<ul>
<li>使用快捷键 Cmd&#x2F;Ctrl + K</li>
<li>右键菜单中选择”Ask AI”</li>
<li>通过命令面板调用</li>
</ul>
</li>
<li><p><strong>常用功能</strong>：</p>
<ul>
<li>代码解释和文档生成</li>
<li>问题诊断和调试建议</li>
<li>最佳实践咨询</li>
<li>算法优化建议</li>
</ul>
</li>
<li><p><strong>使用技巧</strong>：</p>
<ul>
<li>提供清晰的上下文</li>
<li>使用自然语言描述</li>
<li>结合代码片段提问</li>
<li>保存常用对话</li>
</ul>
</li>
</ul>
<h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>Cursor的AI驱动重构功能：</p>
<ul>
<li><p><strong>重构操作</strong>：</p>
<ul>
<li>变量重命名</li>
<li>提取函数&#x2F;方法</li>
<li>优化代码结构</li>
<li>转换代码风格</li>
</ul>
</li>
<li><p><strong>使用方法</strong>：</p>
<ol>
<li>选中需要重构的代码</li>
<li>右键选择”Refactor”</li>
<li>选择重构类型</li>
<li>预览并应用更改</li>
</ol>
</li>
<li><p><strong>最佳实践</strong>：</p>
<ul>
<li>先保存当前更改</li>
<li>重构前进行代码审查</li>
<li>测试重构后的代码</li>
<li>分步骤进行大型重构</li>
</ul>
</li>
</ul>
<h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="自定义提示词"><a href="#自定义提示词" class="headerlink" title="自定义提示词"></a>自定义提示词</h3><p>优化AI交互体验：</p>
<ol>
<li>打开设置(Cmd&#x2F;Ctrl + ,)</li>
<li>找到”AI Settings”</li>
<li>添加自定义提示词模板</li>
<li>设置触发条件和快捷键</li>
</ol>
<h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><p>全面的项目分析功能：</p>
<ul>
<li><p><strong>代码分析</strong>：</p>
<ul>
<li>依赖关系图</li>
<li>代码质量检测</li>
<li>性能瓶颈识别</li>
<li>安全漏洞扫描</li>
</ul>
</li>
<li><p><strong>项目管理</strong>：</p>
<ul>
<li>文件结构优化</li>
<li>重复代码检测</li>
<li>未使用代码识别</li>
<li>版本控制集成</li>
</ul>
</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="连接问题"><a href="#连接问题" class="headerlink" title="连接问题"></a>连接问题</h3><p>如果遇到AI功能无法使用：</p>
<ol>
<li><p>网络诊断：</p>
<ul>
<li>检查网络连接</li>
<li>确认防火墙设置</li>
<li>测试API连接性</li>
</ul>
</li>
<li><p>账号问题：</p>
<ul>
<li>验证登录状态</li>
<li>检查订阅状态</li>
<li>刷新访问令牌</li>
</ul>
</li>
<li><p>其他解决方案：</p>
<ul>
<li>重启编辑器</li>
<li>清除缓存</li>
<li>重新安装</li>
</ul>
</li>
</ol>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>提升Cursor运行效率：</p>
<ol>
<li><p>基础优化：</p>
<ul>
<li>关闭不需要的插件</li>
<li>定期清理缓存</li>
<li>限制文件监视数量</li>
</ul>
</li>
<li><p>高级设置：</p>
<ul>
<li>调整内存限制</li>
<li>配置工作区设置</li>
<li>优化文件索引</li>
</ul>
</li>
<li><p>硬件建议：</p>
<ul>
<li>使用SSD存储</li>
<li>确保足够内存</li>
<li>处理器性能要求</li>
</ul>
</li>
</ol>
<h2 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h2><h3 id="快捷键优化"><a href="#快捷键优化" class="headerlink" title="快捷键优化"></a>快捷键优化</h3><p>提高开发效率的快捷键设置：</p>
<ol>
<li>常用操作快捷键</li>
<li>自定义快捷键映射</li>
<li>快捷键冲突解决</li>
</ol>
<h3 id="插件集成"><a href="#插件集成" class="headerlink" title="插件集成"></a>插件集成</h3><p>与其他开发工具的协同：</p>
<ol>
<li>Git集成</li>
<li>调试工具配置</li>
<li>代码格式化插件</li>
<li>团队协作工具</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Cursor是一款革命性的智能代码编辑器，它通过AI辅助功能大大提高了开发效率。本文详细介绍了从安装配置到高级使用的完整流程，掌握这些功能将帮助你：</p>
<ol>
<li>更快速地编写代码</li>
<li>提高代码质量</li>
<li>简化重构过程</li>
<li>加速问题解决</li>
</ol>
<p>建议循序渐进地学习和使用这些功能，从基础的代码补全开始，逐步探索更高级的功能，最终将Cursor整合到你的日常开发工作流程中。</p>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul>
<li><a href="https://cursor.sh/docs">Cursor官方文档</a></li>
<li><a href="https://code.visualstudio.com/docs">VSCode文档</a></li>
<li><a href="https://cursor.sh/blog">AI编程最佳实践</a></li>
</ul>
<h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><ol>
<li><p><strong>访问官网</strong></p>
<ul>
<li>打开 <a href="https://cursor.sh/">Cursor官网</a></li>
<li>点击右上角”Sign Up”按钮</li>
</ul>
</li>
<li><p><strong>选择注册方式</strong></p>
<ul>
<li>GitHub账号登录（推荐）</li>
<li>邮箱注册</li>
<li>Google账号登录</li>
</ul>
</li>
<li><p><strong>完成注册流程</strong></p>
<ul>
<li>填写必要信息</li>
<li>验证邮箱</li>
<li>设置密码（如选择邮箱注册）</li>
</ul>
</li>
</ol>
<h3 id="登录配置"><a href="#登录配置" class="headerlink" title="登录配置"></a>登录配置</h3><ol>
<li><p><strong>首次登录</strong></p>
<ul>
<li>启动Cursor编辑器</li>
<li>点击右下角的登录按钮</li>
<li>选择登录方式</li>
</ul>
</li>
<li><p><strong>登录后配置</strong></p>
<ul>
<li>选择AI模型（默认为Claude）</li>
<li>设置API访问权限</li>
<li>配置代码补全偏好</li>
</ul>
</li>
<li><p><strong>账号管理</strong></p>
<ul>
<li>查看使用配额</li>
<li>管理订阅计划</li>
<li>设置个人偏好</li>
</ul>
</li>
</ol>
<h3 id="常见登录问题"><a href="#常见登录问题" class="headerlink" title="常见登录问题"></a>常见登录问题</h3><ol>
<li><p><strong>无法登录</strong></p>
<ul>
<li>检查网络连接</li>
<li>确认账号密码正确</li>
<li>清除浏览器缓存</li>
</ul>
</li>
<li><p><strong>API限制</strong></p>
<ul>
<li>免费版每日限额说明</li>
<li>升级专业版获取更多配额</li>
<li>配额使用优化建议</li>
</ul>
</li>
</ol>
<h3 id="针对于cursor的免费版"><a href="#针对于cursor的免费版" class="headerlink" title="针对于cursor的免费版"></a>针对于cursor的免费版</h3><ol>
<li><p>免费版限制<br>我们知道cursor的免费版是有限制的，比如每天只能使用50次（原来是150次），而且不能使用一些高级功能，比如代码重构，代码解释等。</p>
</li>
<li><p>免费版使用技巧<br>  我们可以使用2925无限邮箱，当每日的免费版限制额度用完之后，重复注册邮箱，既可以实现无限制的cursor的AI功能。</p>
</li>
<li><p>2925无限邮箱注册</p>
<ul>
<li>访问官网 <a href="https://2925.cc/">https://2925.cc</a></li>
<li>点击”立即注册”按钮</li>
<li>填写必要信息</li>
<li>验证邮箱</li>
</ul>
</li>
<li><p>当免费版限制额度使用过多后，会锁定电脑ip，具体解决办法不过多赘述</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>AI编程</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
</search>
