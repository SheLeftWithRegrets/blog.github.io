<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>37的技术博客</title>
    <link>https://sheleftwithregrets.github.io/blog.github.io/</link>
    
    <atom:link href="https://sheleftwithregrets.github.io/blog.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>选择有时候比努力更重要</description>
    <pubDate>Mon, 09 Jun 2025 13:50:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HTML学习笔记</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/06/09/HTML-learning/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/06/09/HTML-learning/</guid>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      
      <description>补充基于HTML的查缺补漏</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a>HTML学习笔记</h1><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p>1 合理的title ，description ，keyswords 搜索引擎对这三项的权重逐渐减小，title 强调重点即可<br>，重要的关键字不要超过两次，而且要靠前。</p><p>2 不同的tilte要有所不同，description把页面的内容高度概括，长度合适。不可过分堆叠关键字，不同<br>的页面description，描述要不一样。keyswords列举重要的关键字即可</p><p>3 语义话的html代码，符合w3c 规范：语义话的标签，有利于搜索引擎理解网页。</p><p>4 重要的内容放在前面，搜索引擎抓取html 的顺序是从上到下，有的搜索引擎对抓取的长度1有限制。</p><p>5 重要的内容不要用js输出，爬虫不会执行js获取内容</p><p>6 不要用iframe ，搜索引擎不会抓取iframe中的内容</p><p>7 非装饰的图片必须加alt ，有利seo</p><p>8 优化网站速度，网站速度是搜索引擎排序的一个重要指标</p><p>9 rmb 战士搞定百度，seo都是浮云</p><h2 id="indexedDb"><a href="#indexedDb" class="headerlink" title="indexedDb"></a>indexedDb</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>现有浏览器数据储存方案不适合存储大量数据，cookis的大小不超过4KB且每次请求都会发送回服务器，LocalStorage在2.5MB到10MB之间，且不提供搜索功能，不能建立自定义的索引。<br>indexedDB就是浏览器提供的本地数据库，可以被网页脚本创建和操作。indexedDB允许储存大量数据。提供查找接口，还能建立索引。不属于关系型数据库，不支持sql查询语句，更接近NoSQL数据库。</p><p>indexedDB的特点：<br>1.键值对储存。indexedDB内部采用对象仓库存放数据，所有类型的数据都可以直接存入，包括JavaScript对象。对象仓库中，数据以”键值对“的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。<br>2.异步。indexedDB操作时不会锁死浏览器，用户依然可以进行其他操作。这与localStorage形成对比，后者的操作是同步的。异步设计是为了放置大量数据的读写，会拖慢网页的性能。<br>3.支持事务，indexed DB支持事务，这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。基于事务的一致性和原子性，保障数据的准确和可靠性。<br>4.同源限制IndexedDB受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。<br>5.储存空间大，indexedDB的储存空间比localStorage大得多，一般来说不少于250MB，甚至没有上限。<br>6.支持二进制储存。indexedDB不仅可以储存字符串，还可以储存二进制数据(Array Buffer对象和Blob对象)。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>indexedDB是一个比较复杂的API，涉及不少概念。它把不同的实体，抽象成一个个对象接口。学习这个API，就是学习它的各种对象接口。</p><ul><li>数据库:IDBDatabase对象</li><li>对象仓库：IDBObjectStore对象</li><li>索引:IDBIndex对象</li><li>事务：IDBTransaction对象</li><li>操作请求：IDBRequest对象</li><li>指针：IDBCursor对象</li><li>主键集合：IDBKeyRange对象</li></ul><h4 id="主要概念："><a href="#主要概念：" class="headerlink" title="主要概念："></a>主要概念：</h4><p>1.数据库：<br>数据库是一系列相关数据的容器。每个域名都可以新建任意多个数据库。<br>IndexedDB数据库有版本的概念，同一个时刻，只能有一个版本的数据库存在。如果要修改数据库接口(新增或删除表、索引或者主键)，只能通过升级数据库版本完成。<br>2.对象仓库<br>每个数据库包含若干个对象仓库。类似于关系型数据库的表格。<br>3.数据记录<br>对象仓库保存的是数据记录。每条记录类似于关系型数据库的行，但是只有主键和数据体两部分。<br>主键用来建立默认的索引，必须是不同的，否则会报错。主键可以是数据记录里面的一个属性，也可以指定为一个递增的整数编号。<br>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;id:1,text:&#x27;foo&#x27;&#125;</span><br></pre></td></tr></table></figure><p>上面的对象中，id属性可以当作主键，数据体可以是任意数据类型，不限于对象。</p><p>4.索引<br>未来加速数据的检索，可以在对象仓库里面，为不同的属性建立索引。<br>5.事务<br>数据记录的读写和删改，都要通过事务完成。事务对象提供error，abort和complete三个时间，用来监听操作结果。</p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>IndexedDB数据库的各种操作，一般是按照下面的流程进行的。<br>1.打开数据库</p><p>使用indexedDB的第一步是打开数据库，使用indexedDB.open()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var request = window.indexedDB.open(databaseName, version);</span><br></pre></td></tr></table></figure><p>这个方法接受两个参数，第一个参数是字符串，表示数据库的名字。如果指定的数据库不存在，就会新建数据库。第二个参数是整数，表示数据库的版本。如果省略，打开已有数据库时，默认为当前版本，新建数据库时，默认为1.<br>indexedDB.open()方法返回一个IDBRequest对象。这个对象通过三种事件error、success、upgradeneeded、处理打开数据库的操作结果。<br>(1)error事件<br>表示打开数据库失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.onerror = function(event) &#123;</span><br><span class="line">  console.log(&quot;数据库打开失败&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(2)success事件<br>表示打开数据库成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.onsuccess = function(event) &#123;</span><br><span class="line">  db = request.result;</span><br><span class="line">  console.log(&quot;数据库打开成功&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>request.result属性拿到数据库对象。<br>(3)upgradeneeded事件<br>表示数据库版本发生变化时，会触发这个事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var db;</span><br><span class="line">request.onupgradeneeded = function(event) &#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">  console.log(&quot;数据库更新成功&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过事件对象的target.result属性，拿到数据库实例。</p><p>2.新建数据库<br>新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在upgradeneeded事件的监听函数中完成。因为这时版本从无到有，所以会触发这个事件。</p><p>通常，新建数据库以后，第一件事是新建对象仓库(即新建表)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = function(event) &#123;</span><br><span class="line">  var db = event.target.result;</span><br><span class="line">  var objectStore = db.createObjectStore(&quot;test&quot;, &#123; keyPath: &quot;id&quot; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，数据库新建成功以后，新增一张叫做test的表，主键是id<br>更好的写法是判断一下表格是否存在，如果不存在则新建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = function(event)&#123;</span><br><span class="line">   db = event.target.result;</span><br><span class="line">   var objectStore;</span><br><span class="line">   if(!db.objectStoreNames.contains(&quot;test&quot;))&#123;</span><br><span class="line">       objectStore = db.createObjectStore(&quot;test&quot;,&#123;keyPath:&quot;id&quot;&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的代码可知，db.objectStoreNames属性返回数据库所有对象仓库的名字。其中使用的是contains来判断是否存在。<br>写一个实例，来判断db.objectStoreNames是什么类型的数据</p><p>主键(key)是默认建立索引的属性。比如，数据记录是{id:1,name:’张三’},那么id属性可以作为主键。主键也可以指定为下一层对象的属性，比如{foo:{bar:’baz’}}的foo.bar也可以指定为主键。</p><p>如果数据记录里面没有合适作为主键的属性，那么可以让IndexedDB自动生成主键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var objectStore = db.createObjectStore(&quot;test&quot;, &#123; autoIncrement: true &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，autoIncrement属性指定为true，表示主键的值自动递增。<br>如果主键的值不是整数，autoIncrement属性也可以指定为true。这时，主键的值会变成字符串。</p><p>新建对象仓库以后，下一步可以新建索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = function(event)&#123;</span><br><span class="line">    db = event.target.result;</span><br><span class="line">    var objectStore = db.createObjectStore(&quot;test&quot;,&#123;keyPath:&quot;id&quot;&#125;);</span><br><span class="line">    objectStore.createIndex(&quot;name&quot;, &quot;name&quot;, &#123; unique: false &#125;); </span><br><span class="line">    objectStore.createIndex(&quot;email&quot;, &quot;email&quot;, &#123; unique: true &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，createIndex()方法用来新建索引。它接受三个参数，第一个参数是索引的名字，第二个参数是索引所在的属性，第三个参数是一个对象，用来设置索引的参数。<br>unique属性表示该属性的值是否必须唯一，默认值为false。如果设置为true，那么新增的数据的这个属性，就不能与其他数据的这个属性重复。</p><p>新建对象仓库和索引以后，就可以进行数据的新增、读取、遍历、更新和删除了。</p><p>3.新增数据</p><p>新增数据指的是向对象仓库写入数据记录，这需要通过事务完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function add() &#123;</span><br><span class="line">  var request = db.transaction([&#x27;person&#x27;], &#x27;readwrite&#x27;)</span><br><span class="line">    .objectStore(&#x27;person&#x27;)</span><br><span class="line">    .add(&#123; id: 1, name: &#x27;张三&#x27;, age: 24, email: &#x27;zhangsan@example.com&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = function (event) &#123;</span><br><span class="line">    console.log(&#x27;数据写入成功&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = function (event) &#123;</span><br><span class="line">    console.log(&#x27;数据写入失败&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br></pre></td></tr></table></figure><p>上面代码中，写入数据需要新建一个事务，新建时必须指定表格名称和操作模式(“只读”或”读写“)。新建事务以后，通过IDBTransaction.objectStroe(name)方法，拿到IDBObjectStore对象，再通过表格对象的add()方法，向表格写入一条数据。<br>写入操作是一个异步操作，通过监听连接对象的success事件和error事件，了解是否写入成功。</p><p>4.读取数据<br>读取数据也是通过事务完成的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function read() &#123;</span><br><span class="line">  var transaction = db.transaction([&#x27;person&#x27;]);</span><br><span class="line">  var objectStore = transaction.objectStore(&#x27;person&#x27;);</span><br><span class="line">  var request = objectStore.get(1);</span><br><span class="line"></span><br><span class="line">  request.onerror = function(event) &#123;</span><br><span class="line">    console.log(&#x27;事务失败&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onsuccess = function(event) &#123;</span><br><span class="line">    if(request.result)&#123;</span><br><span class="line">     console.log(&#x27;Name:&#x27;+request.result.name);</span><br><span class="line">     console.log(&#x27;Age:&#x27;+request.result.age);</span><br><span class="line">     console.log(&#x27;Email:&#x27;+request.result.email);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">     console.log(&#x27;未获得数据记录&#x27;);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，objectStore.get()方法用于读取数据，参数是主键的值。<br>5.遍历数据<br>遍历数据表格的所有记录，要使用指针对象IDBCursor。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function readAll() &#123;</span><br><span class="line">  var objectStore = db.transaction(&#x27;person&#x27;).objectStore(&#x27;person&#x27;);</span><br><span class="line">  objectStore.openCursor().onsuccess = function(event) &#123;</span><br><span class="line">    var cursor = event.target.result;</span><br><span class="line">    if(cursor) &#123;</span><br><span class="line">      console.log(&quot;id:&quot;+ cursor.key)</span><br><span class="line">      console.log(&quot;Name: &quot; + cursor.value.name);</span><br><span class="line">      console.log(&quot;Age: &quot; + cursor.value.age);</span><br><span class="line">      console.log(&quot;Email: &quot; + cursor.value.email);</span><br><span class="line">      cursor.continue();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      console.log(&#x27;没有更多数据了！&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，新建指针对象的openCursor()方法是一个异步操作，所以要监听success事件。</p><p>6.更新数据<br>更新数据要使用IDBObject.put()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function update() &#123;</span><br><span class="line">  var request = db.transaction([&#x27;person&#x27;], &#x27;readwrite&#x27;)</span><br><span class="line">   .objectStore(&#x27;person&#x27;)</span><br><span class="line">   .put(&#123; id: 1, name: &#x27;李四&#x27;, age: 24, email: &quot;list@example.com&quot;&#125;)</span><br><span class="line">  request.onsuccess = function(event) &#123;</span><br><span class="line">    console.log(&#x27;数据更新成功&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = function(event) &#123;</span><br><span class="line">    console.log(&#x27;数据更新失败&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">update();</span><br></pre></td></tr></table></figure><p>上面代码中，put()方法自动更新了主键为1的记录。<br>7.删除数据<br>IDBObjectStore.delete()方法用于删除记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function remove()&#123;</span><br><span class="line">    var request = db.transaction([&#x27;person&#x27;],&#x27;readwrite&#x27;)</span><br><span class="line">    .objectStore(&#x27;person&#x27;)</span><br><span class="line">    .delete(1);</span><br><span class="line">    request.onsuccess = function(event) &#123;</span><br><span class="line">        console.log(&#x27;数据删除成功&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.使用索引<br>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键(即从主键取值)<br>假定新建表格的时候，对name字段建立了索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectStore.createIndex(&quot;name&quot;, &quot;name&quot;, &#123; unique: false &#125;);</span><br></pre></td></tr></table></figure><p>现在，就可以从name找到对应的数据记录了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var transaction = db.transaction([&#x27;person&#x27;],&#x27;readonly&#x27;);</span><br><span class="line">var store = transaction.objectStore(&#x27;person&#x27;);</span><br><span class="line">var index = store.index(&#x27;name&#x27;);</span><br><span class="line">var request = index.get(&#x27;李四&#x27;);</span><br><span class="line">request.onsuccess = function(event) &#123;</span><br><span class="line">    var result = e.target.result</span><br><span class="line">    if(result)&#123;</span><br><span class="line">     //..</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">     //..</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/HTML/">HTML</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/">前端开发</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/06/09/HTML-learning/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>npx学习笔记</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/05/21/npx-learning/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/05/21/npx-learning/</guid>
      <pubDate>Wed, 21 May 2025 00:00:00 GMT</pubDate>
      
      <description> </description>
      
      
      
      <content:encoded><![CDATA[<h1 id="npx学习笔记"><a href="#npx学习笔记" class="headerlink" title="npx学习笔记"></a>npx学习笔记</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>npx是Node.js的一个工具，用于执行本地安装的命令行工具，而不需要全局安装。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npx是Node.js的一部分，不需要单独安装。若不能使用则需要手动安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure><h2 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h2><p>项目内部安装了测试工具Mocha，使用npx可以直接调用。<br>一般来说，调用Mocha，只能在项目脚本和package.json的scripts字段里面，如果想在命令行下调用，必须如下使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-modules/.bin/mocha --version</span><br></pre></td></tr></table></figure><p>npx就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx mocha --version</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>npx运行的时候，会从node_modules&#x2F;.bin路径和环境变量$PATH里面检查命令是否存在。由于npx会检查环境变量$PATH,所以系统命令也可以调用</p><blockquote><p>注意，Bash内置的命令不在$PATH里面，所以不能用。比如，cd是Bash命令，因此就不能使用npx cd</p></blockquote><h2 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h2><p>除了调用项目内部模块，npx还能避免全局安装模块。<br>例如，create-react-app这个模块是全局安装，npx可以运行它而且不进行全局安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><p>上面代码运行时，npx将create-react-app下载到一个临时目录，使用以后再删除。以后再次执行上面的命令，会重新下载create-react-app。<br>下载全局模块时，npx允许指定版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app@3.0.0 my-app</span><br></pre></td></tr></table></figure><p>上面代码指定版本为3.0.0。</p><blockquote><p>注意，只要npx后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，但是npx http-server就会自动下载这个模块，在当前目录启动一个web服务。</p></blockquote><h2 id="–no-install参数和–ignore-existing参数。"><a href="#–no-install参数和–ignore-existing参数。" class="headerlink" title="–no-install参数和–ignore-existing参数。"></a>–no-install参数和–ignore-existing参数。</h2><ul><li>–no-install参数强制npx使用本地模块，不下载远程模块，如果本地不存在该模块则报错</li><li>–ignore-existing参数强制npx总是从远程下载模块，即使本地存在同名模块。</li></ul><h2 id="使用不同版本的node"><a href="#使用不同版本的node" class="headerlink" title="使用不同版本的node"></a>使用不同版本的node</h2><p>npx可以指定某个版本的node来运行脚本，而不影响其他版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx node@10.13.0 node --version</span><br></pre></td></tr></table></figure><p>原理是，npx会将指定版本的node下载到临时目录，然后运行脚本。</p><h2 id="p参数"><a href="#p参数" class="headerlink" title="-p参数"></a>-p参数</h2><p>用于指定npx所要安装的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx -p node@10.13.0 node --version</span><br></pre></td></tr></table></figure><p>对于需要安装多个模块的场景很有用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx -p localcatjs -p cowsay [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure><h2 id="c参数"><a href="#c参数" class="headerlink" title="-c参数"></a>-c参数</h2><p>如果npx安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用npx安装的模块，后面的可执行项还是会交给shell解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx -p localcatjs -p cowsay <span class="string">&#x27;cowsay hello | localcatjs’</span></span><br><span class="line"><span class="string"># 报错</span></span><br></pre></td></tr></table></figure><p>因为上述执行的代码中，第一项cowsay由npx解释，而第二项localcatjs由shell解释，所以会报错。<br>-c参数可以将所有命令都用npx解释，有了它，代码就可以正常执行了。<br>-c另一个作用则是将环境变量带入所要执行的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx run <span class="built_in">env</span> | grep npm_</span><br></pre></td></tr></table></figure><p>npm提供当前项目的一些环境变量，可以用-c参数带入命令之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx -c <span class="string">&#x27;echo $npm_package_name&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码会输出当前项目的项目名。</p><h3 id="执行GitHub源码"><a href="#执行GitHub源码" class="headerlink" title="执行GitHub源码"></a>执行GitHub源码</h3><p>npx还可以执行GitHub上的源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行 Gist 代码</span></span><br><span class="line">$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行仓库代码</span></span><br><span class="line">$ npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure><blockquote><p>注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。</p></blockquote>]]></content:encoded>
      
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/">前端开发</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/node/">node</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/05/21/npx-learning/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vue的优化手段</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/24/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9Avue%E7%9A%84%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/24/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9Avue%E7%9A%84%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5/</guid>
      <pubDate>Mon, 24 Mar 2025 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;使用key可以优化vue&quot;&gt;&lt;a href=&quot;#使用key可以优化vue&quot; class=&quot;headerlink&quot; title=&quot;使用key可以优化vue&quot;&gt;&lt;/a&gt;使用key可以优化vue&lt;/h2&gt;&lt;p&gt;高效的DOM更新,key属性帮助Vue识别虚拟Dom中的节点</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="使用key可以优化vue"><a href="#使用key可以优化vue" class="headerlink" title="使用key可以优化vue"></a>使用key可以优化vue</h2><p>高效的DOM更新,key属性帮助Vue识别虚拟Dom中的节点.vnode,当数据变化时,Vue会基于key值高效的更新DOM,而不是重新渲染整个列表.<br>在v-for循环中使用key可以确保组件的状态不会混淆,每个组件实例都能保持独立的状态.<br>Vue的diff算法会使用key来判断节点是新创建的还是被移动的.有了唯一的key,vue可以最小化DOM操作.<br>没有key时,vue会采用”就地复用”策略,可能导致一些意外行为,特别是在列表项包含状态或子组件时.<br>Vue官方强烈建议在使用v-for时提供key属性,并且应该使用唯一的稳定的标识符.而不是索引.</p><h2 id="使用freeze来冻结数据，避免数据被修改-（主要用于vue2）"><a href="#使用freeze来冻结数据，避免数据被修改-（主要用于vue2）" class="headerlink" title="使用freeze来冻结数据，避免数据被修改 （主要用于vue2）"></a>使用freeze来冻结数据，避免数据被修改 （主要用于vue2）</h2><p>阻止响应式转换 ：当我们将一个JavaScript对象传入Vue实例作为data选项，Vue将遍历此对象所有的属性，并使用Object.defineProperty把这些属性全部转为getter&#x2F;setter，这是Vue响应式系统的核心。而使用Object.freeze()可以冻结一个对象，阻止Vue对其进行响应式处理。<br>减少观察者 ：对于大型数据集或不需要变化的数据，使用freeze可以避免Vue创建大量的getter&#x2F;setter，从而减少内存占用。<br>提高性能 ：由于被冻结的对象不再是响应式的，Vue不再需要追踪其变化，这可以在处理大量数据时显著提高性能。<br>适用场景 ：特别适合那些一旦初始化就不再变化的数据，如常量配置、固定选项列表等。</p><h2 id="使用函数式组件优化"><a href="#使用函数式组件优化" class="headerlink" title="使用函数式组件优化"></a>使用函数式组件优化</h2><p>函数式组件没有实例，没有生命周期钩子，也没有this上下文，因此渲染开销更小<br>没有状态管理和实例化过程，函数式组件的渲染速度更快。<br>更少的内存占用，不需要维护Vue实例，减少内存占用。<br>适用于纯展示型的组件。<br>函数式组件的代码通常更简洁，更容易维护和理解</p><h2 id="使用计算属性优化"><a href="#使用计算属性优化" class="headerlink" title="使用计算属性优化"></a>使用计算属性优化</h2><p>计算属性会基于响应式依赖进行缓存.只有当依赖项发生变化时,才会重新计算,避免了每次渲染都进行复杂计算.<br>使用模板中某个数据多次使用，并该数据是通过计算得到的，可以使用计算属性来缓存它们.<br>计算属性能够智能的追踪其依赖关系,只有在相关依赖发生变化时,才会更新.<br>将复杂的逻辑从模板中抽离出来,使模板更加简洁易读.</p><h2 id="非实时绑定的表单项"><a href="#非实时绑定的表单项" class="headerlink" title="非实时绑定的表单项"></a>非实时绑定的表单项</h2><p>当使用v-model绑定一个表单时,当用户改变表单项的状态时,也会随之改变数据,从而导致vue发生重渲染(rerender)<br>这会带来一些性能的开销.<br>我们可以通过使用lazy或不使用v-model的方式来解决该问题.但要注意,这样可能会导致在某一个时间段内数据和表单项的值是不一致的.<br>当使用v-model.lazy时,数据和表单项的值是异步的,只有当用户停止输入时,才会更新数据.使用lazy监听@change事件<br>当不使用v-model时,我们可以手动的监听表单项的change事件,并更新数据. 不使用v-model监听@input</p><h2 id="保持对象引用稳定"><a href="#保持对象引用稳定" class="headerlink" title="保持对象引用稳定"></a>保持对象引用稳定</h2><p>避免不必要的响应式更新 ：Vue的响应式系统会追踪对象的变化，当对象引用改变时，Vue会认为整个对象都变了，从而触发相关组件的重新渲染。保持对象引用稳定可以避免这种情况。<br>减少虚拟DOM的比较开销 ：当父组件向子组件传递props时，如果每次都创建新的对象引用，即使内容相同，Vue也会认为props发生了变化，导致子组件重新渲染。<br>优化memo和缓存 ：使用v-memo、computed或Vue3的shallowRef等特性时，它们依赖于引用比较来判断是否需要重新计算或渲染。<br>实现方式 ：可以通过使用不可变数据模式、Object.assign()更新对象而不是创建新对象、使用Vue的响应式API如reactive()等方式来保持对象引用的稳定性。</p><h2 id="使用延迟装载来优化vue项目"><a href="#使用延迟装载来优化vue项目" class="headerlink" title="使用延迟装载来优化vue项目"></a>使用延迟装载来优化vue项目</h2><p>减小初始包体积 ：只加载当前路由需要的组件，减少首屏加载时间和资源消耗。<br>按需加载资源 ：路由组件、大型库、图片等资源只在需要时才加载，提高应用启动速度。<br>提升用户体验 ：首屏渲染更快，用户可以更快地与应用交互，减少等待时间。<br>优化资源利用 ：减少不必要的网络请求和浏览器解析工作，节省带宽和设备资源。</p><h2 id="使用keep-alive来优化vue项目"><a href="#使用keep-alive来优化vue项目" class="headerlink" title="使用keep-alive来优化vue项目"></a>使用keep-alive来优化vue项目</h2><p>缓存组件状态 ：keep-alive可以缓存不活动的组件实例，而不是销毁它们，保留组件的状态和避免重新渲染。<br>减少性能开销 ：避免了组件的重复创建和销毁过程，减少了DOM操作，提高了应用性能，特别是对于频繁切换的组件。<br>提升用户体验 ：保持组件状态意味着用户在组件间切换时不会丢失之前的操作和数据，如表单输入、滚动位置等。<br>特有的生命周期钩子 ：提供了activated和deactivated钩子，便于管理缓存组件的生命周期事件。<br>可配置性强 ：通过include、exclude和max属性可以精确控制缓存策略，只缓存需要的组件，避免内存浪费。</p><h2 id="长列表优化"><a href="#长列表优化" class="headerlink" title="长列表优化"></a>长列表优化</h2><ul><li>什么是长列表优化?<br>即渲染大量数据时,容易出现卡顿的情况.<br>采取使用分页的方式获取数据.<br>使用虚拟滚动方案只渲染浏览器视口范围内的的数据.<br>使用v-once,方式只渲染一次<br>通过v-memo缓存子树,有条件更新,提高复用,避免不必要更新.<br>按需加载数据</li></ul><p>虚拟滚动 ：只渲染可视区域内的元素，其他元素在滚动到视口时才渲染，可使用vue-virtual-scroller等库实现。<br>分页加载 ：将大量数据分批次加载和渲染，减轻一次性渲染的压力。<br>时间分片 ：利用requestAnimationFrame或setTimeout将渲染任务分割成小块，避免长时间占用主线程。<br>列表项组件化 ：将列表项抽离为单独组件，并使用v-once、函数式组件等技术减少更新开销。<br>使用key ：为列表项提供稳定的key值，帮助Vue高效地进行DOM更新。</p><h2 id="打包体积优化"><a href="#打包体积优化" class="headerlink" title="打包体积优化"></a>打包体积优化</h2><p>路由懒加载，使用动态import实现按需加载组件；<br>第三方库按需引入，避免引入整个库；<br>使用webpack的splitChunks分割代码，提取公共模块<br>使用compression-webpack-plugin开启Gzip压缩<br>使用webpack的Tree Shaking删除未使用的代码<br>合理使用CDN加载外部资源<br>图片资源压缩和合理使用</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/Vue-js/">Vue.js</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/24/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9Avue%E7%9A%84%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>购物车动态效果</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C/</guid>
      <pubDate>Thu, 20 Mar 2025 03:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;使用面向对象编程的思想实现购物车效果&quot;&gt;&lt;a href=&quot;#使用面向对象编程的思想实现购物车效果&quot; class=&quot;headerlink&quot; title=&quot;使用面向对象编程的思想实现购物车效果&quot;&gt;&lt;/a&gt;使用面向对象编程的思想实现购物车效果&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="使用面向对象编程的思想实现购物车效果"><a href="#使用面向对象编程的思想实现购物车效果" class="headerlink" title="使用面向对象编程的思想实现购物车效果"></a>使用面向对象编程的思想实现购物车效果</h2><ul><li>主要通过使用js来实现获取网页页面的数据和简单的数据控制<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UIGoods</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">g</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = g;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">choose</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getTotalPrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">price</span> * <span class="variable language_">this</span>.<span class="property">choose</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isChoose</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">choose</span> &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">choose</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">choose</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">choose</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对uiData中定义的方法进行简单封装，同时填加主要的数据逻辑<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UIData</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> uiGoods = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;goods.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> uig = <span class="keyword">new</span> <span class="title class_">UIGoods</span>(goods[i]);</span><br><span class="line">            uiGoods.<span class="title function_">push</span>(uig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiGoods</span> = uiGoods;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deliveryThreshold</span> = <span class="number">30</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deliveryPrice</span> = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算所选的所有商品的总价</span></span><br><span class="line">    <span class="title function_">getTotalPrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">uiGoods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="title function_">isChoose</span>())&#123;</span><br><span class="line">                sum += <span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="title function_">getTotalPrice</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加选中商品的数量</span></span><br><span class="line">    <span class="title function_">increase</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiGoods</span>[index].<span class="title function_">increase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少选中商品的数量</span></span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiGoods</span>[index].<span class="title function_">decrease</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算总共选中的商品数量</span></span><br><span class="line">    <span class="title function_">getTotalChooseNumber</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">uiGoods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="title function_">isChoose</span>())&#123;</span><br><span class="line">                sum += <span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="property">choose</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 购物车中有没有商品</span></span><br><span class="line">    <span class="title function_">hasGoodsInCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getTotalChooseNumber</span>() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否满足配送条件</span></span><br><span class="line">    <span class="title function_">isDelivery</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getTotalPrice</span>() &gt;= <span class="variable language_">this</span>.<span class="property">deliveryThreshold</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否勾选</span></span><br><span class="line">    <span class="title function_">isChoose</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">uiGoods</span>[index].<span class="title function_">isChoose</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>最后通过UI类来实现购物车的动态效果，实现页面中各种动态情况下的各种效果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UI</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiData</span> = <span class="keyword">new</span> <span class="title class_">UIData</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span> = &#123;</span><br><span class="line">            <span class="attr">goodsContainer</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goods-list&#x27;</span>),</span><br><span class="line">            <span class="attr">deliveryPrice</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car-tip&#x27;</span>),</span><br><span class="line">            <span class="attr">totalPrice</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car-total&#x27;</span>),</span><br><span class="line">            <span class="attr">footerPay</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-pay&#x27;</span>),</span><br><span class="line">            <span class="attr">footerPayInnerSpan</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-pay span&#x27;</span>),</span><br><span class="line">            <span class="attr">car</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car&#x27;</span>),</span><br><span class="line">            <span class="attr">carInner</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car span&#x27;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> carRect = <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">var</span> jumpTarget = &#123;</span><br><span class="line">            <span class="attr">x</span>:carRect.<span class="property">left</span> + carRect.<span class="property">width</span>/<span class="number">2</span>,</span><br><span class="line">            <span class="attr">y</span>:carRect.<span class="property">top</span> + carRect.<span class="property">height</span>/<span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">jumpTarget</span> = jumpTarget;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createHTML</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateFooter</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">listenEvent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听各种事件 </span></span><br><span class="line">    <span class="title function_">listenEvent</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;animationend&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;animate&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据数据创建商品列表的元素</span></span><br><span class="line">    <span class="title function_">createHTML</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="comment">//1.生成HTML字符串，需要解析html，开发效率高，执行效率低</span></span><br><span class="line">       <span class="comment">//2.一个一个创建元素 开发效率低，执行效率高</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">uiGoods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> g = <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">uiGoods</span>[i];</span><br><span class="line">            html += <span class="string">`&lt;div class=&quot;goods-item&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;img src=&quot;<span class="subst">$&#123;g.data.pic&#125;</span>&quot; alt=&quot;&quot; class=&quot;goods-pic&quot; /&gt;</span></span><br><span class="line"><span class="string">          &lt;div class=&quot;goods-info&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h2 class=&quot;goods-title&quot;&gt;<span class="subst">$&#123;g.data.title&#125;</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;goods-desc&quot;&gt;</span></span><br><span class="line"><span class="string">              <span class="subst">$&#123;g.data.desc&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;goods-sell&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;月售 <span class="subst">$&#123;g.data.sellNumber&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;好评率<span class="subst">$&#123;g.data.favorRate&#125;</span>%&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;goods-confirm&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;p class=&quot;goods-price&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;span class=&quot;goods-price-unit&quot;&gt;￥&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;g.data.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;div class=&quot;goods-btns&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;i index=&quot;<span class="subst">$&#123;i&#125;</span>&quot; class=&quot;iconfont i-jianhao&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;i index=&quot;<span class="subst">$&#123;i&#125;</span>&quot; class=&quot;iconfont i-jiajianzujianjiahao&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="property">innerHTML</span> = html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加选中商品的数量</span></span><br><span class="line">    <span class="title function_">increase</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">increase</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateGoodsItem</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateFooter</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">jump</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少选中商品的数量</span></span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">decrease</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateGoodsItem</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateFooter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新某个商品元素的显示状态</span></span><br><span class="line">    <span class="title function_">updateGoodsItem</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> goodsDom = <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="property">children</span>[index]</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">isChoose</span>(index))&#123;</span><br><span class="line">            goodsDom.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            goodsDom.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        goodsDom.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goods-btns span&#x27;</span>).<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">uiGoods</span>[index].<span class="property">choose</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新页脚</span></span><br><span class="line">    <span class="title function_">updateFooter</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 实现一些动态的变化</span></span><br><span class="line">        <span class="keyword">var</span> currentPrice = <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">getTotalPrice</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">deliveryPrice</span>.<span class="property">textContent</span> = <span class="string">`配送费￥<span class="subst">$&#123;<span class="variable language_">this</span>.uiData.deliveryPrice&#125;</span>`</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">totalPrice</span>.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;currentPrice.toFixed(<span class="number">2</span>)&#125;</span>`</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">isDelivery</span>())&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">footerPay</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">footerPay</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">            <span class="comment">// 四舍五入获得还缺多少钱</span></span><br><span class="line">            <span class="keyword">var</span> needPay = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">deliveryThreshold</span> - currentPrice);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">footerPayInnerSpan</span>.<span class="property">textContent</span> = <span class="string">`还差￥<span class="subst">$&#123;needPay&#125;</span>元起送`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">hasGoodsInCar</span>())&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">carInner</span>.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.uiData.getTotalChooseNumber()&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加动画</span></span><br><span class="line">    <span class="title function_">carAnimate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;animate&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抛物线跳跃的元素</span></span><br><span class="line">    <span class="title function_">jump</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> btnAdd = <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="property">children</span>[index].<span class="title function_">querySelector</span>(<span class="string">&#x27;.i-jiajianzujianjiahao&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> rect = btnAdd.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">var</span> start = &#123;</span><br><span class="line">            <span class="attr">x</span>:rect.<span class="property">left</span>,</span><br><span class="line">            <span class="attr">y</span>:rect.<span class="property">top</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> div =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.<span class="property">className</span> = <span class="string">&#x27;add-to-car&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        i.<span class="property">className</span> = <span class="string">&#x27;iconfont i-jiajianzujianjiahao&#x27;</span></span><br><span class="line"></span><br><span class="line">        div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate(<span class="subst">$&#123;start.x&#125;</span>px,<span class="subst">$&#123;start.y&#125;</span>px)`</span></span><br><span class="line">        i.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`tran`</span></span><br><span class="line">        </span><br><span class="line">        div.<span class="title function_">appendChild</span>(i);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">        <span class="comment">// 强行渲染</span></span><br><span class="line">        div.<span class="property">clientWidth</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置结束位置</span></span><br><span class="line">        div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="variable language_">this</span>.jumpTarget.x&#125;</span>px)`</span></span><br><span class="line">        i.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(<span class="subst">$&#123;<span class="variable language_">this</span>.jumpTarget.y&#125;</span>px)`</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="comment">// 动画结束后移除元素</span></span><br><span class="line">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            div.<span class="title function_">remove</span>();</span><br><span class="line">            that.<span class="title function_">carAnimate</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">once</span>:<span class="literal">true</span>   </span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ui = <span class="keyword">new</span> <span class="title function_">UI</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line">ui.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> target = e.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">if</span>(target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;i-jianhao&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">var</span> index =+ target.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">        ui.<span class="title function_">decrease</span>(index);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;i-jiajianzujianjiahao&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">var</span> index =+ target.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">        ui.<span class="title function_">increase</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h2 id="个人收获"><a href="#个人收获" class="headerlink" title="个人收获"></a>个人收获</h2><ul><li>学习了面向对象编程的思想，对js的一些数据结构和方法有了更深入的理解</li><li>使用element.classList.add()方法可以为元素添加类，使用element.classList.remove()方法可以移除类。这个element是通过document.querySelector()方法获取的。</li><li>Element.getBoundingClientRect() 方法返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。</li><li>使用element.addEventListner()方法可以为对象添加监听事件，并对事件进行处理。可以通过设置once:true参数来设置事件只执行一次。</li><li>使用html+&#x3D;语法可以动态生成HTML字符串,然后使用innerHTML属性动态添加到页面中。也可以使用${}来对变量进行插值。</li><li>使用document.querySelector()方法获取的值，可以通过使用textcontent来对其进行内容上的修改。</li><li>使用translateX可以实现X轴的位移，使用translateY可以实现Y轴的位移。</li><li>使用es6的class类来实现定义效果。</li></ul>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>简单音乐播放器的实现</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</guid>
      <pubDate>Tue, 18 Mar 2025 04:25:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;HTML实现&quot;&gt;&lt;a href=&quot;#HTML实现&quot; class=&quot;headerlink&quot; title=&quot;HTML实现&quot;&gt;&lt;/a&gt;HTML实现&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="HTML实现"><a href="#HTML实现" class="headerlink" title="HTML实现"></a>HTML实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;mp3路径&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用html中定义音频的标签audio，通过使用controls属性，来显示音频控制器来控制音频控制。通过使用ul来展示歌词部分。</p><h2 id="CSS实现"><a href="#CSS实现" class="headerlink" title="CSS实现"></a>CSS实现</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0</span>.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highLight</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过css来实现高亮，隐藏超出container块的内容。通过list-style来隐藏列表项。</p><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置ul元素的偏移量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setOffset</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="title function_">findIndex</span>();</span><br><span class="line">    <span class="keyword">var</span> offSet =  liHeight*(index+<span class="number">1</span>) - containerHeight/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(offSet &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        offSet = <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(offSet &gt; maxOffset)&#123;</span><br><span class="line">        offSet = maxOffset</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除之前存在高亮的样式</span></span><br><span class="line">    <span class="keyword">var</span> li = doms.<span class="property">ul</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.highLight&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (li)&#123;</span><br><span class="line">        li.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;highLight&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加高亮的样式</span></span><br><span class="line">    <span class="keyword">var</span> li = doms.<span class="property">ul</span>.<span class="property">children</span>[index]</span><br><span class="line">    <span class="keyword">if</span> (li)&#123;</span><br><span class="line">        <span class="comment">// li.className = &quot;highLight&quot;</span></span><br><span class="line">        li.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;highLight&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    doms.<span class="property">ul</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(-<span class="subst">$&#123;offSet&#125;</span>px)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要展示如何实现ul元素的偏移.</p><h2 id="获取到的新JavaScript知识"><a href="#获取到的新JavaScript知识" class="headerlink" title="获取到的新JavaScript知识."></a>获取到的新JavaScript知识.</h2><ul><li>使用document.querySelector(“”)<br>文档对象模型Document引用的querySelector()方法返回文档中与指定选择器或选择器组匹配的第一个Element对象。如果找不到匹配项，则返回null。主要通过搜索DOM树上节点来获取到需要的对象</li><li>clientHeigh：元素的像素高度，包含元素的高度+内边距，不包含水平滚动条，边框和外边距。</li><li>offsetHeight：元素的像素高度，包含元素的高度，垂直内边距和边框，水平滚动条的高度，且是一个整数。</li><li>scrollHeight：元素内容的高度，包括溢出的不可见内容。</li><li>offsetLeft：返回元素左上角相对于offsetParent的左边界的偏移像素值。</li><li>audio标签存在自带的监听器，可以监听音频的播放、暂停、停止、音量调整等事件。也快有用于监听时间的改变，并可以根据监听，实现对应的函数方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听音频播放事件</span></span><br><span class="line">audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>,setOffset)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS包含块</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/</guid>
      <pubDate>Mon, 17 Mar 2025 04:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;你不知道的-CSS-之包含块&quot;&gt;&lt;a href=&quot;#你不知道的-CSS-之包含块&quot; class=&quot;headerlink&quot; title=&quot;你不知道的 CSS 之包含块&quot;&gt;&lt;/a&gt;你不知道的 CSS 之包含块&lt;/h1&gt;&lt;p&gt;包含块英语全称为&lt;strong&gt;contai</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="你不知道的-CSS-之包含块"><a href="#你不知道的-CSS-之包含块" class="headerlink" title="你不知道的 CSS 之包含块"></a>你不知道的 CSS 之包含块</h1><p>包含块英语全称为<strong>containing block</strong>，实际上平时你在书写 CSS 时，大多数情况下你是感受不到它的存在，因此你不知道这个知识点也是一件很正常的事情。但是这玩意儿是确确实实存在的，在 CSS 规范中也是明确书写了的：</p><p><em><a href="https://drafts.csswg.org/css2/#containing-block-details">https://drafts.csswg.org/css2/#containing-block-details</a></em></p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-142459.png" alt="image-20220814222458695" style="zoom:50%;" /><p>并且，如果你不了解它的运作机制，有时就会出现一些你认为的莫名其妙的现象。</p><p>那么，这个包含块究竟说了什么内容呢？</p><p>说起来也简单，<strong>就是元素的尺寸和位置，会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值（比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</strong></p><p>来吧，少年，让我们从最简单的 case 开始看。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143153.png" alt="image-20220814223152726" style="zoom: 50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请仔细阅读上面的代码，然后你认为 div.item 这个盒子的宽高是多少？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143451.png" alt="image-20220814223451349" style="zoom: 33%;" /><p>相信你能够很自信的回答这个简单的问题，div.item 盒子的 width 为 250px，height 为 150px。</p><p>这个答案确实是没有问题的，但是如果我追问你是怎么得到这个答案的，我猜不了解包含块的你大概率会说，因为它的父元素 div.container 的 width 为 500px，50% 就是 250px，height 为 300px，因此 50% 就是 150px。</p><p>这个答案实际上是不准确的。正确的答案应该是，<strong>div.item 的宽高是根据它的包含块来计算的</strong>，而这里包含块的大小，正是这个元素最近的祖先块元素的内容区。</p><p>因此正如我前面所说，<strong>很多时候你都感受不到包含块的存在。</strong></p><p>包含块分为两种，一种是根元素（HTML 元素）所在的包含块，被称之为初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</p><p>另外一种是对于非根元素，对于非根元素的包含块判定就有几种不同的情况了。大致可以分为如下几种：</p><ul><li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的块容器（block container）的内容区域（content area）的边缘建立。</li><li>如果 position 属性是 fixed，那么包含块由视口建立。</li><li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li></ul><p>前面两条实际上都还比较好理解，第三条往往是初学者容易比较忽视的，我们来看一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先阅读上面的代码，然后你能在脑海里面想出其大致的样子么？或者用笔和纸画一下也行。</p><p>公布正确答案：</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-153548.png" alt="image-20220814233548188" style="zoom: 33%;" /><p>怎么样？有没有和你所想象的对上？</p><p>其实原因也非常简单，根据上面的第三条规则，对于 div.item2 来讲，它的包含块应该是 div.container，而非 div.item。</p><p>如果你能把上面非根元素的包含块判定规则掌握，那么关于包含块的知识你就已经掌握 80% 了。</p><p>实际上对于非根元素来讲，包含块还有一种可能，那就是如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：</p><ul><li>transform 或 perspective 的值不是 none</li><li>will-change 的值是 transform 或 perspective </li><li>filter 的值不是 none 或 will-change 的值是 filter(只在 Firefox 下生效). </li><li>contain 的值是 paint (例如: contain: paint;)</li></ul><p>我们还是来看一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="comment">/* 新增代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对于上面的代码只新增了一条声明，那就是 transform: rotate(0deg)，此时的渲染效果却发生了改变，如下图所示：</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154347.png" alt="image-20220814234347149" style="zoom:33%;" /><p>可以看到，此时对于 div.item2 来讲，包含块就变成了 div.item。</p><p>好了，到这里，关于包含块的知识就基本讲完了。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" /><p>我们再把 CSS 规范中所举的例子来看一下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Illustration of containing blocks<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>This is text in the first paragraph...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span></span><br><span class="line">        This is text</span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">id</span>=<span class="string">&quot;em1&quot;</span>&gt;</span></span><br><span class="line">          in the</span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;strong1&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          paragraph.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是一段简单的 HTML 代码，在没有添加任何 CSS 代码的情况下，你能说出各自的包含块么？</p><p>对应的结果如下：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>body</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>p2</td></tr><tr><td>strong1</td><td>p2</td></tr></tbody></table><p>首先 HTML 作为根元素，对应的包含块就是前面我们所说的初始包含块，而对于 body 而言，这是一个 static 定位的元素，因此该元素的包含块参照第一条为 html，以此类推 div1、p1、p2 以及 em1 的包含块也都是它们的父元素。</p><p>不过 strong1 比较例外，它的包含块确实 p2，而非 em1。为什么会这样？建议你再把非根元素的第一条规则读一下：</p><ul><li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的<strong>块容器（block container）</strong>的内容区域（content area）的边缘建立。</li></ul><p>没错，因为 em1 不是块容器，而包含块是<strong>离它最近的块容器</strong>的内容区域，所以是 p2。</p><p>接下来添加如下的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码我们对 div1 进行了定位，那么此时的包含块会发生变化么？你可以先在自己思考一下。</p><p>答案如下：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>p2</td></tr><tr><td>strong1</td><td>p2</td></tr></tbody></table><p>可以看到，这里 div1 的包含块就发生了变化，变为了初始包含块。这里你可以参考前文中的这两句话：</p><ul><li>初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</li><li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li></ul><p>是不是一下子就理解了。没错，因为我们对 div1 进行了定位，因此它会应用非根元素包含块计算规则的第三条规则，寻找离它最近的  position 的值不是 static 的祖先元素，不过显然 body 的定位方式为 static，因此 div1 的包含块最终就变成了初始包含块。</p><p>接下来我们继续修改我们的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#em1</span>  &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们对 em1 同样进行了 absolute 绝对定位，你想一想会有什么样的变化？</p><p>没错，聪明的你大概应该知道，em1 的包含块不再是 p2，而变成了 div1，而 strong1 的包含块也不再是 p2 了，而是变成了 em1。</p><p>如下表所示：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>div1（因为定位了，参阅非根元素包含块确定规则的第三条）</td></tr><tr><td>strong1</td><td>em1（因为 em1 定位了，其包含块将成为最近定位的元素）</td></tr></tbody></table><p>好了，这就是 CSS 规范中所举的例子。如果你全都能看明白，以后你还能跟别人说你是看过这一块知识对应的 CSS 规范的人。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-013519.png" alt="image-20220815093518833" style="zoom:33%;" /><p>另外，关于包含块的知识，在 MDN 上除了解说了什么是包含块以外，也举出了很多简单易懂的示例。</p><p>具体你可以移步到：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block</a></em></p><p>好了，这就是有关包含块的所有内容了，你学会了么？-）</p><hr><p>-<em>上述文档来源渡一</em>-</p><h2 id="个人归纳总结"><a href="#个人归纳总结" class="headerlink" title="个人归纳总结"></a>个人归纳总结</h2><ul><li>一个元素的几何信息是由它的包含块决定的。在布局步骤时，根据元素的包含块来确认该元素的宽高，位置等几何信息。</li><li>对于标准文档流布局来说，一个元素的包含块就是他的父元素，即最近的祖先元素</li><li>对于绝对定位的元素来说，它的包含块是最近开启定位的祖先元素。而使用position：fixed的元素，它的包含块就是视口。</li></ul>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/CSS/">CSS</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS属性计算过程</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</guid>
      <pubDate>Mon, 17 Mar 2025 03:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;CSS-属性计算过程&quot;&gt;&lt;a href=&quot;#CSS-属性计算过程&quot; class=&quot;headerlink&quot; title=&quot;CSS 属性计算过程&quot;&gt;&lt;/a&gt;CSS 属性计算过程&lt;/h1&gt;&lt;p&gt;你是否了解 CSS 的属性计算过程呢？&lt;/p&gt;
&lt;p&gt;有的同学可能会讲，CS</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="CSS-属性计算过程"><a href="#CSS-属性计算过程" class="headerlink" title="CSS 属性计算过程"></a>CSS 属性计算过程</h1><p>你是否了解 CSS 的属性计算过程呢？</p><p>有的同学可能会讲，CSS属性我倒是知道，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 CSS 代码中，p 是元素选择器，color 就是其中的一个 CSS 属性。</p><p>但是要说 CSS 属性的计算过程，还真的不是很清楚。</p><p>没关系，通过此篇文章，能够让你彻底明白什么是 CSS 属性的计算流程。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060434.png" alt="image-20220813140434032" style="zoom:50%;" /><p>首先，不知道你有没有考虑过这样的一个问题，假设在 HTML 中有这么一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码也非常简单，就是在 body 中有一个 h1 标题而已，该 h1 标题呈现出来的外观是如下：</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060724.png" alt="image-20220813140724136" style="zoom:50%;" /><p>目前我们没有设置该 h1 的任何样式，但是却能看到该 h1 有一定的默认样式，例如有默认的字体大小、默认的颜色。</p><p>那么问题来了，我们这个 h1 元素上面除了有默认字体大小、默认颜色等属性以外，究竟还有哪些属性呢？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014216.png" alt="image-20220815094215982" style="zoom:30%;" /><p>答案是<strong>该元素上面会有 CSS 所有的属性。</strong>你可以打开浏览器的开发者面板，选择【元素】，切换到【计算样式】，之后勾选【全部显示】，此时你就能看到在此 h1 上面所有 CSS 属性对应的值。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-061516.png" alt="image-20220813141516153"></p><p>换句话说，<strong>我们所书写的任何一个 HTML 元素，实际上都有完整的一整套 CSS 样式</strong>。这一点往往是让初学者比较意外的，因为我们平时在书写 CSS 样式时，往往只会书写必要的部分，例如前面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这往往会给我们造成一种错觉，认为该 p 元素上面就只有 color 属性。而真实的情况确是，任何一个 HTML 元素，都有一套完整的 CSS 样式，只不过你没有书写的样式，<strong>大概率可能</strong>会使用其默认值。例如上图中 h1 一个样式都没有设置，全部都用的默认值。</p><p>但是注意，我这里强调的是“大概率可能”，难道还有我们“没有设置值，但是不使用默认值”的情况么？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014459.png" alt="image-20220815094458940" style="zoom:25%;" /><p>嗯，确实有的，所以我才强调你要了解“CSS 属性的计算过程”。</p><p>总的来讲，属性值的计算过程，分为如下这么 <em>4</em> 个步骤：</p><ul><li>确定声明值</li><li>层叠冲突</li><li>使用继承</li><li>使用默认值</li></ul><h2 id="确定声明值"><a href="#确定声明值" class="headerlink" title="确定声明值"></a>确定声明值</h2><p>首先第一步，是确定声明值。所谓声明值就是作者自己所书写的 CSS 样式，例如前面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们声明了 p 元素为红色，那么就会应用此属性设置。</p><p>当然，除了作者样式表，一般浏览器还会存在“用户代理样式表”，简单来讲就是浏览器内置了一套样式表。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-063500.png" alt="image-20220813143500066"></p><p>在上面的示例中，作者样式表中设置了 color 属性，而用户代理样式表（浏览器提供的样式表）中设置了诸如 display、margin-block-start、margin-block-end、margin-inline-start、margin-inline-end 等属性对应的值。</p><p>这些值目前来讲也没有什么冲突，因此最终就会应用这些属性值。</p><h2 id="层叠冲突"><a href="#层叠冲突" class="headerlink" title="层叠冲突"></a>层叠冲突</h2><p>在确定声明值时，可能出现一种情况，那就是声明的样式规则发生了冲突。</p><p>此时会进入解决层叠冲突的流程。而这一步又可以细分为下面这三个步骤：</p><ul><li>比较源的重要性</li><li>比较优先级</li><li>比较次序</li></ul><p>来来来，我们一步一步来看。</p><h3 id="比较源的重要性"><a href="#比较源的重要性" class="headerlink" title="比较源的重要性"></a>比较源的重要性</h3><p>当不同的 CSS 样式来源拥有相同的声明时，此时就会根据样式表来源的重要性来确定应用哪一条样式规则。</p><p>那么问题来了，咱们的样式表的源究竟有几种呢？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-100047.png" alt="image-20220823180047075" style="zoom:40%;" /><p>整体来讲有三种来源：</p><ul><li>浏览器会有一个基本的样式表来给任何网页设置默认样式。这些样式统称<strong>用户代理样式</strong>。</li><li>网页的作者可以定义文档的样式，这是最常见的样式表，称之为<strong>页面作者样式</strong>。</li><li>浏览器的用户，可以使用自定义样式表定制使用体验，称之为<strong>用户样式</strong>。</li></ul><p>对应的重要性顺序依次为：页面作者样式 &gt; 用户样式 &gt; 用户代理样式</p><p>更详细的来源重要性比较，可以参阅 <em>MDN</em>：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade</a></em></p><p>我们来看一个示例。</p><p>例如现在有<strong>页面作者样式表</strong>和<strong>用户代理样式表</strong>中存在属性的冲突，那么会以作者样式表优先。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-064222.png" alt="image-20220813144222152"></p><p>可以明显的看到，作者样式表和用户代理样式表中同时存在的 display 属性的设置，最终作者样式表干掉了用户代理样式表中冲突的属性。这就是第一步，根据不同源的重要性来决定应用哪一个源的样式。</p><h3 id="比较优先级"><a href="#比较优先级" class="headerlink" title="比较优先级"></a>比较优先级</h3><p>那么接下来，如果是在在同一个源中有样式声明冲突怎么办呢？此时就会进行样式声明的优先级比较。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> <span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，同属于<strong>页面作者样式</strong>，源的重要性是相同的，此时会以选择器的权重来比较重要性。</p><p>很明显，上面的选择器的权重要大于下面的选择器，因此最终标题呈现为 <em>50px</em>。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-09-16-071546.png" alt="image-20210916151546500" style="zoom: 40%;" /><p>可以看到，落败的作者样式在 <em>Elements&gt;Styles</em> 中会被划掉。</p><p>有关选择器权重的计算方式，不清楚的同学，可以进入此传送门：<em><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity</a></em></p><h3 id="比较次序"><a href="#比较次序" class="headerlink" title="比较次序"></a>比较次序</h3><p>经历了上面两个步骤，大多数的样式声明能够被确定下来。但是还剩下最后一种情况，那就是样式声明既是同源，权重也相同。</p><p>此时就会进入第三个步骤，比较样式声明的次序。</p><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，同样都是<strong>页面作者样式</strong>，<strong>选择器的权重也相同</strong>，此时位于下面的样式声明会层叠掉上面的那一条样式声明，最终会应用 <em>20px</em> 这一条属性值。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-103928.png" alt="image-20220823183928330"></p><p>至此，样式声明中存在冲突的所有情况，就全部被解决了。</p><h2 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h2><p>层叠冲突这一步完成后，解决了相同元素被声明了多条样式规则究竟应用哪一条样式规则的问题。</p><p>那么如果没有声明的属性呢？此时就使用默认值么？</p><p><em>No、No、No</em>，别急，此时还有第三个步骤，那就是使用继承而来的值。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们针对 div 设置了 color 属性值为红色，而针对 p 元素我们没有声明任何的属性，但是由于 color 是可以继承的，因此 p 元素从最近的 div 身上继承到了 color 属性的值。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065102.png" alt="image-20220813145102293"></p><p>这里有两个点需要同学们注意一下。</p><p>首先第一个是我强调了是<strong>最近的</strong> div 元素，看下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065653.png" alt="image-20220813145652726"></p><p>因为这里并不涉及到选中 p 元素声明 color 值，而是从父元素上面继承到 color 对应的值，因此这里是<strong>谁近就听谁</strong>的，初学者往往会产生混淆，又去比较权重，但是这里根本不会涉及到权重比较，因为压根儿就没有选中到 p 元素。</p><p>第二个就是哪些属性能够继承？</p><p>关于这一点的话，大家可以在 MDN 上面很轻松的查阅到。例如我们以 text-align 为例，如下图所示：</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070148.png" alt="image-20220813150147885"></p><h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><p>好了，目前走到这一步，如果属性值都还不能确定下来，那么就只能是使用默认值了。</p><p>如下图所示：</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070825.png" alt="image-20220813150824752"></p><p>前面我们也说过，一个 HTML 元素要在浏览器中渲染出来，必须具备所有的 CSS 属性值，但是绝大部分我们是不会去设置的，用户代理样式表里面也不会去设置，也无法从继承拿到，因此最终都是用默认值。</p><p>好了，这就是关于 CSS 属性计算过程的所有知识了。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" /><h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><p>好了，学习了今天的内容，让我来用一道面试题测试测试大家的理解程度。</p><p>下面的代码，最终渲染出来的效果，a 元素是什么颜色？p 元素又是什么颜色？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家能说出为什么会呈现这样的结果么？</p><p>解答如下：</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-071941.png" alt="image-20220813151941113"></p><p>实际上原因很简单，因为 a 元素在用户代理样式表中已经设置了 color 属性对应的值，因此会应用此声明值。而在 p 元素中无论是作者样式表还是用户代理样式表，都没有对此属性进行声明，然而由于 color 属性是可以继承的，因此最终 p 元素的 color 属性值通过继承来自于父元素。</p><p>你答对了么？-）</p><hr><p>-<em>EOF</em>-</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/CSS/">CSS</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>浏览器渲染原理</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</guid>
      <pubDate>Sun, 16 Mar 2025 03:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;浏览器渲染原理&quot;&gt;&lt;a href=&quot;#浏览器渲染原理&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染原理&quot;&gt;&lt;/a&gt;浏览器渲染原理&lt;/h2&gt;&lt;p&gt;###面试题：浏览器是如何渲染页面的？&lt;br&gt;当浏览器的网络线程获取到html文档后，会产生一个渲染</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>###面试题：浏览器是如何渲染页面的？<br>当浏览器的网络线程获取到html文档后，会产生一个渲染任务，并将其加入在渲染主线程的消息队列。<br>在事件循环机制下，渲染主线程取出消息队列中的渲染任务，开始渲染流程。<br><img data-src="/blog.github.io/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.JPG" alt="浏览器渲染流程"></p><p>在解析过程中，遇到CSS解析CSS，遇到JS解析JS，为了提高解析效率，浏览器在开始解析前，会创建一个预解析的线程，率先下载HTML中外部CSS文件和外部的JS文件。<br>如果主线程解析到link位置，此时外部的CSS文件还没有下载好，主线程不会等待，而是继续解析HTML，外部的预解析线程会去下载外部的CSS文件并解析成CSSOM树返回给主线程，主线程合并目前生成好的DOM和CSSOM。这就是CSS不会阻塞HTML解析的原因。<br><img data-src="/blog.github.io/images/CSS%E9%A2%84%E8%A7%A3%E6%9E%90.JPG" alt="CSS预解析"><br>如果主线程解析到script位置，会停止解析HTML，转而等待JS文件下载好，并将全局代码解析执行完成后，才继续解析HTML，这是因为JS代码的执行过程中可能会修改当前的DOM树，所以DOM树的生成必须暂停。这就是JS会阻塞HTML解析的原因。<br><img data-src="/blog.github.io/images/JS%E9%A2%84%E8%A7%A3%E6%9E%90.JPG" alt="JS预解析"><br>第一步完成后，会得到DOM树和CSSOM树，浏览器的默认样式，内联样式，外部样式，行内样式均会包含在CSSOM树中。</p><p>渲染的下一步是样式计算：<br>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它最终的样式，称之为Computed Style。<br>在这一过程中，很多预设值会变成绝对值，比如red会变成rgb（255，0，0）;相对单位会变成绝对单位，比如em会变成px。<br>这一步完成后，会得到一颗带有样式的DOM树。</p><p>接下来是布局，布局完成后会得到布局树。<br>布局阶段会依次遍历DOM树的每一个节点，计算每个节点的几何信息。例如节点的宽高，相对包含块的位置。<br>大部分时候，DOM树和布局树并非一一对应。<br>比如display:none的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然DOM树中不存在这些伪元素节点，但它们拥有几何信息，使用会生成到布局树匿名行盒，匿名块盒等等都会导致DOM树和布局树无法一一对应。</p><p>下一步是分层<br>主线程会使用一套复杂的策略对整个布局树中进行分层。<br>分层的好处在于，将来其某一个层改变后，仅会对该层进行后续处理，从而提升效率。<br>滚动条，堆叠上下文，transform，opacity等样式都会或多或少的影响分层结果，也可以通过will-change属性更大程度的影响分层结果。</p><p>再下一步，绘制 paint<br>canvas的绘制是由浏览器开放出来的绘制功能。<br>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><p>分块：Tiles<br>完成绘制之后，主线程会将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。合成线程首先对每个图层进行分块，将其划分为更多的小区域。<br>它会从线程池中拿取多个线程来完成分块工作。</p><p>光栅化Raster :将每个块变成位图，优先处理靠近视图的块。<br>分块完成后，进入光栅化阶段<br>合成线程会将块信息交给GPU进程，以极高的速度完成光栅化。<br>GPU进程会开启多个线程来完成光栅化，并优先处理靠近视口区域的块。<br>光栅化的结果就是一块一块的位图。</p><p>画 draw<br>合成线程拿到每个层，每个块的位图后，生成一个个指引【quad】信息。<br>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转，缩放等变形。变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因。<br>合成线程会把quad提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。</p><p>整个渲染流程分为多个阶段，包括：HTML解析，样式计算，布局，分层，绘制，分块，光栅化，画。每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。<br>这样，整个渲染流程就形成了一套组织严密的生产流水线。<br>渲染主线程的主要工作内容为：parse HTML，computed style，生成layout布局树，对dom树进行分层，绘制dom树。后续步骤由其他线程完成。<br>完整流程：<br><img data-src="/blog.github.io/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.JPG" alt="浏览器渲染的完整流程"></p><h3 id="面试题：什么是reflow？"><a href="#面试题：什么是reflow？" class="headerlink" title="面试题：什么是reflow？"></a>面试题：什么是reflow？</h3><p>reflow的本质是重新计算layout树。<br>当进行了会影响布局树的操作后，需要重新计算布局树，会引发layout。<br>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后再进行计算。所以，改动属性造成的reflow是异步完成的。<br>也同样因为如此，当JS获取布局属性时，就可能造成无法获取到最新的布局信息。<br>浏览器在反复权衡下，最终决定获取属性立即reflow。</p><h3 id="面试题：什么是repaint？"><a href="#面试题：什么是repaint？" class="headerlink" title="面试题：什么是repaint？"></a>面试题：什么是repaint？</h3><p>repaint的本质就是重新根据分层信息计算了绘制指令，<br>当改动了可见样式后，就需要重新计算，会引发repaint。<br>由于元素的布局信息也属于可见样式，所以reflow一定会引发repaint。</p><h3 id="面试题：为什么transform的效率高？"><a href="#面试题：为什么transform的效率高？" class="headerlink" title="面试题：为什么transform的效率高？"></a>面试题：为什么transform的效率高？</h3><p>因为transform既不会影响布局也不会影响绘制指令，影响的只是渲染流程的最后一个【draw】阶段。由于draw阶段在合成线程中，所以transform的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响transform的变化。</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/">浏览器</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>事件循环</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <pubDate>Sat, 15 Mar 2025 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;事件循环&quot;&gt;&lt;a href=&quot;#事件循环&quot; class=&quot;headerlink&quot; title=&quot;事件循环&quot;&gt;&lt;/a&gt;事件循环&lt;/h2&gt;&lt;h3 id=&quot;浏览器的进程模型&quot;&gt;&lt;a href=&quot;#浏览器的进程模型&quot; class=&quot;headerlink&quot; title=&quot;浏</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h3><p>什么是进程？<br>程序运行时需要有自己专属的内存空间，可以把这块内存空间简单的理解为进程。<br>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p><p>什么是线程？<br>一个进程至少有一个线程，所以在进程开启后，会自动创建一个线程来运行代码，该线程称之为主线程。tips：主线程是唯一的，其他线程都是由主线程创建的。当主线程关闭后进程也就关闭了</p><p>如果程序需要同时执行多个代码块，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</p><h3 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h3><p>浏览器是一个多进程多线程的应用程序。内部工作极其复杂。<br>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。<br>最主要的进程有：<br>浏览器进程：主要负责界面显示，用户交互，子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。<br>网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。<br>渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行HTML,CSS,JS代码，解析渲染页面。<br>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</p><h3 id="渲染主线程时如何工作的？"><a href="#渲染主线程时如何工作的？" class="headerlink" title="渲染主线程时如何工作的？"></a>渲染主线程时如何工作的？</h3><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：<br>解析HTML、CSS、计算样式，布局，处理图层，每秒把页面画60次即60HZ（主要是为了用户的浏览感知效果），执行全局JS代码，执行事件处理函数，执行计时器的回调函数。</p><p>思考题：为什么渲染进程不适用多个线程来处理这些事情？</p><p>渲染主线程想出了一个办法来处理同一时间来自多个线程的任务。即开启消息队列。<br>1.在最开始的时候，渲染主线程会进入一个无限循环<br>2.每一次循环会检查消息队列中是否有任务存在。如果有，则会取出第一个任务并执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。<br>3.其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务使，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务。<br>整个过程被称之为事件循环。<br><img data-src="/blog.github.io/images/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA.JPG" alt="事件循环"></p><p>##何为异步<br>代码在执行过程中，会遇到一些无法立即处理的任务，比如：<br>计时完成后需要执行的任务–setTimeout()，setInterval()<br>网络通信完成后需要执行的任务–XHR，Fetch<br>用户操作后需要执行的任务–addEventListener()<br>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于【阻塞】的状态，从而导致浏览器【卡死】。例如计时器计时五秒钟，则不会等待五秒钟后才开始处理。</p><p>所以计时器的原理：<br>1.渲染主线程会创建一个计时器对象，并将其添加到消息队列中。<br>2.当渲染主线程执行到计时器对象时，会通知计时器线程开始计时，并将计时器对象对应的任务结束。<br>3.渲染主线程继续执行消息队列中待处理的任务。计时线程开始计时<br>4.计时结束后，计时线程会将计时器对象对应的任务添加到消息队列中。<br>这就是异步的处理方式，渲染主线程永远不会阻塞。<br><img data-src="/blog.github.io/images/%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B.JPG" alt="异步操作"></p><p>###面试题：如何解释js中的异步？<br>js是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个，而渲染主线程承担着很多的工作，渲染页面，执行JS都在其中运行。<br>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中很多其他任务无法得到执行。<br>这样一来，一方面会导致繁忙的主线程白白的浪费时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br>所以，浏览器采用异步的方式避免，具体做法是当某些任务发生时，比如计时器，网络，事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码，当其他线程完成时，将事先传递的回调函数包装成任务（任务是一个对象！！），加入到消息队列的末尾排队，等待主线程调度执行。<br>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><p>###js是怎么阻碍渲染的？<br>因为js的渲染任务和一些计时器的任务都在渲染主线程上运行。当一个定义的计时器的函数被调用后，计时器之前的修改内容不会立即在主线程上渲染，而是会加载在消息队列中，等待主线程结束计时器的任务后，才会渲染。<br>因此会导致即使值发生了修改，但是不会立即渲染在页面。同理如果存在这种情况点击其他事件也不会立即响应，因为事件也在消息队列中，等待主线程执行。<br><img data-src="/blog.github.io/images/%E8%AE%A1%E6%97%B6%E5%99%A8%E5%AF%BC%E8%87%B4%E9%98%BB%E5%A1%9E.JPG" alt="计时器导致阻塞"></p><p>###任务有优先级吗？<br>任务没有优先级，在消息队列中先进先出。但是消息队列存在优先级。</p><p>W3C的最新解释：<br>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。<br>浏览器必须准备好一个微队列，微队列的任务优先所有其他任务执行。</p><p>chrome浏览器的实现，至少包含了下面的队列：<br>延时队列：用于存放计时器到达后的回调任务，优先级【中】<br>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】<br>微队列：用户存放需要最快执行的任务，优先级【最高】</p><p>添加任务到微队列的主要方式主要是使用promise，MutationObserver，requestAnimationFrame等。<br>promise：使用promise.resolve().then()方法可以将任务添加到微队列。</p><p>！！！渲染主队列会将代码中所有需要执行的任务添加在消息队列中，按照消息队列的顺序执行，根据消息队列中不同类型的任务放置在不同的队列上，但是微队列优先级最高，所以微队列中的任务会优先执行。等待微队列中的任务执行完毕后，在看交互队列。其中使用promise会将任务直接防止在微队列中。</p><p>面试题：阐述一下JS的事件循环机制：<br>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。<br>在chrome的源码中，它开启一个不会结束的for循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。<br>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。<br>根据W3C的最新解释，每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。但是浏览器必须准备好一个微队列，微队列的任务优先所有其他任务执行。</p><p>面试题：JS中的计时器能做到精确计时吗？为什么？<br>不行，<br>1.计算机硬件没有原子钟，无法做到精确计时。<br>2.操作系统的计时函数本身就有少量偏差，因为js的计时器最终调用的是操作系统的函数，也就是有些偏差。<br>3.按照W3C的标准，浏览器实现计时器时，如果嵌套层数超过五层，则会带有4ms的等待时间。<br>4.受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此带来了偏差。</p><p>原子钟（英文：atomic clock），是一种利用原子量子特性产生高度稳定且准确频率信号的仪器，是目前测量时间最精确的工具。原子钟的运作核心是利用原子作为基准物质，构建一个类似电子振荡器的装置，当振荡器产生的电磁波频率与原子固有的振动频率相匹配时，原子将经历“能级跃迁”，表明振荡器发射的频率与原子的共振频率相一致，构成了原子钟运作的基本原理</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/">浏览器</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/">事件循环</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>周记</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/</guid>
      <pubDate>Sat, 08 Mar 2025 03:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;周记&quot;&gt;&lt;a href=&quot;#周记&quot; class=&quot;headerlink&quot; title=&quot;周记&quot;&gt;&lt;/a&gt;周记&lt;/h1&gt;&lt;h2 id=&quot;主要工作&quot;&gt;&lt;a href=&quot;#主要工作&quot; class=&quot;headerlink&quot; title=&quot;主要工作&quot;&gt;&lt;/a&gt;主要工作&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="周记"><a href="#周记" class="headerlink" title="周记"></a>周记</h1><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><h3 id="3-3-3-4"><a href="#3-3-3-4" class="headerlink" title="3.3-3.4"></a>3.3-3.4</h3><p>编写了自己的毕业设计。实现了数据分析，数据可视化等功能。并使用nginx对项目进行反向代理。<br>主要技术栈为vue3+iview+echarts+python+flask+mysql。<br>线下面试了一家公司，面试岗位为前端开发（实习生）。<br>面试流程：一套笔试题，主要问到原型链，this指向，call，apply，bind。vue23的区别等技术栈。<br>但面试结束后告知我面试的岗位不招人了。。。。。。</p><h3 id="3-5-3-6"><a href="#3-5-3-6" class="headerlink" title="3.5-3.6"></a>3.5-3.6</h3><p>接了一单毕业设计，实现多种功能，按照甲方的需求实现代码。主要针对于python爬虫，数据分析，数据可视化，Hadoop集群和hive。</p><h3 id="3-7-3-8"><a href="#3-7-3-8" class="headerlink" title="3.7-3.8"></a>3.7-3.8</h3><p>1.面试了一家深圳的公司，面试岗位为前端开发（实习生）。主要面试了promise，echarts和个人项目的痛点。<br>2.修改了个人博客，增加了一些next主题的各种配置，添加了评论功能，修改了主题样式，没之前那么华丽了。</p><h2 id="主要收获"><a href="#主要收获" class="headerlink" title="主要收获"></a>主要收获</h2><p>1.学会了使用DrissionPage对淘宝的母婴商品进行数据爬取，并进行数据分析和数据可视化。<br>2.对于简单系统的搭建有一定的了解。稍微熟悉了使用nginx反向代理。</p><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><p>能约到面试，但是自身的基础还是不太牢固。还是需要对于js，vue，css，html等基础知识进行巩固。</p><h2 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h2><p>1.做一个简单的小程序项目，熟悉一下小程序开发。<br>2.争取开发一个网站，实现web前端知识的模拟练题。而不是只靠背，最好配合代码块。</p><h2 id="3-10"><a href="#3-10" class="headerlink" title="3.10"></a>3.10</h2><p>场景：用户对于分页板块，进行多次点击页面按钮，发送了多次请求，需要正确的响应到最后一次的点击页面。<br>昨天复习到了一个知识点。关于xhr.abort()方法，可以取消xhr请求。可以用于用户多次点击按钮，重复多次请求时，确认正确的点击页面，取消上一次的请求。<br>涉及后端的话，可以给每次请求添加一个reqest_id，在响应中返回该id，前端根据id判断是否是最后一次的请求。<br>添加londing状态，从根源上解决问题。（降低用户体验）</p><h2 id="3-10-3-14"><a href="#3-10-3-14" class="headerlink" title="3.10 -3.14"></a>3.10 -3.14</h2><p>完整整个毕业论文整体流程和内容，是否完整需要指导老师的查看后再次修改。</p><h2 id="3-14-3-20"><a href="#3-14-3-20" class="headerlink" title="3.14-3.20"></a>3.14-3.20</h2><p>学习完渡一教育的六节大师课，补全了一些知识基础。更加感觉自己目前存在的技术栈还存在很多的问题。</p><h2 id="3-24"><a href="#3-24" class="headerlink" title="3.24"></a>3.24</h2><p>Nan &#x3D;&#x3D;&#x3D; Nan 为false<br>+0 &#x3D;&#x3D;&#x3D; -0 为true</p><h2 id="6-9"><a href="#6-9" class="headerlink" title="6.9"></a>6.9</h2><p>久违的周记，目前在江西中汇云链公司实习，嗯怎么说呢，公司还行，但学习不到太多的知识，并非偏向于软件方向。再接再厉吧，尽量在实习中巩固自己的基础。</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%91%A8%E8%AE%B0/">周记</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%91%A8%E8%AE%B0/">周记</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
