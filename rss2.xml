<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>37的技术博客</title>
    <link>https://sheleftwithregrets.github.io/blog.github.io/</link>
    
    <atom:link href="https://sheleftwithregrets.github.io/blog.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>选择有时候比努力更重要</description>
    <pubDate>Thu, 20 Mar 2025 03:27:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>购物车动态效果</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C/</guid>
      <pubDate>Thu, 20 Mar 2025 03:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;使用面向对象编程的思想实现购物车效果&quot;&gt;&lt;a href=&quot;#使用面向对象编程的思想实现购物车效果&quot; class=&quot;headerlink&quot; title=&quot;使用面向对象编程的思想实现购物车效果&quot;&gt;&lt;/a&gt;使用面向对象编程的思想实现购物车效果&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="使用面向对象编程的思想实现购物车效果"><a href="#使用面向对象编程的思想实现购物车效果" class="headerlink" title="使用面向对象编程的思想实现购物车效果"></a>使用面向对象编程的思想实现购物车效果</h2><ul><li>主要通过使用js来实现获取网页页面的数据和简单的数据控制<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UIGoods</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">g</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = g;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">choose</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getTotalPrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">price</span> * <span class="variable language_">this</span>.<span class="property">choose</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isChoose</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">choose</span> &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">choose</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">choose</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">choose</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对uiData中定义的方法进行简单封装，同时填加主要的数据逻辑<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UIData</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> uiGoods = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;goods.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> uig = <span class="keyword">new</span> <span class="title class_">UIGoods</span>(goods[i]);</span><br><span class="line">            uiGoods.<span class="title function_">push</span>(uig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiGoods</span> = uiGoods;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deliveryThreshold</span> = <span class="number">30</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deliveryPrice</span> = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算所选的所有商品的总价</span></span><br><span class="line">    <span class="title function_">getTotalPrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">uiGoods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="title function_">isChoose</span>())&#123;</span><br><span class="line">                sum += <span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="title function_">getTotalPrice</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加选中商品的数量</span></span><br><span class="line">    <span class="title function_">increase</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiGoods</span>[index].<span class="title function_">increase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少选中商品的数量</span></span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiGoods</span>[index].<span class="title function_">decrease</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算总共选中的商品数量</span></span><br><span class="line">    <span class="title function_">getTotalChooseNumber</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">uiGoods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="title function_">isChoose</span>())&#123;</span><br><span class="line">                sum += <span class="variable language_">this</span>.<span class="property">uiGoods</span>[i].<span class="property">choose</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 购物车中有没有商品</span></span><br><span class="line">    <span class="title function_">hasGoodsInCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getTotalChooseNumber</span>() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否满足配送条件</span></span><br><span class="line">    <span class="title function_">isDelivery</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getTotalPrice</span>() &gt;= <span class="variable language_">this</span>.<span class="property">deliveryThreshold</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否勾选</span></span><br><span class="line">    <span class="title function_">isChoose</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">uiGoods</span>[index].<span class="title function_">isChoose</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>最后通过UI类来实现购物车的动态效果，实现页面中各种动态情况下的各种效果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UI</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiData</span> = <span class="keyword">new</span> <span class="title class_">UIData</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span> = &#123;</span><br><span class="line">            <span class="attr">goodsContainer</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goods-list&#x27;</span>),</span><br><span class="line">            <span class="attr">deliveryPrice</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car-tip&#x27;</span>),</span><br><span class="line">            <span class="attr">totalPrice</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car-total&#x27;</span>),</span><br><span class="line">            <span class="attr">footerPay</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-pay&#x27;</span>),</span><br><span class="line">            <span class="attr">footerPayInnerSpan</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-pay span&#x27;</span>),</span><br><span class="line">            <span class="attr">car</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car&#x27;</span>),</span><br><span class="line">            <span class="attr">carInner</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.footer-car span&#x27;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> carRect = <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">var</span> jumpTarget = &#123;</span><br><span class="line">            <span class="attr">x</span>:carRect.<span class="property">left</span> + carRect.<span class="property">width</span>/<span class="number">2</span>,</span><br><span class="line">            <span class="attr">y</span>:carRect.<span class="property">top</span> + carRect.<span class="property">height</span>/<span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">jumpTarget</span> = jumpTarget;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createHTML</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateFooter</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">listenEvent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听各种事件 </span></span><br><span class="line">    <span class="title function_">listenEvent</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;animationend&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;animate&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据数据创建商品列表的元素</span></span><br><span class="line">    <span class="title function_">createHTML</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="comment">//1.生成HTML字符串，需要解析html，开发效率高，执行效率低</span></span><br><span class="line">       <span class="comment">//2.一个一个创建元素 开发效率低，执行效率高</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">uiGoods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> g = <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">uiGoods</span>[i];</span><br><span class="line">            html += <span class="string">`&lt;div class=&quot;goods-item&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;img src=&quot;<span class="subst">$&#123;g.data.pic&#125;</span>&quot; alt=&quot;&quot; class=&quot;goods-pic&quot; /&gt;</span></span><br><span class="line"><span class="string">          &lt;div class=&quot;goods-info&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h2 class=&quot;goods-title&quot;&gt;<span class="subst">$&#123;g.data.title&#125;</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;goods-desc&quot;&gt;</span></span><br><span class="line"><span class="string">              <span class="subst">$&#123;g.data.desc&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;goods-sell&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;月售 <span class="subst">$&#123;g.data.sellNumber&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;好评率<span class="subst">$&#123;g.data.favorRate&#125;</span>%&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;goods-confirm&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;p class=&quot;goods-price&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;span class=&quot;goods-price-unit&quot;&gt;￥&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;g.data.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;div class=&quot;goods-btns&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;i index=&quot;<span class="subst">$&#123;i&#125;</span>&quot; class=&quot;iconfont i-jianhao&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;i index=&quot;<span class="subst">$&#123;i&#125;</span>&quot; class=&quot;iconfont i-jiajianzujianjiahao&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="property">innerHTML</span> = html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加选中商品的数量</span></span><br><span class="line">    <span class="title function_">increase</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">increase</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateGoodsItem</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateFooter</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">jump</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少选中商品的数量</span></span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">decrease</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateGoodsItem</span>(index);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateFooter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新某个商品元素的显示状态</span></span><br><span class="line">    <span class="title function_">updateGoodsItem</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> goodsDom = <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="property">children</span>[index]</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">isChoose</span>(index))&#123;</span><br><span class="line">            goodsDom.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            goodsDom.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        goodsDom.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goods-btns span&#x27;</span>).<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">uiGoods</span>[index].<span class="property">choose</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新页脚</span></span><br><span class="line">    <span class="title function_">updateFooter</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 实现一些动态的变化</span></span><br><span class="line">        <span class="keyword">var</span> currentPrice = <span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">getTotalPrice</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">deliveryPrice</span>.<span class="property">textContent</span> = <span class="string">`配送费￥<span class="subst">$&#123;<span class="variable language_">this</span>.uiData.deliveryPrice&#125;</span>`</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">totalPrice</span>.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;currentPrice.toFixed(<span class="number">2</span>)&#125;</span>`</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">isDelivery</span>())&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">footerPay</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">footerPay</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">            <span class="comment">// 四舍五入获得还缺多少钱</span></span><br><span class="line">            <span class="keyword">var</span> needPay = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="property">deliveryThreshold</span> - currentPrice);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">footerPayInnerSpan</span>.<span class="property">textContent</span> = <span class="string">`还差￥<span class="subst">$&#123;needPay&#125;</span>元起送`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">uiData</span>.<span class="title function_">hasGoodsInCar</span>())&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">carInner</span>.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.uiData.getTotalChooseNumber()&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加动画</span></span><br><span class="line">    <span class="title function_">carAnimate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">car</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;animate&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抛物线跳跃的元素</span></span><br><span class="line">    <span class="title function_">jump</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> btnAdd = <span class="variable language_">this</span>.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="property">children</span>[index].<span class="title function_">querySelector</span>(<span class="string">&#x27;.i-jiajianzujianjiahao&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> rect = btnAdd.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">var</span> start = &#123;</span><br><span class="line">            <span class="attr">x</span>:rect.<span class="property">left</span>,</span><br><span class="line">            <span class="attr">y</span>:rect.<span class="property">top</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> div =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.<span class="property">className</span> = <span class="string">&#x27;add-to-car&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        i.<span class="property">className</span> = <span class="string">&#x27;iconfont i-jiajianzujianjiahao&#x27;</span></span><br><span class="line"></span><br><span class="line">        div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate(<span class="subst">$&#123;start.x&#125;</span>px,<span class="subst">$&#123;start.y&#125;</span>px)`</span></span><br><span class="line">        i.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`tran`</span></span><br><span class="line">        </span><br><span class="line">        div.<span class="title function_">appendChild</span>(i);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">        <span class="comment">// 强行渲染</span></span><br><span class="line">        div.<span class="property">clientWidth</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置结束位置</span></span><br><span class="line">        div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;<span class="variable language_">this</span>.jumpTarget.x&#125;</span>px)`</span></span><br><span class="line">        i.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(<span class="subst">$&#123;<span class="variable language_">this</span>.jumpTarget.y&#125;</span>px)`</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="comment">// 动画结束后移除元素</span></span><br><span class="line">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            div.<span class="title function_">remove</span>();</span><br><span class="line">            that.<span class="title function_">carAnimate</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">once</span>:<span class="literal">true</span>   </span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ui = <span class="keyword">new</span> <span class="title function_">UI</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line">ui.<span class="property">doms</span>.<span class="property">goodsContainer</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> target = e.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">if</span>(target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;i-jianhao&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">var</span> index =+ target.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">        ui.<span class="title function_">decrease</span>(index);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;i-jiajianzujianjiahao&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">var</span> index =+ target.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">        ui.<span class="title function_">increase</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h2 id="个人收获"><a href="#个人收获" class="headerlink" title="个人收获"></a>个人收获</h2><ul><li>学习了面向对象编程的思想，对js的一些数据结构和方法有了更深入的理解</li><li>使用element.classList.add()方法可以为元素添加类，使用element.classList.remove()方法可以移除类。这个element是通过document.querySelector()方法获取的。</li><li>Element.getBoundingClientRect() 方法返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。</li><li>使用element.addEventListner()方法可以为对象添加监听事件，并对事件进行处理。可以通过设置once:true参数来设置事件只执行一次。</li><li>使用html+&#x3D;语法可以动态生成HTML字符串,然后使用innerHTML属性动态添加到页面中。也可以使用${}来对变量进行插值。</li><li>使用document.querySelector()方法获取的值，可以通过使用textcontent来对其进行内容上的修改。</li><li>使用translateX可以实现X轴的位移，使用translateY可以实现Y轴的位移。</li></ul>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>简单音乐播放器的实现</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</guid>
      <pubDate>Tue, 18 Mar 2025 04:25:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;HTML实现&quot;&gt;&lt;a href=&quot;#HTML实现&quot; class=&quot;headerlink&quot; title=&quot;HTML实现&quot;&gt;&lt;/a&gt;HTML实现&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="HTML实现"><a href="#HTML实现" class="headerlink" title="HTML实现"></a>HTML实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;mp3路径&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用html中定义音频的标签audio，通过使用controls属性，来显示音频控制器来控制音频控制。通过使用ul来展示歌词部分。</p><h2 id="CSS实现"><a href="#CSS实现" class="headerlink" title="CSS实现"></a>CSS实现</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0</span>.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highLight</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过css来实现高亮，隐藏超出container块的内容。通过list-style来隐藏列表项。</p><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置ul元素的偏移量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setOffset</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="title function_">findIndex</span>();</span><br><span class="line">    <span class="keyword">var</span> offSet =  liHeight*(index+<span class="number">1</span>) - containerHeight/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(offSet &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        offSet = <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(offSet &gt; maxOffset)&#123;</span><br><span class="line">        offSet = maxOffset</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除之前存在高亮的样式</span></span><br><span class="line">    <span class="keyword">var</span> li = doms.<span class="property">ul</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.highLight&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (li)&#123;</span><br><span class="line">        li.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;highLight&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加高亮的样式</span></span><br><span class="line">    <span class="keyword">var</span> li = doms.<span class="property">ul</span>.<span class="property">children</span>[index]</span><br><span class="line">    <span class="keyword">if</span> (li)&#123;</span><br><span class="line">        <span class="comment">// li.className = &quot;highLight&quot;</span></span><br><span class="line">        li.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;highLight&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    doms.<span class="property">ul</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(-<span class="subst">$&#123;offSet&#125;</span>px)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要展示如何实现ul元素的偏移.</p><h2 id="获取到的新JavaScript知识"><a href="#获取到的新JavaScript知识" class="headerlink" title="获取到的新JavaScript知识."></a>获取到的新JavaScript知识.</h2><ul><li>使用document.querySelector(“”)<br>文档对象模型Document引用的querySelector()方法返回文档中与指定选择器或选择器组匹配的第一个Element对象。如果找不到匹配项，则返回null。主要通过搜索DOM树上节点来获取到需要的对象</li><li>clientHeigh：元素的像素高度，包含元素的高度+内边距，不包含水平滚动条，边框和外边距。</li><li>offsetHeight：元素的像素高度，包含元素的高度，垂直内边距和边框，水平滚动条的高度，且是一个整数。</li><li>scrollHeight：元素内容的高度，包括溢出的不可见内容。</li><li>offsetLeft：返回元素左上角相对于offsetParent的左边界的偏移像素值。</li><li>audio标签存在自带的监听器，可以监听音频的播放、暂停、停止、音量调整等事件。也快有用于监听时间的改变，并可以根据监听，实现对应的函数方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听音频播放事件</span></span><br><span class="line">audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>,setOffset)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/18/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS包含块</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/</guid>
      <pubDate>Mon, 17 Mar 2025 04:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;你不知道的-CSS-之包含块&quot;&gt;&lt;a href=&quot;#你不知道的-CSS-之包含块&quot; class=&quot;headerlink&quot; title=&quot;你不知道的 CSS 之包含块&quot;&gt;&lt;/a&gt;你不知道的 CSS 之包含块&lt;/h1&gt;&lt;p&gt;包含块英语全称为&lt;strong&gt;contai</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="你不知道的-CSS-之包含块"><a href="#你不知道的-CSS-之包含块" class="headerlink" title="你不知道的 CSS 之包含块"></a>你不知道的 CSS 之包含块</h1><p>包含块英语全称为<strong>containing block</strong>，实际上平时你在书写 CSS 时，大多数情况下你是感受不到它的存在，因此你不知道这个知识点也是一件很正常的事情。但是这玩意儿是确确实实存在的，在 CSS 规范中也是明确书写了的：</p><p><em><a href="https://drafts.csswg.org/css2/#containing-block-details">https://drafts.csswg.org/css2/#containing-block-details</a></em></p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-142459.png" alt="image-20220814222458695" style="zoom:50%;" /><p>并且，如果你不了解它的运作机制，有时就会出现一些你认为的莫名其妙的现象。</p><p>那么，这个包含块究竟说了什么内容呢？</p><p>说起来也简单，<strong>就是元素的尺寸和位置，会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值（比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</strong></p><p>来吧，少年，让我们从最简单的 case 开始看。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143153.png" alt="image-20220814223152726" style="zoom: 50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请仔细阅读上面的代码，然后你认为 div.item 这个盒子的宽高是多少？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143451.png" alt="image-20220814223451349" style="zoom: 33%;" /><p>相信你能够很自信的回答这个简单的问题，div.item 盒子的 width 为 250px，height 为 150px。</p><p>这个答案确实是没有问题的，但是如果我追问你是怎么得到这个答案的，我猜不了解包含块的你大概率会说，因为它的父元素 div.container 的 width 为 500px，50% 就是 250px，height 为 300px，因此 50% 就是 150px。</p><p>这个答案实际上是不准确的。正确的答案应该是，<strong>div.item 的宽高是根据它的包含块来计算的</strong>，而这里包含块的大小，正是这个元素最近的祖先块元素的内容区。</p><p>因此正如我前面所说，<strong>很多时候你都感受不到包含块的存在。</strong></p><p>包含块分为两种，一种是根元素（HTML 元素）所在的包含块，被称之为初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</p><p>另外一种是对于非根元素，对于非根元素的包含块判定就有几种不同的情况了。大致可以分为如下几种：</p><ul><li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的块容器（block container）的内容区域（content area）的边缘建立。</li><li>如果 position 属性是 fixed，那么包含块由视口建立。</li><li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li></ul><p>前面两条实际上都还比较好理解，第三条往往是初学者容易比较忽视的，我们来看一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先阅读上面的代码，然后你能在脑海里面想出其大致的样子么？或者用笔和纸画一下也行。</p><p>公布正确答案：</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-153548.png" alt="image-20220814233548188" style="zoom: 33%;" /><p>怎么样？有没有和你所想象的对上？</p><p>其实原因也非常简单，根据上面的第三条规则，对于 div.item2 来讲，它的包含块应该是 div.container，而非 div.item。</p><p>如果你能把上面非根元素的包含块判定规则掌握，那么关于包含块的知识你就已经掌握 80% 了。</p><p>实际上对于非根元素来讲，包含块还有一种可能，那就是如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：</p><ul><li>transform 或 perspective 的值不是 none</li><li>will-change 的值是 transform 或 perspective </li><li>filter 的值不是 none 或 will-change 的值是 filter(只在 Firefox 下生效). </li><li>contain 的值是 paint (例如: contain: paint;)</li></ul><p>我们还是来看一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="comment">/* 新增代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对于上面的代码只新增了一条声明，那就是 transform: rotate(0deg)，此时的渲染效果却发生了改变，如下图所示：</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154347.png" alt="image-20220814234347149" style="zoom:33%;" /><p>可以看到，此时对于 div.item2 来讲，包含块就变成了 div.item。</p><p>好了，到这里，关于包含块的知识就基本讲完了。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" /><p>我们再把 CSS 规范中所举的例子来看一下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Illustration of containing blocks<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>This is text in the first paragraph...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span></span><br><span class="line">        This is text</span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">id</span>=<span class="string">&quot;em1&quot;</span>&gt;</span></span><br><span class="line">          in the</span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;strong1&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          paragraph.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是一段简单的 HTML 代码，在没有添加任何 CSS 代码的情况下，你能说出各自的包含块么？</p><p>对应的结果如下：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>body</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>p2</td></tr><tr><td>strong1</td><td>p2</td></tr></tbody></table><p>首先 HTML 作为根元素，对应的包含块就是前面我们所说的初始包含块，而对于 body 而言，这是一个 static 定位的元素，因此该元素的包含块参照第一条为 html，以此类推 div1、p1、p2 以及 em1 的包含块也都是它们的父元素。</p><p>不过 strong1 比较例外，它的包含块确实 p2，而非 em1。为什么会这样？建议你再把非根元素的第一条规则读一下：</p><ul><li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的<strong>块容器（block container）</strong>的内容区域（content area）的边缘建立。</li></ul><p>没错，因为 em1 不是块容器，而包含块是<strong>离它最近的块容器</strong>的内容区域，所以是 p2。</p><p>接下来添加如下的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码我们对 div1 进行了定位，那么此时的包含块会发生变化么？你可以先在自己思考一下。</p><p>答案如下：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>p2</td></tr><tr><td>strong1</td><td>p2</td></tr></tbody></table><p>可以看到，这里 div1 的包含块就发生了变化，变为了初始包含块。这里你可以参考前文中的这两句话：</p><ul><li>初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</li><li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li></ul><p>是不是一下子就理解了。没错，因为我们对 div1 进行了定位，因此它会应用非根元素包含块计算规则的第三条规则，寻找离它最近的  position 的值不是 static 的祖先元素，不过显然 body 的定位方式为 static，因此 div1 的包含块最终就变成了初始包含块。</p><p>接下来我们继续修改我们的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#em1</span>  &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们对 em1 同样进行了 absolute 绝对定位，你想一想会有什么样的变化？</p><p>没错，聪明的你大概应该知道，em1 的包含块不再是 p2，而变成了 div1，而 strong1 的包含块也不再是 p2 了，而是变成了 em1。</p><p>如下表所示：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>div1（因为定位了，参阅非根元素包含块确定规则的第三条）</td></tr><tr><td>strong1</td><td>em1（因为 em1 定位了，其包含块将成为最近定位的元素）</td></tr></tbody></table><p>好了，这就是 CSS 规范中所举的例子。如果你全都能看明白，以后你还能跟别人说你是看过这一块知识对应的 CSS 规范的人。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-013519.png" alt="image-20220815093518833" style="zoom:33%;" /><p>另外，关于包含块的知识，在 MDN 上除了解说了什么是包含块以外，也举出了很多简单易懂的示例。</p><p>具体你可以移步到：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block</a></em></p><p>好了，这就是有关包含块的所有内容了，你学会了么？-）</p><hr><p>-<em>上述文档来源渡一</em>-</p><h2 id="个人归纳总结"><a href="#个人归纳总结" class="headerlink" title="个人归纳总结"></a>个人归纳总结</h2><ul><li>一个元素的几何信息是由它的包含块决定的。在布局步骤时，根据元素的包含块来确认该元素的宽高，位置等几何信息。</li><li>对于标准文档流布局来说，一个元素的包含块就是他的父元素，即最近的祖先元素</li><li>对于绝对定位的元素来说，它的包含块是最近开启定位的祖先元素。而使用position：fixed的元素，它的包含块就是视口。</li></ul>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/CSS/">CSS</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20CSS%20%E4%B9%8B%E5%8C%85%E5%90%AB%E5%9D%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS属性计算过程</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</guid>
      <pubDate>Mon, 17 Mar 2025 03:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;CSS-属性计算过程&quot;&gt;&lt;a href=&quot;#CSS-属性计算过程&quot; class=&quot;headerlink&quot; title=&quot;CSS 属性计算过程&quot;&gt;&lt;/a&gt;CSS 属性计算过程&lt;/h1&gt;&lt;p&gt;你是否了解 CSS 的属性计算过程呢？&lt;/p&gt;
&lt;p&gt;有的同学可能会讲，CS</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="CSS-属性计算过程"><a href="#CSS-属性计算过程" class="headerlink" title="CSS 属性计算过程"></a>CSS 属性计算过程</h1><p>你是否了解 CSS 的属性计算过程呢？</p><p>有的同学可能会讲，CSS属性我倒是知道，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 CSS 代码中，p 是元素选择器，color 就是其中的一个 CSS 属性。</p><p>但是要说 CSS 属性的计算过程，还真的不是很清楚。</p><p>没关系，通过此篇文章，能够让你彻底明白什么是 CSS 属性的计算流程。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060434.png" alt="image-20220813140434032" style="zoom:50%;" /><p>首先，不知道你有没有考虑过这样的一个问题，假设在 HTML 中有这么一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码也非常简单，就是在 body 中有一个 h1 标题而已，该 h1 标题呈现出来的外观是如下：</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060724.png" alt="image-20220813140724136" style="zoom:50%;" /><p>目前我们没有设置该 h1 的任何样式，但是却能看到该 h1 有一定的默认样式，例如有默认的字体大小、默认的颜色。</p><p>那么问题来了，我们这个 h1 元素上面除了有默认字体大小、默认颜色等属性以外，究竟还有哪些属性呢？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014216.png" alt="image-20220815094215982" style="zoom:30%;" /><p>答案是<strong>该元素上面会有 CSS 所有的属性。</strong>你可以打开浏览器的开发者面板，选择【元素】，切换到【计算样式】，之后勾选【全部显示】，此时你就能看到在此 h1 上面所有 CSS 属性对应的值。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-061516.png" alt="image-20220813141516153"></p><p>换句话说，<strong>我们所书写的任何一个 HTML 元素，实际上都有完整的一整套 CSS 样式</strong>。这一点往往是让初学者比较意外的，因为我们平时在书写 CSS 样式时，往往只会书写必要的部分，例如前面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这往往会给我们造成一种错觉，认为该 p 元素上面就只有 color 属性。而真实的情况确是，任何一个 HTML 元素，都有一套完整的 CSS 样式，只不过你没有书写的样式，<strong>大概率可能</strong>会使用其默认值。例如上图中 h1 一个样式都没有设置，全部都用的默认值。</p><p>但是注意，我这里强调的是“大概率可能”，难道还有我们“没有设置值，但是不使用默认值”的情况么？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014459.png" alt="image-20220815094458940" style="zoom:25%;" /><p>嗯，确实有的，所以我才强调你要了解“CSS 属性的计算过程”。</p><p>总的来讲，属性值的计算过程，分为如下这么 <em>4</em> 个步骤：</p><ul><li>确定声明值</li><li>层叠冲突</li><li>使用继承</li><li>使用默认值</li></ul><h2 id="确定声明值"><a href="#确定声明值" class="headerlink" title="确定声明值"></a>确定声明值</h2><p>首先第一步，是确定声明值。所谓声明值就是作者自己所书写的 CSS 样式，例如前面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们声明了 p 元素为红色，那么就会应用此属性设置。</p><p>当然，除了作者样式表，一般浏览器还会存在“用户代理样式表”，简单来讲就是浏览器内置了一套样式表。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-063500.png" alt="image-20220813143500066"></p><p>在上面的示例中，作者样式表中设置了 color 属性，而用户代理样式表（浏览器提供的样式表）中设置了诸如 display、margin-block-start、margin-block-end、margin-inline-start、margin-inline-end 等属性对应的值。</p><p>这些值目前来讲也没有什么冲突，因此最终就会应用这些属性值。</p><h2 id="层叠冲突"><a href="#层叠冲突" class="headerlink" title="层叠冲突"></a>层叠冲突</h2><p>在确定声明值时，可能出现一种情况，那就是声明的样式规则发生了冲突。</p><p>此时会进入解决层叠冲突的流程。而这一步又可以细分为下面这三个步骤：</p><ul><li>比较源的重要性</li><li>比较优先级</li><li>比较次序</li></ul><p>来来来，我们一步一步来看。</p><h3 id="比较源的重要性"><a href="#比较源的重要性" class="headerlink" title="比较源的重要性"></a>比较源的重要性</h3><p>当不同的 CSS 样式来源拥有相同的声明时，此时就会根据样式表来源的重要性来确定应用哪一条样式规则。</p><p>那么问题来了，咱们的样式表的源究竟有几种呢？</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-100047.png" alt="image-20220823180047075" style="zoom:40%;" /><p>整体来讲有三种来源：</p><ul><li>浏览器会有一个基本的样式表来给任何网页设置默认样式。这些样式统称<strong>用户代理样式</strong>。</li><li>网页的作者可以定义文档的样式，这是最常见的样式表，称之为<strong>页面作者样式</strong>。</li><li>浏览器的用户，可以使用自定义样式表定制使用体验，称之为<strong>用户样式</strong>。</li></ul><p>对应的重要性顺序依次为：页面作者样式 &gt; 用户样式 &gt; 用户代理样式</p><p>更详细的来源重要性比较，可以参阅 <em>MDN</em>：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade</a></em></p><p>我们来看一个示例。</p><p>例如现在有<strong>页面作者样式表</strong>和<strong>用户代理样式表</strong>中存在属性的冲突，那么会以作者样式表优先。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-064222.png" alt="image-20220813144222152"></p><p>可以明显的看到，作者样式表和用户代理样式表中同时存在的 display 属性的设置，最终作者样式表干掉了用户代理样式表中冲突的属性。这就是第一步，根据不同源的重要性来决定应用哪一个源的样式。</p><h3 id="比较优先级"><a href="#比较优先级" class="headerlink" title="比较优先级"></a>比较优先级</h3><p>那么接下来，如果是在在同一个源中有样式声明冲突怎么办呢？此时就会进行样式声明的优先级比较。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> <span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，同属于<strong>页面作者样式</strong>，源的重要性是相同的，此时会以选择器的权重来比较重要性。</p><p>很明显，上面的选择器的权重要大于下面的选择器，因此最终标题呈现为 <em>50px</em>。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-09-16-071546.png" alt="image-20210916151546500" style="zoom: 40%;" /><p>可以看到，落败的作者样式在 <em>Elements&gt;Styles</em> 中会被划掉。</p><p>有关选择器权重的计算方式，不清楚的同学，可以进入此传送门：<em><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity</a></em></p><h3 id="比较次序"><a href="#比较次序" class="headerlink" title="比较次序"></a>比较次序</h3><p>经历了上面两个步骤，大多数的样式声明能够被确定下来。但是还剩下最后一种情况，那就是样式声明既是同源，权重也相同。</p><p>此时就会进入第三个步骤，比较样式声明的次序。</p><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，同样都是<strong>页面作者样式</strong>，<strong>选择器的权重也相同</strong>，此时位于下面的样式声明会层叠掉上面的那一条样式声明，最终会应用 <em>20px</em> 这一条属性值。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-103928.png" alt="image-20220823183928330"></p><p>至此，样式声明中存在冲突的所有情况，就全部被解决了。</p><h2 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h2><p>层叠冲突这一步完成后，解决了相同元素被声明了多条样式规则究竟应用哪一条样式规则的问题。</p><p>那么如果没有声明的属性呢？此时就使用默认值么？</p><p><em>No、No、No</em>，别急，此时还有第三个步骤，那就是使用继承而来的值。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们针对 div 设置了 color 属性值为红色，而针对 p 元素我们没有声明任何的属性，但是由于 color 是可以继承的，因此 p 元素从最近的 div 身上继承到了 color 属性的值。</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065102.png" alt="image-20220813145102293"></p><p>这里有两个点需要同学们注意一下。</p><p>首先第一个是我强调了是<strong>最近的</strong> div 元素，看下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065653.png" alt="image-20220813145652726"></p><p>因为这里并不涉及到选中 p 元素声明 color 值，而是从父元素上面继承到 color 对应的值，因此这里是<strong>谁近就听谁</strong>的，初学者往往会产生混淆，又去比较权重，但是这里根本不会涉及到权重比较，因为压根儿就没有选中到 p 元素。</p><p>第二个就是哪些属性能够继承？</p><p>关于这一点的话，大家可以在 MDN 上面很轻松的查阅到。例如我们以 text-align 为例，如下图所示：</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070148.png" alt="image-20220813150147885"></p><h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><p>好了，目前走到这一步，如果属性值都还不能确定下来，那么就只能是使用默认值了。</p><p>如下图所示：</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070825.png" alt="image-20220813150824752"></p><p>前面我们也说过，一个 HTML 元素要在浏览器中渲染出来，必须具备所有的 CSS 属性值，但是绝大部分我们是不会去设置的，用户代理样式表里面也不会去设置，也无法从继承拿到，因此最终都是用默认值。</p><p>好了，这就是关于 CSS 属性计算过程的所有知识了。</p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" /><h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><p>好了，学习了今天的内容，让我来用一道面试题测试测试大家的理解程度。</p><p>下面的代码，最终渲染出来的效果，a 元素是什么颜色？p 元素又是什么颜色？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家能说出为什么会呈现这样的结果么？</p><p>解答如下：</p><p><img data-src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-071941.png" alt="image-20220813151941113"></p><p>实际上原因很简单，因为 a 元素在用户代理样式表中已经设置了 color 属性对应的值，因此会应用此声明值。而在 p 元素中无论是作者样式表还是用户代理样式表，都没有对此属性进行声明，然而由于 color 属性是可以继承的，因此最终 p 元素的 color 属性值通过继承来自于父元素。</p><p>你答对了么？-）</p><hr><p>-<em>EOF</em>-</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/CSS/">CSS</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/17/CSS%20%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>浏览器渲染原理</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</guid>
      <pubDate>Sun, 16 Mar 2025 03:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;浏览器渲染原理&quot;&gt;&lt;a href=&quot;#浏览器渲染原理&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染原理&quot;&gt;&lt;/a&gt;浏览器渲染原理&lt;/h2&gt;&lt;p&gt;###面试题：浏览器是如何渲染页面的？&lt;br&gt;当浏览器的网络线程获取到html文档后，会产生一个渲染</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>###面试题：浏览器是如何渲染页面的？<br>当浏览器的网络线程获取到html文档后，会产生一个渲染任务，并将其加入在渲染主线程的消息队列。<br>在事件循环机制下，渲染主线程取出消息队列中的渲染任务，开始渲染流程。<br><img data-src="/blog.github.io/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.JPG" alt="浏览器渲染流程"></p><p>在解析过程中，遇到CSS解析CSS，遇到JS解析JS，为了提高解析效率，浏览器在开始解析前，会创建一个预解析的线程，率先下载HTML中外部CSS文件和外部的JS文件。<br>如果主线程解析到link位置，此时外部的CSS文件还没有下载好，主线程不会等待，而是继续解析HTML，外部的预解析线程会去下载外部的CSS文件并解析成CSSOM树返回给主线程，主线程合并目前生成好的DOM和CSSOM。这就是CSS不会阻塞HTML解析的原因。<br><img data-src="/blog.github.io/images/CSS%E9%A2%84%E8%A7%A3%E6%9E%90.JPG" alt="CSS预解析"><br>如果主线程解析到script位置，会停止解析HTML，转而等待JS文件下载好，并将全局代码解析执行完成后，才继续解析HTML，这是因为JS代码的执行过程中可能会修改当前的DOM树，所以DOM树的生成必须暂停。这就是JS会阻塞HTML解析的原因。<br><img data-src="/blog.github.io/images/JS%E9%A2%84%E8%A7%A3%E6%9E%90.JPG" alt="JS预解析"><br>第一步完成后，会得到DOM树和CSSOM树，浏览器的默认样式，内联样式，外部样式，行内样式均会包含在CSSOM树中。</p><p>渲染的下一步是样式计算：<br>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它最终的样式，称之为Computed Style。<br>在这一过程中，很多预设值会变成绝对值，比如red会变成rgb（255，0，0）;相对单位会变成绝对单位，比如em会变成px。<br>这一步完成后，会得到一颗带有样式的DOM树。</p><p>接下来是布局，布局完成后会得到布局树。<br>布局阶段会依次遍历DOM树的每一个节点，计算每个节点的几何信息。例如节点的宽高，相对包含块的位置。<br>大部分时候，DOM树和布局树并非一一对应。<br>比如display:none的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然DOM树中不存在这些伪元素节点，但它们拥有几何信息，使用会生成到布局树匿名行盒，匿名块盒等等都会导致DOM树和布局树无法一一对应。</p><p>下一步是分层<br>主线程会使用一套复杂的策略对整个布局树中进行分层。<br>分层的好处在于，将来其某一个层改变后，仅会对该层进行后续处理，从而提升效率。<br>滚动条，堆叠上下文，transform，opacity等样式都会或多或少的影响分层结果，也可以通过will-change属性更大程度的影响分层结果。</p><p>再下一步，绘制 paint<br>canvas的绘制是由浏览器开放出来的绘制功能。<br>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><p>分块：Tiles<br>完成绘制之后，主线程会将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。合成线程首先对每个图层进行分块，将其划分为更多的小区域。<br>它会从线程池中拿取多个线程来完成分块工作。</p><p>光栅化Raster :将每个块变成位图，优先处理靠近视图的块。<br>分块完成后，进入光栅化阶段<br>合成线程会将块信息交给GPU进程，以极高的速度完成光栅化。<br>GPU进程会开启多个线程来完成光栅化，并优先处理靠近视口区域的块。<br>光栅化的结果就是一块一块的位图。</p><p>画 draw<br>合成线程拿到每个层，每个块的位图后，生成一个个指引【quad】信息。<br>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转，缩放等变形。变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因。<br>合成线程会把quad提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。</p><p>整个渲染流程分为多个阶段，包括：HTML解析，样式计算，布局，分层，绘制，分块，光栅化，画。每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。<br>这样，整个渲染流程就形成了一套组织严密的生产流水线。<br>渲染主线程的主要工作内容为：parse HTML，computed style，生成layout布局树，对dom树进行分层，绘制dom树。后续步骤由其他线程完成。<br>完整流程：<br><img data-src="/blog.github.io/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.JPG" alt="浏览器渲染的完整流程"></p><h3 id="面试题：什么是reflow？"><a href="#面试题：什么是reflow？" class="headerlink" title="面试题：什么是reflow？"></a>面试题：什么是reflow？</h3><p>reflow的本质是重新计算layout树。<br>当进行了会影响布局树的操作后，需要重新计算布局树，会引发layout。<br>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后再进行计算。所以，改动属性造成的reflow是异步完成的。<br>也同样因为如此，当JS获取布局属性时，就可能造成无法获取到最新的布局信息。<br>浏览器在反复权衡下，最终决定获取属性立即reflow。</p><h3 id="面试题：什么是repaint？"><a href="#面试题：什么是repaint？" class="headerlink" title="面试题：什么是repaint？"></a>面试题：什么是repaint？</h3><p>repaint的本质就是重新根据分层信息计算了绘制指令，<br>当改动了可见样式后，就需要重新计算，会引发repaint。<br>由于元素的布局信息也属于可见样式，所以reflow一定会引发repaint。</p><h3 id="面试题：为什么transform的效率高？"><a href="#面试题：为什么transform的效率高？" class="headerlink" title="面试题：为什么transform的效率高？"></a>面试题：为什么transform的效率高？</h3><p>因为transform既不会影响布局也不会影响绘制指令，影响的只是渲染流程的最后一个【draw】阶段。由于draw阶段在合成线程中，所以transform的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响transform的变化。</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/">浏览器</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>事件循环</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <pubDate>Sat, 15 Mar 2025 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;事件循环&quot;&gt;&lt;a href=&quot;#事件循环&quot; class=&quot;headerlink&quot; title=&quot;事件循环&quot;&gt;&lt;/a&gt;事件循环&lt;/h2&gt;&lt;h3 id=&quot;浏览器的进程模型&quot;&gt;&lt;a href=&quot;#浏览器的进程模型&quot; class=&quot;headerlink&quot; title=&quot;浏</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h3><p>什么是进程？<br>程序运行时需要有自己专属的内存空间，可以把这块内存空间简单的理解为进程。<br>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p><p>什么是线程？<br>一个进程至少有一个线程，所以在进程开启后，会自动创建一个线程来运行代码，该线程称之为主线程。tips：主线程是唯一的，其他线程都是由主线程创建的。当主线程关闭后进程也就关闭了</p><p>如果程序需要同时执行多个代码块，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</p><h3 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h3><p>浏览器是一个多进程多线程的应用程序。内部工作极其复杂。<br>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。<br>最主要的进程有：<br>浏览器进程：主要负责界面显示，用户交互，子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。<br>网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。<br>渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行HTML,CSS,JS代码，解析渲染页面。<br>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</p><h3 id="渲染主线程时如何工作的？"><a href="#渲染主线程时如何工作的？" class="headerlink" title="渲染主线程时如何工作的？"></a>渲染主线程时如何工作的？</h3><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：<br>解析HTML、CSS、计算样式，布局，处理图层，每秒把页面画60次即60HZ（主要是为了用户的浏览感知效果），执行全局JS代码，执行事件处理函数，执行计时器的回调函数。</p><p>思考题：为什么渲染进程不适用多个线程来处理这些事情？</p><p>渲染主线程想出了一个办法来处理同一时间来自多个线程的任务。即开启消息队列。<br>1.在最开始的时候，渲染主线程会进入一个无限循环<br>2.每一次循环会检查消息队列中是否有任务存在。如果有，则会取出第一个任务并执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。<br>3.其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务使，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务。<br>整个过程被称之为事件循环。<br><img data-src="/blog.github.io/images/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA.JPG" alt="事件循环"></p><p>##何为异步<br>代码在执行过程中，会遇到一些无法立即处理的任务，比如：<br>计时完成后需要执行的任务–setTimeout()，setInterval()<br>网络通信完成后需要执行的任务–XHR，Fetch<br>用户操作后需要执行的任务–addEventListener()<br>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于【阻塞】的状态，从而导致浏览器【卡死】。例如计时器计时五秒钟，则不会等待五秒钟后才开始处理。</p><p>所以计时器的原理：<br>1.渲染主线程会创建一个计时器对象，并将其添加到消息队列中。<br>2.当渲染主线程执行到计时器对象时，会通知计时器线程开始计时，并将计时器对象对应的任务结束。<br>3.渲染主线程继续执行消息队列中待处理的任务。计时线程开始计时<br>4.计时结束后，计时线程会将计时器对象对应的任务添加到消息队列中。<br>这就是异步的处理方式，渲染主线程永远不会阻塞。<br><img data-src="/blog.github.io/images/%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B.JPG" alt="异步操作"></p><p>###面试题：如何解释js中的异步？<br>js是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个，而渲染主线程承担着很多的工作，渲染页面，执行JS都在其中运行。<br>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中很多其他任务无法得到执行。<br>这样一来，一方面会导致繁忙的主线程白白的浪费时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br>所以，浏览器采用异步的方式避免，具体做法是当某些任务发生时，比如计时器，网络，事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码，当其他线程完成时，将事先传递的回调函数包装成任务（任务是一个对象！！），加入到消息队列的末尾排队，等待主线程调度执行。<br>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><p>###js是怎么阻碍渲染的？<br>因为js的渲染任务和一些计时器的任务都在渲染主线程上运行。当一个定义的计时器的函数被调用后，计时器之前的修改内容不会立即在主线程上渲染，而是会加载在消息队列中，等待主线程结束计时器的任务后，才会渲染。<br>因此会导致即使值发生了修改，但是不会立即渲染在页面。同理如果存在这种情况点击其他事件也不会立即响应，因为事件也在消息队列中，等待主线程执行。<br><img data-src="/blog.github.io/images/%E8%AE%A1%E6%97%B6%E5%99%A8%E5%AF%BC%E8%87%B4%E9%98%BB%E5%A1%9E.JPG" alt="计时器导致阻塞"></p><p>###任务有优先级吗？<br>任务没有优先级，在消息队列中先进先出。但是消息队列存在优先级。</p><p>W3C的最新解释：<br>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。<br>浏览器必须准备好一个微队列，微队列的任务优先所有其他任务执行。</p><p>chrome浏览器的实现，至少包含了下面的队列：<br>延时队列：用于存放计时器到达后的回调任务，优先级【中】<br>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】<br>微队列：用户存放需要最快执行的任务，优先级【最高】</p><p>添加任务到微队列的主要方式主要是使用promise，MutationObserver，requestAnimationFrame等。<br>promise：使用promise.resolve().then()方法可以将任务添加到微队列。</p><p>！！！渲染主队列会将代码中所有需要执行的任务添加在消息队列中，按照消息队列的顺序执行，根据消息队列中不同类型的任务放置在不同的队列上，但是微队列优先级最高，所以微队列中的任务会优先执行。等待微队列中的任务执行完毕后，在看交互队列。其中使用promise会将任务直接防止在微队列中。</p><p>面试题：阐述一下JS的事件循环机制：<br>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。<br>在chrome的源码中，它开启一个不会结束的for循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。<br>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。<br>根据W3C的最新解释，每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。但是浏览器必须准备好一个微队列，微队列的任务优先所有其他任务执行。</p><p>面试题：JS中的计时器能做到精确计时吗？为什么？<br>不行，<br>1.计算机硬件没有原子钟，无法做到精确计时。<br>2.操作系统的计时函数本身就有少量偏差，因为js的计时器最终调用的是操作系统的函数，也就是有些偏差。<br>3.按照W3C的标准，浏览器实现计时器时，如果嵌套层数超过五层，则会带有4ms的等待时间。<br>4.受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此带来了偏差。</p><p>原子钟（英文：atomic clock），是一种利用原子量子特性产生高度稳定且准确频率信号的仪器，是目前测量时间最精确的工具。原子钟的运作核心是利用原子作为基准物质，构建一个类似电子振荡器的装置，当振荡器产生的电磁波频率与原子固有的振动频率相匹配时，原子将经历“能级跃迁”，表明振荡器发射的频率与原子的共振频率相一致，构成了原子钟运作的基本原理</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/">前端基础</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/">浏览器</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/">事件循环</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/15/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>周记</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/</guid>
      <pubDate>Sat, 08 Mar 2025 03:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;周记&quot;&gt;&lt;a href=&quot;#周记&quot; class=&quot;headerlink&quot; title=&quot;周记&quot;&gt;&lt;/a&gt;周记&lt;/h1&gt;&lt;h2 id=&quot;主要工作&quot;&gt;&lt;a href=&quot;#主要工作&quot; class=&quot;headerlink&quot; title=&quot;主要工作&quot;&gt;&lt;/a&gt;主要工作&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="周记"><a href="#周记" class="headerlink" title="周记"></a>周记</h1><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><h3 id="3-3-3-4"><a href="#3-3-3-4" class="headerlink" title="3.3-3.4"></a>3.3-3.4</h3><p>编写了自己的毕业设计。实现了数据分析，数据可视化等功能。并使用nginx对项目进行反向代理。<br>主要技术栈为vue3+iview+echarts+python+flask+mysql。<br>线下面试了一家公司，面试岗位为前端开发（实习生）。<br>面试流程：一套笔试题，主要问到原型链，this指向，call，apply，bind。vue23的区别等技术栈。<br>但面试结束后告知我面试的岗位不招人了。。。。。。</p><h3 id="3-5-3-6"><a href="#3-5-3-6" class="headerlink" title="3.5-3.6"></a>3.5-3.6</h3><p>接了一单毕业设计，实现多种功能，按照甲方的需求实现代码。主要针对于python爬虫，数据分析，数据可视化，Hadoop集群和hive。</p><h3 id="3-7-3-8"><a href="#3-7-3-8" class="headerlink" title="3.7-3.8"></a>3.7-3.8</h3><p>1.面试了一家深圳的公司，面试岗位为前端开发（实习生）。主要面试了promise，echarts和个人项目的痛点。<br>2.修改了个人博客，增加了一些next主题的各种配置，添加了评论功能，修改了主题样式，没之前那么华丽了。</p><h2 id="主要收获"><a href="#主要收获" class="headerlink" title="主要收获"></a>主要收获</h2><p>1.学会了使用DrissionPage对淘宝的母婴商品进行数据爬取，并进行数据分析和数据可视化。<br>2.对于简单系统的搭建有一定的了解。稍微熟悉了使用nginx反向代理。</p><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><p>能约到面试，但是自身的基础还是不太牢固。还是需要对于js，vue，css，html等基础知识进行巩固。</p><h2 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h2><p>1.做一个简单的小程序项目，熟悉一下小程序开发。<br>2.争取开发一个网站，实现web前端知识的模拟练题。而不是只靠背，最好配合代码块。</p><p>##3.10<br>场景：用户对于分页板块，进行多次点击页面按钮，发送了多次请求，需要正确的响应到最后一次的点击页面。<br>昨天复习到了一个知识点。关于xhr.abort()方法，可以取消xhr请求。可以用于用户多次点击按钮，重复多次请求时，确认正确的点击页面，取消上一次的请求。<br>涉及后端的话，可以给每次请求添加一个reqest_id，在响应中返回该id，前端根据id判断是否是最后一次的请求。<br>添加londing状态，从根源上解决问题。（降低用户体验）</p><p>##3.10 -3.14<br>完整整个毕业论文整体流程和内容，是否完整需要指导老师的查看后再次修改。</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%91%A8%E8%AE%B0/">周记</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%91%A8%E8%AE%B0/">周记</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/08/2025.3%20%E5%91%A8%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用DrissionPage进行高效的数据爬虫</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/07/%E7%AC%AC%E4%B9%9D%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8DrissionPage%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/07/%E7%AC%AC%E4%B9%9D%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8DrissionPage%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/</guid>
      <pubDate>Fri, 07 Mar 2025 03:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;使用DrissionPage进行高效的数据爬虫&quot;&gt;&lt;a href=&quot;#使用DrissionPage进行高效的数据爬虫&quot; class=&quot;headerlink&quot; title=&quot;使用DrissionPage进行高效的数据爬虫&quot;&gt;&lt;/a&gt;使用DrissionPage进行高</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="使用DrissionPage进行高效的数据爬虫"><a href="#使用DrissionPage进行高效的数据爬虫" class="headerlink" title="使用DrissionPage进行高效的数据爬虫"></a>使用DrissionPage进行高效的数据爬虫</h1><h2 id="1-DrissionPage简介"><a href="#1-DrissionPage简介" class="headerlink" title="1. DrissionPage简介"></a>1. DrissionPage简介</h2><p>DrissionPage是一个功能强大的Python爬虫库，它结合了Selenium和Requests的优点，提供了更简单的API和更高效的性能。</p><h3 id="1-1-安装必要的库"><a href="#1-1-安装必要的库" class="headerlink" title="1.1 安装必要的库"></a>1.1 安装必要的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install DrissionPage</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><h3 id="1-2-DrissionPage的优势"><a href="#1-2-DrissionPage的优势" class="headerlink" title="1.2 DrissionPage的优势"></a>1.2 DrissionPage的优势</h3><ul><li>无需配置webdriver</li><li>支持多种页面操作方式</li><li>内置反检测功能</li><li>性能优于Selenium</li><li>使用简单直观</li></ul><h2 id="2-爬取淘宝母婴商品实战"><a href="#2-爬取淘宝母婴商品实战" class="headerlink" title="2. 爬取淘宝母婴商品实战"></a>2. 爬取淘宝母婴商品实战</h2><h3 id="2-1-登录淘宝"><a href="#2-1-登录淘宝" class="headerlink" title="2.1 登录淘宝"></a>2.1 登录淘宝</h3><h4 id="2-1-1-扫码登录（推荐）"><a href="#2-1-1-扫码登录（推荐）" class="headerlink" title="2.1.1 扫码登录（推荐）"></a>2.1.1 扫码登录（推荐）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_by_qrcode</span>():</span><br><span class="line">    <span class="comment"># 创建浏览器对象</span></span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 访问淘宝登录页</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://login.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待扫码登录</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请在30秒内完成扫码登录...&#x27;</span>)</span><br><span class="line">    page.wait.ele_displayed(<span class="string">&#x27;#login-form&#x27;</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> page</span><br></pre></td></tr></table></figure><h4 id="2-1-2-账号密码登录"><a href="#2-1-2-账号密码登录" class="headerlink" title="2.1.2 账号密码登录"></a>2.1.2 账号密码登录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_by_password</span>(<span class="params">username, password</span>):</span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    page.get(<span class="string">&#x27;https://login.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 切换到密码登录</span></span><br><span class="line">        switch_btn = page.ele(<span class="string">&#x27;.password-login-tab&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> switch_btn:</span><br><span class="line">            switch_btn.click()</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 输入账号密码</span></span><br><span class="line">        page.ele(<span class="string">&#x27;#username&#x27;</span>).<span class="built_in">input</span>(username)</span><br><span class="line">        page.ele(<span class="string">&#x27;#password&#x27;</span>).<span class="built_in">input</span>(password)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 点击登录按钮</span></span><br><span class="line">        page.ele(<span class="string">&#x27;#btn-submit&#x27;</span>).click()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理可能的滑块验证</span></span><br><span class="line">        handle_slider(page)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 等待登录成功</span></span><br><span class="line">        page.wait.load_complete()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> page</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;密码登录失败：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_slider</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理滑块验证&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 等待滑块出现</span></span><br><span class="line">        slider = page.wait.ele_displayed(<span class="string">&#x27;#nc_1_n1z&#x27;</span>, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> slider:</span><br><span class="line">            <span class="comment"># 获取滑块和轨道信息</span></span><br><span class="line">            track = page.ele(<span class="string">&#x27;#nc_1_n1t&#x27;</span>)</span><br><span class="line">            slider_width = track.size[<span class="string">&#x27;width&#x27;</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 模拟人工滑动</span></span><br><span class="line">            page.actions.drag.move_to(slider)\</span><br><span class="line">                           .hold()\</span><br><span class="line">                           .move_by_offset(slider_width, <span class="number">0</span>, duration=<span class="number">0.5</span>)\</span><br><span class="line">                           .release()\</span><br><span class="line">                           .perform()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 等待验证结果</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-Cookie登录"><a href="#2-1-3-Cookie登录" class="headerlink" title="2.1.3 Cookie登录"></a>2.1.3 Cookie登录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_by_cookies</span>(<span class="params">cookies_str</span>):</span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 访问淘宝首页</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置cookies</span></span><br><span class="line">    cookies = parse_cookies(cookies_str)</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">        page.<span class="built_in">set</span>.cookie(cookie)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 刷新页面</span></span><br><span class="line">    page.refresh()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证登录状态</span></span><br><span class="line">    <span class="keyword">if</span> check_login_status(page):</span><br><span class="line">        <span class="keyword">return</span> page</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookies</span>(<span class="params">cookies_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析cookies字符串&quot;&quot;&quot;</span></span><br><span class="line">    cookies = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> cookies_str.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">            name, value = item.strip().split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            cookies.append(&#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;value&#x27;</span>: value&#125;)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_login_status</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查登录状态&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 检查是否存在登录标识</span></span><br><span class="line">        nickname = page.ele(<span class="string">&#x27;.site-nav-login-info-nick&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> nickname <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-登录状态保存与恢复"><a href="#2-1-4-登录状态保存与恢复" class="headerlink" title="2.1.4 登录状态保存与恢复"></a>2.1.4 登录状态保存与恢复</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_cookies</span>(<span class="params">page, file_path=<span class="string">&#x27;taobao_cookies.json&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存登录cookies&quot;&quot;&quot;</span></span><br><span class="line">    cookies = page.get.cookies()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(cookies, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_cookies</span>(<span class="params">file_path=<span class="string">&#x27;taobao_cookies.json&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载已保存的cookies&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> json.load(f)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_with_saved_cookies</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用保存的cookies登录&quot;&quot;&quot;</span></span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    cookies = load_cookies()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> cookies:</span><br><span class="line">        page.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">            page.<span class="built_in">set</span>.cookie(cookie)</span><br><span class="line">        page.refresh()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> check_login_status(page):</span><br><span class="line">            <span class="keyword">return</span> page</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果cookie无效，使用扫码登录</span></span><br><span class="line">    page = login_by_qrcode()</span><br><span class="line">    <span class="keyword">if</span> page:</span><br><span class="line">        save_cookies(page)</span><br><span class="line">    <span class="keyword">return</span> page</span><br></pre></td></tr></table></figure><h4 id="2-1-5-登录异常处理"><a href="#2-1-5-登录异常处理" class="headerlink" title="2.1.5 登录异常处理"></a>2.1.5 登录异常处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">safe_login</span>(<span class="params">retry_times=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;安全登录处理&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(retry_times):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 优先使用保存的cookies</span></span><br><span class="line">            page = login_with_saved_cookies()</span><br><span class="line">            <span class="keyword">if</span> page:</span><br><span class="line">                <span class="keyword">return</span> page</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># cookies失效，使用扫码登录</span></span><br><span class="line">            page = login_by_qrcode()</span><br><span class="line">            <span class="keyword">if</span> page:</span><br><span class="line">                save_cookies(page)</span><br><span class="line">                <span class="keyword">return</span> page</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次登录失败：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;登录失败，请稍后重试&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 方式1：扫码登录</span></span><br><span class="line">        page = login_by_qrcode()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 方式2：账号密码登录</span></span><br><span class="line">        <span class="comment"># page = login_by_password(&#x27;your_username&#x27;, &#x27;your_password&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 方式3：Cookie登录</span></span><br><span class="line">        <span class="comment"># page = login_by_cookies(&#x27;cookie字符串&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 方式4：使用保存的登录状态</span></span><br><span class="line">        <span class="comment"># page = login_with_saved_cookies()</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> page:</span><br><span class="line">            <span class="comment"># 开始爬取数据</span></span><br><span class="line">            taobao_crawler(page, <span class="string">&#x27;婴儿奶粉&#x27;</span>, max_pages=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;程序出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> page:</span><br><span class="line">            page.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>账号密码登录容易触发验证码</li><li>Cookie登录需要定期更新Cookie</li><li>建议优先使用扫码登录</li><li>保存登录状态可以避免频繁登录</li><li>注意处理各种异常情况</li></ol><h3 id="2-2-搜索母婴商品"><a href="#2-2-搜索母婴商品" class="headerlink" title="2.2 搜索母婴商品"></a>2.2 搜索母婴商品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_products</span>(<span class="params">keyword</span>):</span><br><span class="line">    <span class="comment"># 访问淘宝首页</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定位搜索框并输入关键词</span></span><br><span class="line">    search_input = page.ele(<span class="string">&#x27;#q&#x27;</span>)</span><br><span class="line">    search_input.<span class="built_in">input</span>(keyword)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 点击搜索按钮</span></span><br><span class="line">    search_button = page.ele(<span class="string">&#x27;.btn-search&#x27;</span>)</span><br><span class="line">    search_button.click()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待搜索结果加载</span></span><br><span class="line">    page.wait.load_complete()</span><br></pre></td></tr></table></figure><h3 id="2-3-获取商品信息"><a href="#2-3-获取商品信息" class="headerlink" title="2.3 获取商品信息"></a>2.3 获取商品信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_product_info</span>():</span><br><span class="line">    products = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取商品列表</span></span><br><span class="line">    items = page.eles(<span class="string">&#x27;.item&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 提取商品信息</span></span><br><span class="line">            product = &#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: item.ele(<span class="string">&#x27;.title&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;price&#x27;</span>: item.ele(<span class="string">&#x27;.price&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;sales&#x27;</span>: item.ele(<span class="string">&#x27;.deal-cnt&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;shop&#x27;</span>: item.ele(<span class="string">&#x27;.shop&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;location&#x27;</span>: item.ele(<span class="string">&#x27;.location&#x27;</span>).text,</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span>: item.ele(<span class="string">&#x27;.title a&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            products.append(product)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> products</span><br></pre></td></tr></table></figure><h3 id="2-4-翻页操作"><a href="#2-4-翻页操作" class="headerlink" title="2.4 翻页操作"></a>2.4 翻页操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">next_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 点击下一页</span></span><br><span class="line">        next_btn = page.ele(<span class="string">&#x27;.next&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> next_btn <span class="keyword">and</span> <span class="keyword">not</span> next_btn.attr(<span class="string">&#x27;disabled&#x27;</span>):</span><br><span class="line">            next_btn.click()</span><br><span class="line">            page.wait.load_complete()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="2-5-完整爬虫代码"><a href="#2-5-完整爬虫代码" class="headerlink" title="2.5 完整爬虫代码"></a>2.5 完整爬虫代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">taobao_crawler</span>(<span class="params">keyword, max_pages=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># 初始化浏览器</span></span><br><span class="line">    page = ChromiumPage()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 登录淘宝</span></span><br><span class="line">    page.get(<span class="string">&#x27;https://login.taobao.com&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请在30秒内完成扫码登录...&#x27;</span>)</span><br><span class="line">    page.wait.ele_displayed(<span class="string">&#x27;#login-form&#x27;</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 搜索商品</span></span><br><span class="line">    search_products(keyword)</span><br><span class="line">    </span><br><span class="line">    all_products = []</span><br><span class="line">    current_page = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开始爬取数据</span></span><br><span class="line">    <span class="keyword">while</span> current_page &lt;= max_pages:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;正在爬取第<span class="subst">&#123;current_page&#125;</span>页...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取当前页商品信息</span></span><br><span class="line">        products = get_product_info()</span><br><span class="line">        all_products.extend(products)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 翻页</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_page():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        current_page += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)  <span class="comment"># 防止请求过快</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 保存数据</span></span><br><span class="line">    df = pd.DataFrame(all_products)</span><br><span class="line">    df.to_csv(<span class="string">f&#x27;taobao_<span class="subst">&#123;keyword&#125;</span>_<span class="subst">&#123;time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)&#125;</span>.csv&#x27;</span>, </span><br><span class="line">              index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;爬取完成，共获取<span class="subst">&#123;<span class="built_in">len</span>(all_products)&#125;</span>条商品信息&#x27;</span>)</span><br><span class="line">    page.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    taobao_crawler(<span class="string">&#x27;婴儿奶粉&#x27;</span>, max_pages=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="3-数据处理与分析"><a href="#3-数据处理与分析" class="headerlink" title="3. 数据处理与分析"></a>3. 数据处理与分析</h2><h3 id="3-1-数据清洗"><a href="#3-1-数据清洗" class="headerlink" title="3.1 数据清洗"></a>3.1 数据清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clean_data</span>(<span class="params">df</span>):</span><br><span class="line">    <span class="comment"># 处理价格数据</span></span><br><span class="line">    df[<span class="string">&#x27;price&#x27;</span>] = df[<span class="string">&#x27;price&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;¥&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理销量数据</span></span><br><span class="line">    df[<span class="string">&#x27;sales&#x27;</span>] = df[<span class="string">&#x27;sales&#x27;</span>].<span class="built_in">str</span>.extract(<span class="string">&#x27;(\d+)&#x27;</span>).astype(<span class="built_in">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除重复数据</span></span><br><span class="line">    df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><h3 id="3-2-数据分析"><a href="#3-2-数据分析" class="headerlink" title="3.2 数据分析"></a>3.2 数据分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_data</span>(<span class="params">df</span>):</span><br><span class="line">    <span class="comment"># 基本统计</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;价格统计：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(df[<span class="string">&#x27;price&#x27;</span>].describe())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 销量排名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n销量TOP10：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(df.nlargest(<span class="number">10</span>, <span class="string">&#x27;sales&#x27;</span>)[[<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>]])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 地区分布</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n地区分布：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(df[<span class="string">&#x27;location&#x27;</span>].value_counts().head())</span><br></pre></td></tr></table></figure><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><h3 id="4-1-反爬虫处理"><a href="#4-1-反爬虫处理" class="headerlink" title="4.1 反爬虫处理"></a>4.1 反爬虫处理</h3><ul><li>添加随机延时</li><li>使用代理IP</li><li>模拟真实用户行为</li><li>处理验证码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_sleep</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机延时&quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_verification</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理验证码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 根据实际情况实现</span></span><br></pre></td></tr></table></figure><h3 id="4-2-异常处理"><a href="#4-2-异常处理" class="headerlink" title="4.2 异常处理"></a>4.2 异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">safe_crawler</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;装饰器：处理爬虫异常&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;爬取出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="5-进阶优化"><a href="#5-进阶优化" class="headerlink" title="5. 进阶优化"></a>5. 进阶优化</h2><h3 id="5-1-多线程爬取"><a href="#5-1-多线程爬取" class="headerlink" title="5.1 多线程爬取"></a>5.1 多线程爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread_crawler</span>(<span class="params">keywords, max_pages=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(<span class="keyword">lambda</span> kw: taobao_crawler(kw, max_pages), keywords)</span><br></pre></td></tr></table></figure><h3 id="5-2-自动化部署"><a href="#5-2-自动化部署" class="headerlink" title="5.2 自动化部署"></a>5.2 自动化部署</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">schedule_crawler</span>():</span><br><span class="line">    scheduler = BlockingScheduler()</span><br><span class="line">    scheduler.add_job(</span><br><span class="line">        taobao_crawler, </span><br><span class="line">        <span class="string">&#x27;cron&#x27;</span>, </span><br><span class="line">        args=[<span class="string">&#x27;婴儿奶粉&#x27;</span>], </span><br><span class="line">        hour=<span class="number">2</span>,  <span class="comment"># 每天凌晨2点执行</span></span><br><span class="line">        max_instances=<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    scheduler.start()</span><br></pre></td></tr></table></figure><p>本教程详细介绍了如何使用DrissionPage爬取淘宝母婴商品数据，包括登录、搜索、数据提取、翻页等核心功能，以及数据处理、异常处理、反爬虫等进阶内容。通过这个实例，读者可以掌握DrissionPage的基本使用方法，并能够应用到其他网站的爬虫开发中。</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/">数据爬虫</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/">数据爬虫</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/python/">python</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/DrissionPage/">DrissionPage</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E6%B7%98%E5%AE%9D/">淘宝</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/07/%E7%AC%AC%E4%B9%9D%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8DrissionPage%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CentOS7下MySQL8.0安装指南与常见问题解决</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/03/05/%E7%AC%AC%E5%85%AB%E7%AF%87%EF%BC%9Acentos7%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85MySQL/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/03/05/%E7%AC%AC%E5%85%AB%E7%AF%87%EF%BC%9Acentos7%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85MySQL/</guid>
      <pubDate>Wed, 05 Mar 2025 00:38:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;CentOS7下MySQL8-0安装指南与常见问题解决&quot;&gt;&lt;a href=&quot;#CentOS7下MySQL8-0安装指南与常见问题解决&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下MySQL8.0安装指南与常见问题解决&quot;&gt;&lt;/a&gt;CentO</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="CentOS7下MySQL8-0安装指南与常见问题解决"><a href="#CentOS7下MySQL8-0安装指南与常见问题解决" class="headerlink" title="CentOS7下MySQL8.0安装指南与常见问题解决"></a>CentOS7下MySQL8.0安装指南与常见问题解决</h1><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="检查系统环境"><a href="#检查系统环境" class="headerlink" title="检查系统环境"></a>检查系统环境</h3><ol><li><p><strong>检查是否已安装MySQL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br><span class="line"><span class="comment"># 如果有安装，需要卸载</span></span><br><span class="line">rpm -e --nodeps mysql-xxx</span><br></pre></td></tr></table></figure></li><li><p><strong>检查&#x2F;tmp目录权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /| grep tmp</span><br><span class="line"><span class="comment"># 确保权限为 drwxrwxrwt</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /tmp</span><br></pre></td></tr></table></figure></li><li><p><strong>下载MySQL安装包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装MySQL仓库"><a href="#安装MySQL仓库" class="headerlink" title="安装MySQL仓库"></a>安装MySQL仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure><h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><h2 id="常见错误与解决方案"><a href="#常见错误与解决方案" class="headerlink" title="常见错误与解决方案"></a>常见错误与解决方案</h2><h3 id="1-初始密码相关问题"><a href="#1-初始密码相关问题" class="headerlink" title="1. 初始密码相关问题"></a>1. 初始密码相关问题</h3><p><strong>错误现象：</strong></p><ul><li>无法找到初始密码</li><li>密码修改失败</li><li>忘记原密码</li></ul><p><strong>解决方案：</strong></p><ol><li><p>首次安装后查看临时密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看初始密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>使用临时密码登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 输入临时密码</span></span><br></pre></td></tr></table></figure></li><li><p>如果忘记密码，按以下步骤重置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 停止MySQL服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 以跳过密码验证方式启动</span></span><br><span class="line"><span class="comment"># 编辑/etc/my.cnf，在[mysqld]下添加</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重启MySQL服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 无密码登录MySQL</span></span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 重置root密码</span></span><br><span class="line"><span class="comment"># MySQL 8.0的密码重置命令</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NewPassword123!&#x27;</span>;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">UPDATE mysql.user SET authentication_string=<span class="string">&#x27;&#x27;</span> WHERE user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NewPassword123!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 删除skip-grant-tables配置</span></span><br><span class="line"><span class="comment"># 编辑/etc/my.cnf，删除skip-grant-tables行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 重启MySQL服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 使用新密码登录</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><ul><li>新密码必须符合MySQL 8.0的密码策略要求</li><li>建议包含大小写字母、数字和特殊字符</li><li>密码长度至少8位</li></ul><h3 id="2-远程连接失败"><a href="#2-远程连接失败" class="headerlink" title="2. 远程连接失败"></a>2. 远程连接失败</h3><p><strong>错误现象：</strong></p><ul><li>ERROR 1130 (HY000): Host xxx is not allowed to connect</li></ul><p><strong>解决方案：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 登录MySQL后执行</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="3-密码策略问题"><a href="#3-密码策略问题" class="headerlink" title="3. 密码策略问题"></a>3. 密码策略问题</h3><p><strong>错误现象：</strong></p><ul><li>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</li></ul><p><strong>解决方案：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看密码策略</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 修改密码策略</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password.policy<span class="operator">=</span>LOW;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password.length<span class="operator">=</span><span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="4-内存不足问题"><a href="#4-内存不足问题" class="headerlink" title="4. 内存不足问题"></a>4. 内存不足问题</h3><p><strong>错误现象：</strong></p><ul><li>MySQL服务无法启动</li><li>日志显示内存不足</li></ul><p><strong>解决方案：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑/etc/my.cnf，添加或修改以下参数</span></span><br><span class="line">[mysqld]</span><br><span class="line">performance_schema_max_table_instances=400</span><br><span class="line">table_definition_cache=400</span><br><span class="line">table_open_cache=256</span><br></pre></td></tr></table></figure><h3 id="5-端口占用问题"><a href="#5-端口占用问题" class="headerlink" title="5. 端口占用问题"></a>5. 端口占用问题</h3><p><strong>错误现象：</strong></p><ul><li>Can’t start server: Bind on TCP&#x2F;IP port</li></ul><p><strong>解决方案：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看端口占用</span></span><br><span class="line">netstat -tulpn | grep 3306</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改端口号，编辑/etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">port=3307</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查防火墙</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><h3 id="基础配置优化"><a href="#基础配置优化" class="headerlink" title="基础配置优化"></a>基础配置优化</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_general_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓冲池大小</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span>=<span class="number">1</span>G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=/var/log/mysql/slow.log</span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="安装后检查"><a href="#安装后检查" class="headerlink" title="安装后检查"></a>安装后检查</h2><h3 id="安全性检查"><a href="#安全性检查" class="headerlink" title="安全性检查"></a>安全性检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行安全性检查脚本</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查项包括：</span></span><br><span class="line"><span class="comment"># 1. 设置root密码</span></span><br><span class="line"><span class="comment"># 2. 删除匿名用户</span></span><br><span class="line"><span class="comment"># 3. 禁止root远程登录</span></span><br><span class="line"><span class="comment"># 4. 删除test数据库</span></span><br><span class="line"><span class="comment"># 5. 重新加载权限表</span></span><br></pre></td></tr></table></figure><h3 id="性能检查"><a href="#性能检查" class="headerlink" title="性能检查"></a>性能检查</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 检查系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%max_connections%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%buffer_pool%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%timeout%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检查状态变量</span></span><br><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Threads_%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Questions&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="常用运维命令"><a href="#常用运维命令" class="headerlink" title="常用运维命令"></a>常用运维命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">systemctl start mysqld    <span class="comment"># 启动</span></span><br><span class="line">systemctl stop mysqld     <span class="comment"># 停止</span></span><br><span class="line">systemctl restart mysqld  <span class="comment"># 重启</span></span><br><span class="line">systemctl status mysqld   <span class="comment"># 状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志查看</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件位置</span></span><br><span class="line">/etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">/var/lib/mysql</span><br></pre></td></tr></table></figure><p>这篇文档涵盖了MySQL8.0在CentOS7上安装过程中的常见问题和解决方案，以及基本的优化配置和运维命令。建议在实际操作时，根据服务器配置和业务需求适当调整参数。</p>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/MySQL8-0/">MySQL8.0</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/centos7/">centos7</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/linux/">linux</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/03/05/%E7%AC%AC%E5%85%AB%E7%AF%87%EF%BC%9Acentos7%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85MySQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue基础</title>
      <link>https://sheleftwithregrets.github.io/blog.github.io/2025/02/24/%E7%AC%AC%E4%B8%83%E7%AF%87%EF%BC%9AVue%E5%9F%BA%E7%A1%80/</link>
      <guid>https://sheleftwithregrets.github.io/blog.github.io/2025/02/24/%E7%AC%AC%E4%B8%83%E7%AF%87%EF%BC%9AVue%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Mon, 24 Feb 2025 03:38:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Vue基础&quot;&gt;&lt;a href=&quot;#Vue基础&quot; class=&quot;headerlink&quot; title=&quot;Vue基础&quot;&gt;&lt;/a&gt;Vue基础&lt;/h1&gt;&lt;h2 id=&quot;组件通信&quot;&gt;&lt;a href=&quot;#组件通信&quot; class=&quot;headerlink&quot; title=&quot;组件通信&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="Vue组件之间有哪些通信方式？"><a href="#Vue组件之间有哪些通信方式？" class="headerlink" title="Vue组件之间有哪些通信方式？"></a>Vue组件之间有哪些通信方式？</h3><p>组件通信的基本原则：谁向谁传，数据写在发送方。主要通信方式包括：</p><ol><li><strong>父传子</strong>：props</li><li><strong>子传父</strong>：$emit</li><li><strong>兄弟组件</strong>：<ul><li>$attrs&#x2F;$emit</li><li>$parent&#x2F;$root</li><li>Vuex</li><li>Event Bus($emit&#x2F;$on)</li></ul></li></ol><p>注：$attrs 是一个包含父组件传递给子组件但未在子组件的 props 中定义的属性的对象。</p><h2 id="指令优先级"><a href="#指令优先级" class="headerlink" title="指令优先级"></a>指令优先级</h2><h3 id="v-if和v-for的优先级是怎样的？"><a href="#v-if和v-for的优先级是怎样的？" class="headerlink" title="v-if和v-for的优先级是怎样的？"></a>v-if和v-for的优先级是怎样的？</h3><ul><li>Vue2中v-for优先级更高</li><li>Vue3中v-if优先级更高</li><li>官方文档明确表明不要在同一个标签中同时使用这两个指令</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="Vue的生命周期有哪些？各自的作用是什么？"><a href="#Vue的生命周期有哪些？各自的作用是什么？" class="headerlink" title="Vue的生命周期有哪些？各自的作用是什么？"></a>Vue的生命周期有哪些？各自的作用是什么？</h3><p><strong>Vue2生命周期：</strong></p><ol><li><p><strong>beforeCreate</strong></p><ul><li>在实例初始化之后，数据观测和事件配置之前调用</li><li>用途：初始化操作，但不能访问响应式数据</li></ul></li><li><p><strong>created</strong></p><ul><li>实例创建完成后调用</li><li>已完成数据观测、属性和方法的运算，watch&#x2F;event事件回调</li><li>用途：数据获取、事件监听等初始化操作</li></ul></li><li><p><strong>beforeMount</strong></p><ul><li>挂载开始前调用</li><li>用途：渲染前的准备工作，如数据格式化</li></ul></li><li><p><strong>mounted</strong></p><ul><li>DOM挂载完成后调用</li><li>用途：DOM操作、第三方库初始化</li></ul></li><li><p><strong>beforeUpdate</strong></p><ul><li>数据更新时调用，发生在虚拟DOM打补丁之前</li><li>用途：更新前访问现有DOM，如移除事件监听器</li></ul></li><li><p><strong>updated</strong></p><ul><li>虚拟DOM重新渲染和打补丁之后调用</li><li>用途：更新后的DOM操作，但应避免在此阶段更改状态</li></ul></li><li><p><strong>beforeDestroy</strong></p><ul><li>实例销毁前调用</li><li>用途：清理操作，如移除事件监听器、定时器</li></ul></li><li><p><strong>destroyed</strong></p><ul><li>实例销毁后调用</li><li>用途：最终的清理工作</li></ul></li></ol><p><strong>Vue3新增：</strong></p><ul><li><strong>setup</strong><ul><li>在组件实例创建之前执行</li><li>组合式API的入口</li><li>可访问props和context，但不能访问this</li></ul></li></ul><h2 id="组件扩展"><a href="#组件扩展" class="headerlink" title="组件扩展"></a>组件扩展</h2><h3 id="如何扩展一个组件？"><a href="#如何扩展一个组件？" class="headerlink" title="如何扩展一个组件？"></a>如何扩展一个组件？</h3><ol><li><strong>使用Composition API进行逻辑扩展</strong></li><li><strong>使用slots进行内容扩展</strong><ul><li>默认插槽</li><li>具名插槽</li><li>作用域插槽</li></ul></li></ol><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="什么是虚拟DOM？有什么优点？"><a href="#什么是虚拟DOM？有什么优点？" class="headerlink" title="什么是虚拟DOM？有什么优点？"></a>什么是虚拟DOM？有什么优点？</h3><p>虚拟DOM是一个虚拟的DOM对象，本质是一个JS对象。</p><p><strong>优点：</strong></p><ol><li>减少操作真实DOM的次数，提高程序性能</li><li>方便实现跨平台</li></ol><h2 id="Vue3新特性"><a href="#Vue3新特性" class="headerlink" title="Vue3新特性"></a>Vue3新特性</h2><h3 id="Vue3相比Vue2有哪些重要的新特性？"><a href="#Vue3相比Vue2有哪些重要的新特性？" class="headerlink" title="Vue3相比Vue2有哪些重要的新特性？"></a>Vue3相比Vue2有哪些重要的新特性？</h3><ol><li><p><strong>Composition API</strong></p><ul><li>用于组织和复用组件逻辑</li><li>将相同功能的代码放在一起，便于管理</li></ul></li><li><p><strong>响应式系统升级</strong></p><ul><li>使用Proxy替代Object.defineProperty</li><li>更好的性能和更完整的响应式支持</li></ul></li><li><p><strong>动态路由</strong></p><ul><li>更灵活的路由配置</li><li>在params后添加反斜杠和冒号实现动态路由</li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/">前端框架</category>
      
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/Vue/">Vue</category>
      
      <category domain="https://sheleftwithregrets.github.io/blog.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/">前端框架</category>
      
      
      <comments>https://sheleftwithregrets.github.io/blog.github.io/2025/02/24/%E7%AC%AC%E4%B8%83%E7%AF%87%EF%BC%9AVue%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
